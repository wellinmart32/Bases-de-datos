Rem  Copyright (c) Oracle Corporation 2006 - 2018. All Rights Reserved.
Rem


Rem    NAME
Rem      apex_install_pe_data.sql
Rem


Rem    DESCRIPTION
Rem      Insert Property Editor metadata into wwv_pe_* tables during APEX installation
Rem


Rem    MODIFIED     (MM/DD/YYYY)
Rem    arayner       05/13/2013 - Created
Rem    arayner       05/14/2013 - Added get_property_id getter function and c_comp_type_page_item constant (feature #1129)
Rem    arayner       05/20/2013 - Changed store_property to pass display group name not ID, changed store_component_prop to no longer need to pass the component_prop_id (feature #1129)
Rem    arayner       05/22/2013 - Stored more top-level component types, removed explicit IDs and sequences from many store_* calls, progressed LOV handling, tidying (feature #1129)
Rem    arayner       05/23/2013 - Removed "$$$ add this constraint" comment in get_propert_lov_value_id, constraint wwv_pe_prop_lov_val_uk added (feature #1129)
Rem    pwolf         05/23/2013 - Changed store calls, added sample configuration for build options
Rem    pawolf        05/24/2013 - Added configuration for page, page group, application and page computation and authorization
Rem    arayner       06/03/2013 - Added columns parent_component_type_id, parent_fk_column, is_page_component to wwv_pe_component_types (feature #1129)
Rem    pawolf        07/04/2013 - Changed is_page_component = false for component type "page"
Rem    arayner       06/05/2013 - store_property calls include whether a property is translatable, based on information stored in wwv_flow_translatable_cols$
Rem    arayner       06/11/2013 - Added configuration for Dynamic Action Event information
Rem    arayner       06/11/2013 - Minor adjustments to DA Event configuration
Rem    arayner       06/12/2013 - Added configuration for Dynamic Action Action information
Rem    arayner       06/13/2013 - Part way through ITEM configuration, other improvements (feature #1129)
Rem    arayner       06/14/2013 - Continuation through ITEM configuration, other improvements (feature #1129)
Rem    arayner       06/17/2013 - Additional PE logic supported (unique, legacy, set_case), improved system msg naming, added remaining item properties (feature #1129)
Rem    arayner       06/18/2013 - Part way through BUTTON configuration, re-organisation of some ITEM property display points (feature #1129)
Rem    arayner       06/19/2013 - Added remaining BUTTON properties (feature #1129)
Rem    arayner       06/19/2013 - Reworked BUTTON properties related to the button action (feature #1129)
Rem    pawolf        06/20/2013 - Added basic region and page process configuration
Rem    arayner       06/20/2013 - Added wwv_pe_component_props.is_read_only, removed CUSTOM display group, changed a few TEXT to TEXT_RESTRICTED
Rem                               property types, consolidated CSS_CLASSES and HTML_ATTRIBUTES properties (feature #1129)
Rem    pawolf        07/18/2013 - Updated property_type to be in sync with attribute type of plug-ins
Rem    pawolf        07/18/2013 - Added REGION_PLUGIN_SQL and REGION_PLUGIN_PLAIN
Rem    hfarrell      07/19/2013 - Updated help,display_length,max_lenght for DIALOG_WIDTH,DIALOG_MAX_WIDTH,DIALOG_ATTRIBUTES. Added DIALOG_HEIGHT (currently commented out) (feature #587)
Rem    pawolf        07/26/2013 - Added AUTHENTICATION and plug-in dependencies for standard attributes
Rem    cneumuel      07/26/2013 - Added INVALID_SESSION_TYPE and LOGOUT_TYPE to authentications
Rem    pawolf        07/26/2013 - Added additional properties to REGION
Rem    pawolf        07/29/2013 - Added BRANCH
Rem    pawolf        07/30/2013 - Added VALIDATION, updated a few BUTTON properties
Rem    pawolf        08/02/2013 - Updated PAGE configuration
Rem    pawolf        08/06/2013 - Added DIALOG_TEMPLATE, NAVIGATION_LIST, OVERWRITE_NAVIGATION_LIST, NAVIGATION_LIST_TEMPLATE
Rem    pawolf        08/08/2013 - Added USER INTERFACE properties and display property for some shared components
Rem    pawolf        08/16/2013 - Added supported_ui_types to wwv_pe_properties
Rem    pawolf        08/16/2013 - Added property PLUGIN_CATEGORY
Rem    pawolf        08/20/2013 - Changed constraint of wwv_flow_step_items.begin_on_new_line and begin_on_new_field to Y and N
Rem    pawolf        08/20/2013 - Added is_internal to wwv_pe_properties
Rem    pawolf        08/22/2013 - Added region and page process type LOVs
Rem    pawolf        09/11/2013 - Added plugin_attributes_seq_offset to wwv_pe_component_types
Rem    arayner       09/12/2013 - Removed some comments that are no longer relevant
Rem    arayner       09/12/2013 - Added lov_null_text to wwv_pe_properties, and use this for item restricted characters property
Rem    pawolf        09/17/2013 - Added IR_ATTRIBUTES, IR_SAVED_REPORT, IR_COLUMN_GROUP and IR_COLUMN
Rem                             - Data Model changes
Rem    pawolf        09/18/2013 - Added page process configuration
Rem    pawolf        09/20/2013 - Added property DA_EVENT
Rem    pawolf        09/24/2013 - Changed LOV configuration
Rem    pawolf        09/25/2013 - Added substitution_scope and bind_variable_scope to wwv_pe_component_props
Rem    pawolf        09/25/2013 - Added reference_scope and supports_substitution to wwv_pe_component_props
Rem    pawolf        09/25/2013 - Added singular_title and plural_title to wwv_pe_component_types
Rem    pawolf        09/27/2013 - Added plugin_type and plugin_column to wwv_pe_component_types
Rem    pawolf        09/26/2013 - Added display_sequence to wwv_pe_component_types
Rem                             - Added is_searchable to wwv_pe_properties
Rem    pawolf        10/07/2013 - Fixed installation error
Rem    pawolf        10/08/2013 - Synchronized text of point properties (process, computation, branch)
Rem    pawolf        10/08/2013 - Added restricted_chars and new property types to wwv_pe_properties
Rem                             - Added parent_comp_prop_id to wwv_pe_component_props
Rem    arayner       10/11/2013 - Added Page Process Web Service Parameter configuration
Rem    arayner       10/12/2013 - Revised some naming and labelling for page process web service param configuration
Rem    pawolf        10/15/2013 - Fixed a few required flags
Rem    pawolf        10/15/2013 - Added plug-in dependency for PROCESS_REGION and changed ITEM component type to filter out BUTTONs
Rem    pawolf        10/15/2013 - Added plugin_std_attributes to wwv_pe_component_props
Rem                             - Removed not null constraint from wwv_pe_component_props.is_required
Rem    pawolf        10/16/2013 - Added is_legacy to wwv_pe_property_lov_values
Rem    arayner       10/17/2013 - Started map and map series configuration
Rem    pawolf        10/17/2013 - Added display_column to wwv_pe_component_types
Rem    pawolf        10/21/2013 - Changed parent property handling
Rem    arayner       10/24/2013 - ITEM_NAME default value changed to end with '_NEW', DEFAULT_VALUE_TYPE no longer required and removed default value
Rem    arayner       10/25/2013 - Changed IR_ATTRIBUTES component type titles
Rem    pawolf        10/31/2013 - Added audit information
Rem    cbcho         11/06/2013 - Removed Interactive report sort properties (feature #1303)
Rem    cbcho         11/06/2013 - Added Interactive report pivot properties (feature #536)
Rem    arayner       11/08/2013 - Removed DEFINED_BY_DA from depending on expression for BUTTON_TARGET
Rem    pawolf        11/12/2013 - Changed default of SOURCE_USED to NO
Rem    cneumuel      11/15/2013 - Added support for list and breadcrumb regions (feature #1312)
Rem    cneumuel      11/18/2013 - Added list and breadcrumb templates (feature #1312)
Rem    pawolf        11/22/2013 - Renamed SOURCE_LIST_TEMPLATE and SOURCE_BREADCRUMB_TEMPLATE
Rem    pawolf        11/22/2013 - Added component type APP_ITEM
Rem    pawolf        11/22/2013 - Data model changes in wwv_pe_properties and wwv_pe_component_props
Rem    pawolf        11/24/2013 - Renamed multiple_values to multi_value_delimiter
Rem    arayner       11/28/2013 - Changed some properties to use SQL Expression type, switched properties using TEXTAREA to use either TEXT EDITOR, or a more specific type where appropriate
Rem    pawolf        11/28/2013 - Changed some properties
Rem    cneumuel      11/29/2013 - Changed button properties: button style is always template, added new actions (feature #1314)
Rem    pawolf        11/29/2013 - Added plug-in category NAVIGATION
Rem    pawolf        12/03/2013 - Changed ids of component types
Rem    pawolf        12/04/2013 - Added check_configuration, fixed meta data
Rem    pawolf        12/05/2013 - Added component types tab set and data load table
Rem    pawolf        12/07/2013 - Added classic report configuration
Rem    pawolf        12/08/2013 - Continued working on classic report columns configuration
Rem    pawolf        12/08/2013 - Continued working on classic report configuration
Rem    pawolf        12/09/2013 - Continued working on classic report* configuration
Rem                             - Added removing of unused system messages
Rem    pawolf        12/09/2013 - Added tabular form configuration
Rem    pawolf        12/09/2013 - Added comment_text to wwv_pe_properties, wwv_pe_property_lov_values and wwv_pe_component_props
Rem    pawolf        12/09/2013 - Continued working on tabular form configuration
Rem    pawolf        12/10/2013 - Reworked IR column configuration
Rem    cneumuel      12/12/2013 - Reworked branches, based on wwv_flow_step_branches_dev view
Rem    arayner       12/13/2013 - Changed some color property types to use COLOR instead of TEXT, now that thats supported by the widget
Rem    pawolf        12/16/2013 - Changed wwv_flow_step_items_dev to return named_lov_id instead of name of lov
Rem    pawolf        12/17/2013 - Added property QUERY_COLUMN_ID
Rem    arayner       12/18/2013 - Simplified usability of script by having it delete config, then insert (instead of insert or update)
Rem    cneumuel      12/16/2013 - html and plsql migration to native plugins (feature #1312)
Rem    pawolf        12/19/2013 - Added support for derived classic report and tabular form columns
Rem    pawolf        12/20/2013 - Added map series configuration
Rem    pawolf        12/20/2013 - Added chart series configuration
Rem    arayner       12/30/2013 - Minor changes to IR Attributes Icon View properties
Rem    arayner       12/31/2013 - Commented out button action 'Downlaod Printable Report Query' and added a $$$ comment
Rem    pawolf        01/02/2014 - Added chart attributes
Rem    pawolf        01/10/2014 - Added min/max value, unit and examples to wwv_pe_properties
Rem                             - Added configuration for flash chart5 and flash chart5 series
Rem    pawolf        01/10/2014 - Changed ir_saved_reports to use wwv_flow_worksheet_rpts_dev
Rem    pawolf        01/13/2014 - Added configuration for classic calendar
Rem    arayner       01/13/2014 - Added redirect to different application option to BUTTON_ACTION property LOV
Rem    arayner       01/14/2014 - Minor grammar change
Rem    arayner       01/14/2014 - Changed depending on property for classic calendar DATE_FORMAT
Rem    arayner       01/14/2014 - Updates to classic calendar configuration
Rem    arayner       01/15/2014 - Further updates to classic calendar configuration
Rem    pawolf        01/15/2014 - Updated help text to include #MIN_DIRECTORY#
Rem    arayner       01/15/2014 - Updates to classic report / tabular form configuration
Rem    arayner       01/16/2014 - Made LINK_TARGET for IR Attributes and IR Column common
Rem    arayner       01/16/2014 - Changed all occurences of HTML_ATTRIBUTES to be CUSTOM_ATTRIBUTES
Rem    arayner       01/17/2014 - Commented out call to check_configuration, only used as an ad-hoc development check
Rem    arayner       01/17/2014 - Page dialog property updates
Rem    arayner       01/20/2014 - Changed ELEMENT_MAX_CHARACTERS to be in VALIDATION display group, removed unit from page dialog properties
Rem    pawolf        01/20/2014 - Updated some units
Rem    arayner       01/21/2014 - Work on map attribute configuration
Rem    pawolf        01/21/2014 - Added MAP_LEVEL_*
Rem    arayner       01/21/2014 - Removed MAP_LOCATION property
Rem    arayner       01/21/2014 - Continued work on map attributes
Rem    arayner       01/23/2014 - Continued work on map attributes
Rem    pawolf        01/23/2014 - Changed chart properties
Rem    pawolf        01/24/2014 - Changed display property of page to NAME
Rem    arayner       01/24/2014 - Continued work on map attributes
Rem    arayner       01/29/2014 - Continued work on map attributes
Rem    arayner       01/29/2014 - Continued work on map attributes
Rem    pawolf        01/29/2014 - Added MAP_REGION_COLUMN* properties
Rem    arayner       01/29/2014 - Continued work on map attributes
Rem    arayner       01/30/2014 - Minor fix making map custom color scheme properties required
Rem    arayner       01/31/2014 - Work on background color stored procedures
Rem    arayner       01/31/2014 - Continued work on map attributes; created stored procedure for chart legend
Rem    pawolf        02/03/2014 - Added edit_url to wwv_pe_component_types
Rem    pawolf        02/03/2014 - Changed Always Null to just Null
Rem    pawolf        02/10/2014 - Added is_quick_pick to wwv_pe_property_lov_values
Rem    cneumuel      02/10/2014 - Changed NATIVE_HTML region to NATIVE_STATIC
Rem    pawolf        02/13/2014 - Changed default of DA Action Type to NATIVE_SHOW
Rem    pawolf        02/14/2014 - Dont clear validation conditions if the region of a validation is changed
Rem    arayner       02/14/2014 - Integrated help updates from DPEAKE
Rem    pawolf        02/14/2014 - Changed validation type to be different for empty validation region or populated validation region
Rem    pawolf        02/17/2014 - Changed IR columns: Require Named LOV for "Plain Text (based on LOV)"
Rem                             - Changed IR columns: Moved all Column Filter attributes into there own "Column Filter" group
Rem    pawolf        02/20/2014 - Integrated help updates from DPEAKE
Rem    pawolf        02/20/2014 - Added printing component types
Rem    pawolf        02/20/2014 - Updated help text, added p_help_text for property lov values
Rem    cneumuel      02/20/2014 - Added REJOIN_EXISTING_SESSIONS (feature #1047)
Rem    pawolf        02/24/2014 - Integrated help updates from DPEAKE
Rem    pawolf        02/25/2014 - Integrated help updates from DPEAKE
Rem    pawolf        03/05/2014 - Integrated help updates from Drue and Terri
Rem    pawolf        03/07/2014 - Integrated help updates from DPEAKE
Rem    pawolf        03/07/2014 - Added pk_column and copy_url to wwv_pe_component_types
Rem    pawolf        03/07/2014 - Added copy url configuration
Rem    pawolf        03/11/2014 - Added component type REGION PLUGIN ATTRIBUTES
Rem    pawolf        03/21/2014 - Updated CSS_CLASSES and added ICON_CSS_CLASSES
Rem    pawolf        03/21/2014 - Added REGION_SUB_CSS_CLASSES
Rem    pawolf        03/24/2014 - Added TEMPLATE_OPTIONS
Rem    hfarrell      03/24/2014 - Added DIALOG_CHAINED (feature #587)
Rem    dpeake        03/21/2014 - Integrated help updates from DPEAKE
Rem    hfarrell      03/26/2014 - Revised help text for DIALOG_CHAINED
Rem    arayner       03/26/2014 - Changed dependency on ALLOW_USERS_TO_SAVE_PUBLIC_REPORT to only show when ALLOW_USERS_TO_SAVE_REPORTS is Y
Rem    cneumuel      04/03/2014 - Moved REJOIN_EXISTING_SESSIONS before DEEP_LINKING
Rem    cneumuel      04/04/2014 - item based button migration to page buttons (feature #1314)
Rem    pawolf        04/04/2014 - Changed some of the new button properties (feature #1314)
Rem    pawolf        04/04/2014 - Fixed bugs in condition types
Rem    dpeake        04/07/2014 - Updated help text for Rejoin Sessions
Rem    arayner       04/08/2014 - Minor change to Rejoin Sessions text
Rem    pawolf        04/08/2014 - Added parent for BUTTON_POSITION
Rem    pawolf        04/08/2014 - Added ICON_CSS_CLASSES for regions (feature #1394)
Rem    pawolf        04/09/2014 - Added #PRESET_TEMPLATE_OPTIONS# placeholder for template options
Rem                             - Deprecated Date Picker (Classic)
Rem    cneumuel      04/09/2014 - Updated help text for Rejoin Sessions
Rem                             - Removed unicode character in 1st line
Rem    pawolf        04/09/2014 - Fixed help text of different validation types
Rem    pawolf        04/11/2014 - Updated TEMPLATE_OPTIONS
Rem    pawolf        04/11/2014 - Added null_help_text
Rem    pawolf        04/13/2014 - Added additional depending_on_* columns
Rem                             - Added depending on check for FLASH_PREFERRED to chart properties
Rem                             - Added depending on check for IS_GLOBAL_PAGE to page properties
Rem    pawolf        04/15/2014 - Changed 3D_MODE to be excluded for RANGE charts
Rem    pawolf        04/16/2014 - Integrated help updates from DPEAKE
Rem    pawolf        04/16/2014 - Changed 3D_MODE to be excluded for RANGE charts if HTML, but to to be available for Flash
Rem    dpeake        04/16/2014 - Updated help text for Template Options
Rem    cneumuel      04/17/2014 - Removed properties CACHE_PAGE, CACHE_BY_USER. Changed REGION_CACHING to CACHE_MODE, since it is used both by pages and regions. Added session caching to CACHE_MODE (feature #1401)
Rem    pawolf        04/24/2014 - Changes for web services
Rem    cneumuel      04/24/2014 - Added CACHE_DEPENDS_ON_ITEMS for regions (feature #1401)
Rem    cneumuel      04/25/2014 - In CACHE_DEPENDS_ON_ITEMS: made property multi-valued
Rem    pawolf        04/29/2014 - In store_grid_comp_prop: set common flag for most grid properties
Rem    arayner       04/29/2014 - Changed default value for IR_LINK_COLUMN to N (exclude link column)
Rem    pawolf        05/05/2014 - Changed TRANSLATE_TITLE to EXCLUDE_TITLE_FROM_TRANSLATION, changed region component type to use WWV_FLOW_PAGE_PLUGS_DEV
Rem    pawolf        05/07/2014 - Changed help text for NEVER condition, changed condition type, when button pressed and default source type to common = true
Rem    pawolf        05/09/2014 - Changed web service out parameters
Rem    pawolf        05/12/2014 - Changed WS Operations to use view WWV_FLOW_WS_OPERATIONS_DEV
Rem    arayner       05/15/2014 - Continued work on map attributes
Rem    arayner       05/16/2014 - Added map series, minor changes to map attributes
Rem    cneumuel      05/16/2014 - Changed help text for REJOIN_EXISTING_SESSIONS
Rem    pawolf        05/16/2014 - Added parameter to specify if system messages should be loaded
Rem    pawolf        05/20/2014 - Changed min value of NUMBER_OF_ROWS to 0. See feedback EA1-499
Rem    pawolf        05/21/2014 - Added component types WS_REF_OPER_P*
Rem                             - Moved chart margin properties
Rem                             - Added audit info to PAGE_PROC_WS_PARAMs
Rem    pawolf        05/22/2014 - Added PAGE_MODE as parent property for PAGE_TEMPLATE and DIALOG_TEMPLATE
Rem    cneumuel      05/23/2014 - Added view names and view column names to support advisor checks (feature #1432)
Rem    pawolf        05/23/2014 - Changed help text of property EXECUTION_SEQUENCE
Rem                             - Set default color for required COLOR properties
Rem    cneumuel      05/26/2014 - Fixed invalid view column mappings (feature #1432)
Rem    pawolf        05/26/2014 - Added dependencies for theme navigation type
Rem    pawolf        06/12/2014 - Added SCHEMA_OVERRIDE_ITEM to regions
Rem    pawolf        06/12/2014 - DISTINCT properties should be searchable by default
Rem    pawolf        06/13/2014 - Added new property type COMPONENT
Rem    pawolf        06/13/2014 - Commented out Shared Component properties which are currently not used
Rem    pawolf        06/13/2014 - Renamed prompt of VALIDATION_REGION and PROCESS_REGION to Tabular Form
Rem    hfarrell      06/20/2014 - Fixed typo in help text for conditional type NOT_EXISTS and ALWAYS (EA2-62)
Rem    pawolf        07/01/2014 - Changed LINK_TEXT property for IR column to be required (EA-570)
Rem    pawolf        07/03/2014 - Fixed help text of page level READ_ONLY property (bug #19149242)
Rem    pawolf        07/04/2014 - Added JAVASCRIPT_EXPRESSION to dynamic action and dynamic action event (feature #1450)
Rem                             - Deprecated DOM_OBJECT for dynamic action and dynamic action event (feature #1448)
Rem    pawolf        07/08/2014 - Added WHEN_SELECTION_TYPE_CODE and AFFECTED_ELEMENTS_TYPE_CODE to support Advisor deprecation warning (feature #1448)
Rem    pawolf        07/08/2014 - Added uppercase and restricted character check for page alias
Rem    hfarrell      07/09/2014 - In CALENDAR_TEMPLATE: renamed from P697_ID to F4000_P697_ID (as per David Gs item renaming)
Rem    arayner       07/14/2014 - Minor updates to JAVASCRIPT_EXPRESSION dynamic action help (feature #1450)
Rem    arayner       07/14/2014 - Minor change to JAVASCRIPT_EXPRESSION dynamic action help (feature #1450)
Rem    pawolf        07/22/2014 - Renamed legacy column in plug-in and property tables to deprecated
Rem    cneumuel      07/24/2014 - Changed help text for REJOIN_EXISTING_SESSIONS
Rem    cbcho         08/08/2014 - Added NAVIGATION_LIST_POSITION (feature #1472)
Rem    pawolf        08/12/2014 - Added additional global navigation list properties
Rem    arayner       08/20/2014 - Removed dependency on COLUMN_HEADING for IR columns when type is Hidden (heading still relevant for IR settings, even though the column is hidden)
Rem    pawolf        08/26/2014 - As requested by David, moved ALLOW_USERS_TO_SAVE_REPORTS, ALLOW_USERS_TO_SAVE_PUBLIC_REPORT and SAVE_PUBLIC_REPORT_AUTHORIZATION into Actions Menu group
Rem    pawolf        09/10/2014 - Updated help text of HTML_HEADER
Rem    pawolf        09/23/2014 - Changed PCT_GRAPH* attributes to be optional
Rem    pawolf        09/25/2014 - Renamed Calendar (Template) to Legacy Calendar
Rem    pawolf        09/30/2014 - Changed ICON_CSS_CLASSES to use new icon property type (feature #1485)
Rem    cneumuel      10/01/2014 - fixed typo for content disposition: attachment instead of attachement
Rem    pawolf        10/08/2014 - Added lov_type FUNCTION_RETURNING_SQL_QUERY
Rem    pawolf        10/16/2014 - Added create_url to wwv_flow_component_types
Rem    arayner       10/23/2014 - Changed dependency on component property for SHOW_FINDER_DROP_DOWN in IR_ATTRIBUTES
Rem    arayner       10/24/2014 - IR component properties for PCT_GRAPH_BACKGROUD_COLOR, PCT_GRAPH_FOREGROUND_COLOR and PCT_GRAPH_BAR_WIDTH made optional and with no default value (bug #19866013)
Rem    arayner       10/28/2014 - Removed properties IR_BUTTON_TEMPLATE, FINDER_IMAGE and ACTIONS_MENU_IMAGE (feature #577)
Rem    pawolf        10/31/2014 - Renamed Modal and Non-Modal to Modal Dialog and Non-Modal Dialog (as requested by Mike)
Rem    hfarrell      11/12/2014 - Applied component name change, from navigation list to navigation menu list, and default list to default navigation menu
Rem    arayner       11/13/2014 - Renamed display group Global Navigation to Navigation Menu, added Tabs display group and moved STANDARD_TAB_SET property to Tabs
Rem    pawolf        11/13/2014 - Added edit url for tab sets
Rem    pawolf        11/13/2014 - EXECUTE_CONDITION should only be displayed if a condition type has been selected (feature #1596)
Rem    pawolf        11/14/2014 - Changed reference_scope for region column attributes, moved plug-in attributes of region columns up
Rem    arayner       11/22/2014 - Changed reference scope for IR attributes, map chart series and chart series (feature #1596)
Rem    pawolf        11/28/2014 - Added GRID_LABEL_COLUMN_SPAN (feature #1615)
Rem    arayner       11/28/2014 - Added fixed_header property, and component properties for IRs, Classic Reports and Tabular forms (feature #1534)
Rem    arayner       12/03/2014 - Changed fixed_header component properties to be required and added option for NONE (feature #1534)
Rem    arayner       12/04/2014 - Added FIXED_HEADER_MAX_HEIGHT property, and component properties for IRs, Classic Reports and Tabular forms (feature #1534)
Rem    pawolf        12/04/2014 - Added grid_column_css_classes to wwv_flow_page_plugs, wwv_flow_step_items and wwv_flow_step_buttons (feature #1466)
Rem    arayner       12/06/2014 - Commented out FIXED_HEADER and FIXED_HEADER_MAX_HEIGHT component properties for classic reports / tabular forms, no longer in scope for feature #1534
Rem    arayner       12/16/2014 - Updated Dynamic Action condition properties (bug #9733317)
Rem    pawolf        12/19/2014 - Removed 'is_query_only' from property LOV_TYPE, because that prevented setting a lov type for a tabular form column
Rem    pawolf        01/13/2015 - Updated help text of PAGE_MODE (bug #19866717)
Rem    arayner       01/14/2015 - Updated help text and examples for ERROR_MESSAGE to include details of #LABEL# and #COLUMN_HEADER# substitutions
Rem    arayner       01/22/2015 - Updated help text for FIXED_HEADER
Rem    pawolf        01/23/2015 - Add NEVER to quick picks of condition type
Rem    pawolf        02/05/2015 - Change ASSOCIATED_COLUMN and VAL_COLUMN to be of type COLUMN (bug #20480249)
Rem    pawolf        02/12/2015 - Changed IR_SAVED_REPORT_ALIAS to use US_ONLY_UNDERSCORE_NO_SPACE (bug #20530199)
Rem    arayner       02/12/2015 - Added STATIC_ID property to IR columns (feature #1457)
Rem    arayner       02/12/2015 - Updated STATIC_ID component property logic for IR columns to set supports substitutions to false (feature #1457)
Rem    pawolf        02/19/2015 - Set reference_on_delete for properties of type ITEM (bug #20422531)
Rem    pawolf        03/03/2015 - Reverted deprecation of SQL Expression (bug #20636900)
Rem    pawolf        03/03/2015 - Changed REGION_DISPLAY_SELECTOR to be dependent on REGION_TEMPLATE (bug #19019646)
Rem    pawolf        03/11/2015 - Changed edit icons to new default apex-edit-pencil.png icon (bug #20444680)
Rem    pawolf        03/15/2015 - Always show GRID_LABEL_COLUMN_SPAN property (bug #20707986)
Rem    hfarrell      07/14/2015 - Resolved typo in NULL_RETURN_VALUE property (bug #21171672)
Rem    hfarrell      07/14/2015 - Changed AJAX to Ajax in display values and help text (bug #20200008)
Rem    hfarrell      09/30/2015 - TZ_DEPENDENT should not be read-only (bug #21922914)
Rem                               Added c_comp_type_jet_chart, c_comp_type_jet_chart_series (feature #1837)
Rem    cbcho         10/16/2015 - Changed help text for REPORT_ID_ITEM (bug #20702121)
Rem    cbcho         10/29/2015 - Added interactive grid, region column properties and property components (feature #1215)
Rem    pawolf        11/04/2015 - Minor Interactive Grid changes (feature #1215)
Rem    cbcho         11/04/2015 - Added IG_COLUMN_GROUP, IG_PRINT (feature #1215)
Rem    pawolf        11/12/2015 - Changed std plugin dependencies for some IG_COLUMN properties (feature #1215)
Rem    pawolf        11/13/2015 - Improved IG configuration
Rem    hfarrell      11/27/2015 - Added JET chart support - properties 829-931 added (feature #1837)
Rem    hfarrell      12/03/2015 - Updated JET property names: to shorten an avoid install issues; Removed JET_CHART_TITLE,WIDTH,HEIGHT to use existing AnyChart properties.
Rem    pawolf        12/04/2015 - Updated JET property config
Rem    hfarrell      12/04/2015 - Updated VALUE_NUMERIC_PATTERN property help text
Rem    pawolf        12/11/2015 - Added depending_on_has_to_exist* (feature #1927)
Rem    pawolf        12/11/2015 - Added dependency for validation ERROR_MESSAGE (bug #20971572)
Rem    hfarrell      01/12/2016 - JET Chart enhancements: support for new chart types donut,polar,range,radar, and associated new SERIES_TYPE_ component properties
Rem    pawolf        01/14/2016 - Added create and copy url for page component type
Rem    pawolf        01/20/2016 - Changed JET chart series column mapping properties to reference DATA_SOURCE_TYPE instead of DATA_SOURCE_SQL
Rem    pawolf        01/21/2016 - Added handling for property type PLSQL FUNCTION BODY SQL
Rem    hfarrell      01/27/2016 - Changed availability of some JET chart settings for funnel,dial,bubble, pie and donut charts.
Rem    pawolf        01/27/2016 - Changed IS_QUERY_ONLY to not show up for ROWID columns
Rem    pawolf        01/28/2016 - Added REPORT_FILTER_DATE_RANGES to IG columns
Rem    dpeake        02/01/2016 - Improved help text
Rem    dpeake        02/02/2016 - Renamed Tabular Form to Editable Region to cover both tabular forms and IG for validation and processes
Rem    hfarrell      02/03/2016 - Updated JET value formatting attributes for funnel charts
Rem    pawolf        02/05/2016 - Merged Davids help text changes
Rem    hfarrell      02/08/2016 - Updated JET-related help text, and resolved rendering of ORIENTATION property, missing tilda in help text
Rem    hfarrell      02/08/2016 - Added ITEMS_MIN_VALUE for dial gauge support
Rem    hfarrell      02/11/2016 - Updated JET-related attributes: removed prefix,postfix,added additional help text for dial charts
Rem    pawolf        02/12/2016 - Removed MIN_SUBSCRIPTION_INTERVAL, changed FILTER_OPERATORS
Rem    hfarrell      02/12/2016 - Updated conditional setting for decimal and currency settings on JET charts; revised help text on JET attributes
Rem    pawolf        02/15/2016 - Renamed PARENT_COLUMN to MASTER_COLUMN, fixed minor help text issues
Rem    pawolf        02/16/2016 - Do not show ENABLE_FILTER if MASTER_COLUMN is set
Rem    pawolf        02/17/2016 - Changed handling of single chart types (bar, line, ...)
Rem    hfarrell      02/19/2016 - Extended c_jet_line_charts to include area - for line styling
Rem    pawolf        02/22/2016 - Added RELOAD_ON_SUBMIT
Rem    hfarrell      02/22/2016 - Added CHART_MAX_WIDTH - for JET Chart sizing
Rem    hfarrell      02/25/2016 - Integrated JET-related help text from David
Rem    pawolf        02/25/2016 - Integrated help text from David
Rem    pawolf        02/26/2016 - Minor modifications
Rem    hfarrell      03/01/2016 - Resolved typos in LOST_UPDATE_CHECK_TYPE help text
Rem    pawolf        03/07/2016 - Fixed missing p_view_column_type in store_condition_type_comp_prop of IG columns
Rem    hfarrell      03/14/2016 - JET changes: line with area support for stacking, extra y axis options; hover support independent of data cursor;
Rem                               Polar and radar chart: support for line with area series,stacking, line styling
Rem    hfarrell      03/23/2016 - Updated JET chart attributes - added examples for data source options, resolved typos
Rem    hfarrell      03/31/2016 - Updated property LINK_TARGET_TYPE (870) to remove DA option, consistent with other component support for links
Rem    hfarrell      04/01/2016 - Updated short description attributes for JET charts, to use more meaningful labels in PD
Rem    hfarrell      04/06/2016 - Updated labels and help text for JET chart attributes on columns items_short_desc_column_name, group_name_column_name, group_short_desc_column_name
Rem    hfarrell      04/07/2016 - LINK_TARGET_TYPE attribute not applicable to JET Dial Gauge charts - links not supported
Rem    pawolf        04/07/2016 - Updated LINK_TEXT for IG to be optional
Rem    pawolf        04/09/2016 - Updated IG Icon View configuration
Rem    pawolf        04/11/2016 - In wwv_flow_steps: added warn_on_unsaved_changes (feature #1652)
Rem    pawolf        04/13/2016 - In wwv_flow_step_items and wwv_flow_step_buttons: added warn_on_unsaved_changes (feature #1652)
Rem    pawolf        04/14/2016 - Improved help text for WARN_ON_UNSAVED_CHANGES attributes
Rem    pawolf        04/19/2016 - Merged group GRID with LAYOUT and changed all GRID* properties to use term Layout (feature #1994)
Rem    hfarrell      04/20/2016 - Added JET_ZOOM_DIRECTION for JET charts; minor help text tweaks for layout properties
Rem    pawolf        04/22/2016 - Added FILTER_DATA_TYPE
Rem    hfarrell      04/25/2016 - Updated JET_TIME_AXIS_TYPE visibility - for subset of chart types
Rem    pawolf        05/04/2016 - Added examples for JAVASCRIPT_CODE
Rem    hfarrell      05/13/2016 - Updated JET_TIME_AXIS_TYPE help text, re chronological ordering
Rem    hfarrell      05/19/2016 - Updated JET attributes: AXIS_STEP,MIN_STEP,MINOR_STEP - changed from integer to number to support fraction values
Rem    hfarrell      05/23/2016 - Added JET attribute NO_DATA_FOUND_MESSAGE, to support defining message for no data found;
Rem                               Removed unrequired translatable attribute from SHOW_SERIES_NAME, SHOW_GROUP_NAME
Rem    pawolf        05/24/2016 - Changed SHOW_TOTAL_ROW_COUNT to Yes, removed property NO_DATA_FOUND_MESSAGE
Rem    pawolf        06/08/2016 - Renamed Tabular Form to Editable Region to cover both tabular forms and IG for validation and processes
Rem    cczarski      06/09/2016 - Add PLUGIN_INIT_JAVASCRIPT_CODE property for item, region or dynamic action plugins.
Rem    arayner       06/22/2016 - Added DA Column logic and new condition element properties, renamed DA client-condition (features #1946 and #825)
Rem    arayner       06/22/2016 - Added COLUMN to depending on condition clause for JS_CONDITION (feature #1946)
Rem    arayner       06/22/2016 - Changed dependency for AFFECTED_REGION to also display for COLUMN type (feature #1946)
Rem    arayner       06/22/2016 - Added a comment
Rem    arayner       06/23/2016 - Changed default value for JS_CONDITION_ELEMENT_TYPE to COLUMN, changed server-side condition wording, made DA column selections quick picks, minor re-labelling (feature #1946)
Rem    arayner       06/23/2016 - Changed FIRE_ON_PAGE_LOAD prompt and updated help text, switched WHEN_COLUMN and AFFECTED_COLUMNS to be TEXT, no longer show AFFECTED_REGION when type is column (feature #1946)
Rem    arayner       06/23/2016 - Minor prompt change for FIRE_ON_PAGE_LOAD property (feature #1946)
Rem    hfarrell      06/23/2016 - Repositioned JET Overview group items to be immediately after Settings (request from Marc)
Rem                               Add Initial Zoom Support for better zoom control
Rem    arayner       06/24/2016 - Renamed WHEN_COLUMN to WHEN_COLUMNS
Rem    arayner       06/28/2016 - Changed DYNAMIC_ACTION_EVENT component type to use view WWV_FLOW_PAGE_DA_EVENTS_DEV, added IS_IG_REGION property (feature #1946)
Rem    arayner       07/04/2016 - Reworded JS_CONDITION lov values, changed JS_COND_VALUE to be JS_COND_LIST and prompt, changed JS_CONDITION_ELEMENT_TYPE prompt
Rem                             - Added *WHEN_IG condition properties, added JS_CONDITION_ITEM, corrected default value for IS_IG_REGION, updated depending conditions on JS_CONDITION* comp prop calls (feature #1946 and #825)
Rem    arayner       07/06/2016 - Added wwv_flow_page_da_actions_dev (feature #1946)
Rem    arayner       07/06/2016 - Added IS_IG_REGION to DYNAMIC_ACTION_ACTION component properties (feature #1946)
Rem    arayner       07/13/2016 - Help text updates (features #825 and #1946)
Rem    pawolf        07/15/2016 - Removed properties JS_CONDITION_BY_EVENT and JS_CONDITION_BY_TYPE
Rem    cczarski      07/19/2016 - Build Options for Report Columns - Feature #1955
Rem    pawolf        08/02/2016 - In wwv_flow_interactive_grids: added oracle_text_index_column
Rem    hfarrell      08/03/2016 - For JET Charts: added help text to axis TITLE property
Rem    pawolf        08/19/2016 - In IG: Removed FIXED_ROW_HEIGHT, removed default for MAXIMUM_ROW_COUNT and made it conditional
Rem    dpeake        08/11/2016 - Added SQL Examples help text and Build Options help text
Rem    hfarrell      08/23/2016 - Changed help text references from Application Builder to App Builder
Rem    hfarrell      08/23/2016 - For JET Charts: hide LINE_WIDTH and LINE_STYLE for area charts - neither option supported by that chart type
Rem    hfarrell      08/24/2016 - For JET Charts: changed default of ITEMS_LABEL_RENDERED to no, for series label visibility - more common not to show
Rem    pawolf        08/26/2016 - Improved COLUMN selection in dynamic action
Rem    hfarrell      08/30/2016 - For JET charts - removed spark chart, revised help text for numeric pattern, and format type
Rem    dpeake        08/30/2016 - Improved help text
Rem    pawolf        08/30/2016 - Removed XLS:PDF:RTF as IG download formats
Rem    hfarrell      08/31/2016 - Integrated help text changes from David for SOURCE_TYPE (property id 134) and LINK_TARGET (property id 363)
Rem    hfarrell      09/01/2016 - Integrated help text changes from David for DETAIL_VIEW_FOR_EACH_ROW (property id 336) and ICON_VIEW_CUSTOM (property id 794)
Rem    pawolf        09/05/2016 - Moved help text change of DETAIL_VIEW_FOR_EACH_ROW to IG definition
Rem                             - ENABLE_SUBSCRIPTIONS: changed to HIDDEN because it didnt make it into 5.1
Rem    pawolf        09/07/2016 - DATA_TYPE: changed to a select list
Rem    pawolf        09/07/2016 - IG_BUTTON: moved up to be after NAME because if it's next to the WHEN_* properties it's causing display issues
Rem    pawolf        09/08/2016 - Integrated help text changes from David
Rem                             - ENABLE_SORT_GROUP: removed Group By
Rem                             - Removed example for conditional IE file loading, enhanced help text for RequireJS
Rem    shrahman      09/08/2016 - Integrated help text changes from David for *_CSS_CLASSES, TEMPLATE_OPTIONS, and other minor text changes.
Rem    shrahman      09/09/2016 - Fixed icon bug in TEMPLATE_OPTIONS
Rem    pawolf        09/30/2016 - In IG_ICON_VIEW_LINK_TARGET: only make it visible if icon view is enabled
Rem    pawolf        10/07/2016 - In BUTTON_EXECUTE_VALIDATIONS: improved help text (bug #346)
Rem    pawolf        10/12/2016 - Interactive Grid Column: do not support filtering for Cascading LOV
Rem    pawolf        10/13/2016 - In IG_PAGINATION_TYPE: removed NONE and pushed it to 5.2
Rem    pawolf        10/14/2016 - In ICON_VIEW_ICON_TYPE: BLOB pushed to 5.2
Rem                             - In REQUIRES_FILTER, FILTER_IS_REQUIRED: pushed to 5.2
Rem    pawolf        11/22/2016 - In SUBMIT_CHECKED_ROWS: pushed to 5.2
Rem    pawolf        11/24/2016 - In RESTRICTED_CHARACTERS for IG column: pushed to 5.2
Rem    hfarrell      11/24/2016 - In REGION_TEMPLATE and LIST_TEMPLATE: revised help text to reduce character count, which was blowing out Hudson build when translated
Rem    pawolf        01/16/2017 - In GENERIC_COLUMN_COUNT: increase max value to 999 (bug #25403527)
Rem    cneumuel      02/20/2017 - In PAGE_IS_PUBLIC_Y_N: removed reference to "SCHEME authentication" in help text
Rem    pawolf        03/13/2017 - Added new attributes for Remote SQL (feature #2109)
Rem    hfarrell      04/06/2017 - Added JET chart type Pyramid, added legend support for Pyramid and Funnel (demonstration for APEX World)
Rem    hfarrell      04/18/2017 - Legend Title and Position not exposed for funnel and pyramid charts - not supported by them.
Rem    hfarrell      05/09/2017 - Extended c_jet_line_charts to include scatter - for line styling (bug #26030893)
Rem    pawolf        06/02/2017 - Added FIXED_ROW_HEIGHT to IG attributes (feature #2149)
Rem    hfarrell      06/14/2017 - Added JET chart type Box Plot - work-in-progress (5.2 feature #2145)
Rem    pawolf        06/22/2017 - Fixed supports_substitution for a few attributes (bug #26305188)
Rem    hfarrell      07/03/2017 - Added Box Plot column mappings (5.2 feature #2145)
Rem    pawolf        07/24/2017 - Commented out Box Plog column mapping
Rem    hfarrell      07/03/2017 - Reintroduced Box Plot column mappings (5.2 feature #2145)
Rem    pawolf        07/28/2017 - Added wwv_flow_page_plugs.optimizer_hint (feature #1107)
Rem    pawolf        08/09/2017 - Added property type REGION COLUMN
Rem    hfarrell      08/10/2017 - Box Plot attributes added: overview for zoom/scroll support; assigned_to_y2, datat_cursor; q2_color, q3_color
Rem    hfarrell      08/11/2017 - Updated c_jet_marker_charts to reinstate boxPlot, for availability of the marker attributes
Rem    hfarrell      09/15/2017 - Updated help text for Box Plot chart attributes
Rem    pawolf        08/25/2017 - Added wwv_flow_page_plugs.include_rowid_column (feature #2109)
Rem    pawolf        09/13/2017 - Added DEPRECATED_LINK_COLUMN to LINK_TARGET_TYPE (used by HTML/SVG chart migration)
Rem    hfarrell      10/02/2017 - Added JET chart type Gantt - work-in-progress (5.2 feature #2126) - commented out as incomplete
Rem    pawolf        10/06/2017 - Added support for region web source parameters
Rem    pawolf        10/09/2017 - Added Remote SQL support for PL/SQL processes
Rem    arayner       10/31/2017 - Added FIXED_REPORT_HEIGHT property for IG attributes, and updated some other help text (bugs #25993717 and #25897647)
Rem    cczarski      11/15/2017 - Changed WWV_FLOW_REMOTE_SERVERS table to WWV_REMOTE_SERVERS
Rem    hfarrell      11/21/2017 - Reintroducing gantt chart configuration settings (5.2 feature #2126) - work-in-progress
Rem    arayner       11/29/2017 - Deprecated all EXTERNAL_PROCESSING_* properties (feature #1717)
Rem    hfarrell      11/29/2017 - Gantt chart modifications: omitting data cursor, hover, tooltip options, legend, and zoom scale settings (feature #2126)
Rem    pawolf        12/07/2017 - Added Location support for JET charts (feature #2109)
Rem    cneumuel      12/15/2017 - Added view_columns for component props EXTERNAL_PROCESSING_URL, EXTERNAL_PROCESSING_LINK_TEXT
Rem    hfarrell      12/15/2017 - Gantt chart modifications: uncommented newly introduced viewport attributes for gantt chart support
Rem    dpeake        12/18/2017 - Updated help text
Rem    pawolf        12/20/2017 - Added POST_PROC_*, EXTERNAL_FILTER_EXPR and EXTERNAL_ORDER_BY_EXPR to regions and jet chart series
Rem    hfarrell      01/03/2018 - Feedback #EA1-33 - added missing help text for floating labels (optional and required)
Rem    arayner       01/04/2018 - Feedback #EA1-29 - Added note to help text for FORM_AUTO_COMPLETE about browser differences in how they handle autocomplete="off"
Rem    hfarrell      01/08/2018 - Gantt chart modifications: added CSS Class styling columns for task, baseline and progress bars; removed parameter p_parent_comp_prop_name for Timeline source options
Rem    pawolf        01/12/2018 - Renamed "Icon CSS Class" to "Icon" (feature #2267)
Rem    pawolf        01/15/2018 - Moved jet_chart_ws_param to component id 7840 to avoid FK constraint error during save
Rem    hfarrell      01/16/2018 - Added support for items_label_display_as for pie/donut charts
Rem    hfarrell      01/17/2018 - Revised help text for JET_LABEL_DISPLAY_AS attribute (feature #2269)
Rem    pawolf        01/23/2017 - Renamed #APEX_SOURCE_DATA# to #APEX$SOURCE_DATA#
Rem    pawolf        01/24/2017 - In wwv_pe_properties*: added PILL BUTTONS type and icon column
Rem    hfarrell      02/01/2018 - JET Sorting: added JET_FILL_GAPS and revised JET_SORT_ORDER settings (feature #2246)
Rem    pawolf        02/02/2018 - In ITEMS_VALUE_COLUMN_NAME and AGGREGATE_FUNCTION: changed depending on checks
Rem    arayner       02/07/2018 - In store_report_columns: Expose USE_AS_ROW_HEADER for LINK property types 
Rem    hfarrell      02/12/2018 - JET Sorting - expose fill gaps option for Box Plot
Rem    hfarrell      02/14/2018 - JET Box Plot tooltip columns - revised help to explain selection of same column mapping as VALUE column is unsupported (bug #27544346)
Rem    hfarrell      02/14/2018 - JET currency symbol setting: removed required flag for VALUE_CURRENCY, and revised help text
Rem    hfarrell      02/15/2018 - JET Gantt css class attributes: remove dependency on change of chart source location
Rem    hfarrell      02/15/2018 - JET Gantt - removed JET_GANTT_TASK_CSS_STYLE attribute, consider in future release
Rem    hfarrell      02/15/2018 - JET Color and CSS Class attributes - revised help text to mention support for COLUMN_VALUE substitution
Rem    pawolf        03/05/2018 - Added SQL EXPRESSION BOOLEAN to distinquish from a SQL EXPRESSION which returns a value (bug #26904608)
Rem    hfarrell      03/14/2018 - JET Gantt - removed setting of p_parent_comp_prop_name for timeline and viewport item attributes (bug #27691821) 
Rem    hfarrell      03/14/2018 - JET Gantt - VALUE_NUMERIC_PATTERN conditional setting extended to include major and minor (bug #27693658)
Rem    pawolf        05/28/2018 - Classic Report - Always make DISABLE_SORT_COLUMN available (bug #28088414)
Rem    pawolf        07/04/2018 - In JS_CONDITION_COLUMN_WHEN_IG: added missing data types (bug #28292884)
Rem    pawolf        07/19/2018 - In LOV_STATIC_VALUES: updated help text and example because of the static lov editor
Rem    hfarrell      07/19/2018 - JET Chart: Low and High column mapping data types restricted to number (bug #28366600)
Rem    arayner       07/19/2018 - Added additional help text describing requiring deep linking, for redirect links to different apps (related to bug #27782971)
Rem    hfarrell      07/20/2018 - JET Chart: Animation attribute defaults changed from none to auto, to mirror the Create Page wizard (bug #28379543)
Rem    pawolf        07/26/2018 - In LOV_STATIC_VALUES: enabled static lov editor
Rem    pawolf        08/02/2018 - In IG Attributes: removed FIXED_ROW_HEIGHT

set define '^'
set sqlprefix off
set serveroutput on

prompt Enter YES (or hit enter) to load system messages and NO to skip it (NO should only be used during installation)
define LOAD_SYSTEM_MESSAGES = '^1'

prompt
prompt Property Editor - Metadata
prompt



declare
    type t_parent_component_types is table of number index by binary_integer;
    type t_used_system_messages is table of boolean index by wwv_flow_messages$.name%type;

    c_load_system_messages          constant boolean := ( nvl( upper( '^LOAD_SYSTEM_MESSAGES' ), 'YES' ) = 'YES' );
    ------------------------------------------------------------------------
    -- Component Type Constants
    ------------------------------------------------------------------------
    c_comp_type_application         constant wwv_pe_component_types.id%type := 1000;
    --
    -- Theme related component types
    c_comp_type_theme               constant wwv_pe_component_types.id%type := 2000;
    --
    -- Templates
    c_comp_type_page_template       constant wwv_pe_component_types.id%type := 2510;
    c_comp_type_field_template      constant wwv_pe_component_types.id%type := 2520;
    c_comp_type_button_template     constant wwv_pe_component_types.id%type := 2530;
    c_comp_type_region_template     constant wwv_pe_component_types.id%type := 2540;
    c_comp_type_list_template       constant wwv_pe_component_types.id%type := 2550;
    c_comp_type_bc_template         constant wwv_pe_component_types.id%type := 2560;
    c_comp_type_calendar_template   constant wwv_pe_component_types.id%type := 2570;
    c_comp_type_report_template     constant wwv_pe_component_types.id%type := 2580;
    --
    -- Shared component related component types
    c_comp_type_app_item            constant wwv_pe_component_types.id%type := 3010;
    c_comp_type_app_computation     constant wwv_pe_component_types.id%type := 3020;
    c_comp_type_app_process         constant wwv_pe_component_types.id%type := 3030;
    c_comp_type_build_option        constant wwv_pe_component_types.id%type := 3040;
    c_comp_type_authentication      constant wwv_pe_component_types.id%type := 3050;
    c_comp_type_authorization       constant wwv_pe_component_types.id%type := 3060;
    c_comp_type_remote_database     constant wwv_pe_component_types.id%type := 3070;
    c_comp_type_web_src_module      constant wwv_pe_component_types.id%type := 3080;
    c_comp_type_web_src_operation   constant wwv_pe_component_types.id%type := 3081;
    c_comp_type_web_src_mod_param   constant wwv_pe_component_types.id%type := 3082;
    c_comp_type_web_src_oper_param  constant wwv_pe_component_types.id%type := 3083;
    c_comp_type_web_src_query       constant wwv_pe_component_types.id%type := 3085;
    c_comp_type_web_src_param       constant wwv_pe_component_types.id%type := 3086;
    --
    c_comp_type_breadcrumb          constant wwv_pe_component_types.id%type := 3510;
    c_comp_type_list                constant wwv_pe_component_types.id%type := 3520;
    -- list entries
    c_comp_type_lov                 constant wwv_pe_component_types.id%type := 3530;
    -- lov entries
    c_comp_type_ws_ref              constant wwv_pe_component_types.id%type := 3540;
    c_comp_type_ws_ref_operations   constant wwv_pe_component_types.id%type := 3541;
    c_comp_type_ws_ref_oper_p_i     constant wwv_pe_component_types.id%type := 3545;  -- web service input parameters
    c_comp_type_ws_ref_oper_p_o     constant wwv_pe_component_types.id%type := 3546;  -- web service output parameters
    c_comp_type_ws_ref_oper_p_a     constant wwv_pe_component_types.id%type := 3547;  -- web service basic auth parameters
    c_comp_type_ws_ref_oper_p_h     constant wwv_pe_component_types.id%type := 3548;  -- web service http header parameters
    c_comp_type_data_load_table     constant wwv_pe_component_types.id%type := 3550;
    -- child tables of data load
    c_comp_type_tab_set             constant wwv_pe_component_types.id%type := 3560;
    c_comp_type_report_layout       constant wwv_pe_component_types.id%type := 3570;
    --
    c_comp_type_user_interface      constant wwv_pe_component_types.id%type := 3900;
    --
    -- Misc component types
    c_comp_type_page_group          constant wwv_pe_component_types.id%type := 4010;
    --
    -- Page related component types
    --
    c_comp_type_page                constant wwv_pe_component_types.id%type := 5000;
    -- Page rendering
    c_comp_type_region              constant wwv_pe_component_types.id%type := 5110;
    c_comp_type_page_item           constant wwv_pe_component_types.id%type := 5120;
    c_comp_type_button              constant wwv_pe_component_types.id%type := 5130;
    c_comp_type_da_event            constant wwv_pe_component_types.id%type := 5140;
    c_comp_type_da_action           constant wwv_pe_component_types.id%type := 5150;
    -- Page processing
    c_comp_type_validation          constant wwv_pe_component_types.id%type := 5510;
    c_comp_type_page_computation    constant wwv_pe_component_types.id%type := 5520;
    c_comp_type_page_process        constant wwv_pe_component_types.id%type := 5530;
    c_comp_type_branch              constant wwv_pe_component_types.id%type := 5540;
    --
    -- Region type specific component types ( use a new 7xxx hundred for each region type )
    c_comp_type_region_plugin_attr  constant wwv_pe_component_types.id%type := 7000;
    --
    c_comp_type_ir_attributes       constant wwv_pe_component_types.id%type := 7010;
    c_comp_type_ir_saved_report     constant wwv_pe_component_types.id%type := 7020;
    c_comp_type_ir_column_group     constant wwv_pe_component_types.id%type := 7030;
    c_comp_type_ir_column           constant wwv_pe_component_types.id%type := 7040;
    c_comp_type_ir_print            constant wwv_pe_component_types.id%type := 7050;
    --
    c_comp_type_page_proc_ws_p_i    constant wwv_pe_component_types.id%type := 7110;  -- web service input parameters
    c_comp_type_page_proc_ws_p_o    constant wwv_pe_component_types.id%type := 7120;  -- web service output parameters
    c_comp_type_page_proc_ws_p_a    constant wwv_pe_component_types.id%type := 7130;  -- web service basic auth parameters
    c_comp_type_page_proc_ws_p      constant wwv_pe_component_types.id%type := 7150;  -- web source process parameter
    c_comp_type_region_ws_param     constant wwv_pe_component_types.id%type := 7160;  -- web source region parameter
    --
    c_comp_type_map_chart           constant wwv_pe_component_types.id%type := 7210;
    c_comp_type_map_chart_series    constant wwv_pe_component_types.id%type := 7220;
    --
    c_comp_type_classic_report      constant wwv_pe_component_types.id%type := 7310;
    c_comp_type_classic_rpt_column  constant wwv_pe_component_types.id%type := 7320;
    c_comp_type_classic_rpt_print   constant wwv_pe_component_types.id%type := 7330;
    --
    c_comp_type_tab_form            constant wwv_pe_component_types.id%type := 7410;
    c_comp_type_tab_form_column     constant wwv_pe_component_types.id%type := 7420;
    c_comp_type_tab_form_print      constant wwv_pe_component_types.id%type := 7430;
    --
    c_comp_type_chart               constant wwv_pe_component_types.id%type := 7510;
    c_comp_type_chart_series        constant wwv_pe_component_types.id%type := 7520;
    --
    c_comp_type_classic_calendar    constant wwv_pe_component_types.id%type := 7610;
    --
    c_comp_type_region_column       constant wwv_pe_component_types.id%type := 7710;
    -- JET Charts
    c_comp_type_jet_chart           constant wwv_pe_component_types.id%type := 7810;
    c_comp_type_jet_chart_series    constant wwv_pe_component_types.id%type := 7820;
    c_comp_type_jet_chart_axes      constant wwv_pe_component_types.id%type := 7830;
    c_comp_type_jet_chart_ws_param  constant wwv_pe_component_types.id%type := 7840;  -- web source jet chart series parameter
    -- interactive grid
    c_comp_type_ig_attributes       constant wwv_pe_component_types.id%type := 7910;
    c_comp_type_ig_saved_report     constant wwv_pe_component_types.id%type := 7920;
    c_comp_type_ig_column_group     constant wwv_pe_component_types.id%type := 7930;
    c_comp_type_ig_column           constant wwv_pe_component_types.id%type := 7940;
    c_comp_type_ig_print            constant wwv_pe_component_types.id%type := 7950;

    ------------------------------------------------------------------------
    -- Unit constants
    ------------------------------------------------------------------------
    c_unit_pixels         constant varchar2( 20 ) := 'pixels';
    c_unit_pixels_percent constant varchar2( 20 ) := 'pixels/%';
    c_unit_chars          constant varchar2( 20 ) := 'characters';
    c_unit_lines          constant varchar2( 20 ) := 'lines';
    c_unit_degrees        constant varchar2( 20 ) := 'degrees';
    c_unit_seconds        constant varchar2( 20 ) := 'seconds';
    c_unit_days           constant varchar2( 20 ) := 'days';

    ------------------------------------------------------------------------
    -- Flash Chart constants
    ------------------------------------------------------------------------
    c_pie                     constant varchar2( 1000 ) := 'PIE';
    c_doughnut                constant varchar2( 1000 ) := 'DOUGHNUT';
    c_pie_doughnut            constant varchar2( 1000 ) := c_pie || ',' || c_doughnut;
    c_project_gantt           constant varchar2( 1000 ) := 'PROJECT_GANTT';
    c_resource_gantt          constant varchar2( 1000 ) := 'RESOURCE_GANTT';
    c_gantt                   constant varchar2( 1000 ) := c_project_gantt || ',' || c_resource_gantt;
    c_dial                    constant varchar2( 1000 ) := 'DIAL,DIAL_PCT';
    c_candlestick             constant varchar2( 1000 ) := 'CANDLESTICK';
    c_scatter_marker          constant varchar2( 1000 ) := 'SCATTER_MARKER';
    c_line                    constant varchar2( 1000 ) := 'LINE';
    c_bar                     constant varchar2( 1000 ) := 'BAR';
    c_column                  constant varchar2( 1000 ) := 'COLUMN';
    c_range_bar               constant varchar2( 1000 ) := 'RANGE_BAR';
    c_range_column            constant varchar2( 1000 ) := 'RANGE_COLUMN';
    c_range                   constant varchar2( 1000 ) := c_range_bar || ',' || c_range_column;
    c_stacked_bar             constant varchar2( 1000 ) := 'STACKED_BAR,STACKED_BAR_PCT';
    c_stacked_column          constant varchar2( 1000 ) := 'STACKED_COLUMN,STACKED_COLUMN_PCT';
    c_stacked                 constant varchar2( 1000 ) := c_stacked_bar || ',' || c_stacked_column;
    c_col_bar_stacked         constant varchar2( 1000 ) := c_column || ',' || c_bar || ',' || c_stacked;
    c_col_bar_stacked_range   constant varchar2( 1000 ) := c_col_bar_stacked || ',' || c_range;
    c_col_bar_stacked_line    constant varchar2( 1000 ) := c_col_bar_stacked || ',' || c_line;
    c_col_bar_stk_range_line  constant varchar2( 1000 ) := c_col_bar_stacked_range || ',' || c_line;
    c_dial_pie_doughnut       constant varchar2( 1000 ) := c_dial || ',' || c_pie_doughnut;
    c_gantt_dial              constant varchar2( 1000 ) := c_gantt || ',' || c_dial;
    c_gantt_dial_pie_doughnut constant varchar2( 1000 ) := c_gantt_dial || ',' || c_pie_doughnut;

    c_col_bar_line_scatter        constant varchar2( 1000 ) := c_col_bar_stk_range_line || ',' || c_scatter_marker;
    c_col_bar_line_candle_scatter constant varchar2( 1000 ) := c_col_bar_line_scatter || ',' || c_candlestick;

    ------------------------------------------------------------------------
    -- JET Chart constants
    ------------------------------------------------------------------------
    c_jet_area                constant varchar2( 1000 ) := 'area';
    c_jet_bar                 constant varchar2( 1000 ) := 'bar';
    c_jet_box_plot            constant varchar2( 1000 ) := 'boxPlot';
    c_jet_bubble              constant varchar2( 1000 ) := 'bubble';
    c_jet_combo               constant varchar2( 1000 ) := 'combo';
    c_jet_dial                constant varchar2( 1000 ) := 'dial';
    c_jet_donut               constant varchar2( 1000 ) := 'donut';
    c_jet_funnel              constant varchar2( 1000 ) := 'funnel';
    c_jet_gantt               constant varchar2( 1000 ) := 'gantt';
    c_jet_line                constant varchar2( 1000 ) := 'line';
    c_jet_line_with_area      constant varchar2( 1000 ) := 'lineWithArea';
    c_jet_pie                 constant varchar2( 1000 ) := 'pie';
    c_jet_polar               constant varchar2( 1000 ) := 'polar';
    c_jet_pyramid             constant varchar2( 1000 ) := 'pyramid';
    c_jet_radar               constant varchar2( 1000 ) := 'radar';
    c_jet_range               constant varchar2( 1000 ) := 'range';
    c_jet_scatter             constant varchar2( 1000 ) := 'scatter';
    c_jet_stock               constant varchar2( 1000 ) := 'stock';
    c_jet_pie_donut           constant varchar2 (1000 ) := c_jet_pie||','|| c_jet_donut;
    c_jet_single              constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar||','|| c_jet_line||','|| c_jet_line_with_area||','|| c_jet_bubble||','|| c_jet_funnel||','|| c_jet_pyramid||','|| c_jet_pie_donut||','|| c_jet_scatter||','|| c_jet_stock||','|| c_jet_dial;
    --
    c_jet_stack               constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar || ',' || c_jet_combo || ',' || c_jet_line || ',' || c_jet_line_with_area;
    --c_jet_range               constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar;

    c_jet_spark               constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar || ',' || c_jet_line || ',' || c_jet_line_with_area;
    c_jet_time_axis_type      constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar|| ',' || c_jet_combo || ',' || c_jet_line || ',' || c_jet_line_with_area || ',' || c_jet_stock  || ',' ||c_jet_box_plot;
    c_jet_overview            constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar|| ',' || c_jet_combo || ',' || c_jet_line || ',' || c_jet_stock || ',' || c_jet_box_plot;
    c_jet_value_column        constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar ||','|| c_jet_combo ||','|| c_jet_dial ||','|| c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_pie_donut || ',' ||c_jet_box_plot;
    c_jet_series_column       constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar ||','|| c_jet_bubble ||','|| c_jet_combo ||','|| c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_scatter;
    --c_jet_group_column        constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar ||','|| c_jet_bubble ||','|| c_jet_combo ||','|| c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_scatter ||','|| c_jet_stock;
    c_jet_group_column        constant varchar2( 1000 ) := c_jet_area ||','|| c_jet_bar ||','|| c_jet_bubble ||','|| c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_scatter ||','|| c_jet_stock || ',' ||c_jet_box_plot;
    c_jet_common_series       constant varchar2( 1000 ) := c_jet_area || ',' || c_jet_bar || ',' || c_jet_combo || ',' ||  c_jet_line || ',' || c_jet_line_with_area;
    c_jet_line_charts         constant varchar2( 1000 ) := c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_combo ||','||c_jet_area || ',' || c_jet_polar || ',' || c_jet_radar || ',' || c_jet_scatter || ',' ||c_jet_box_plot;
    c_jet_line_style_charts   constant varchar2( 1000 ) := c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_combo ||','|| c_jet_bubble ||','|| c_jet_scatter;
    c_jet_marker_charts       constant varchar2( 1000 ) := c_jet_line ||','|| c_jet_line_with_area ||','|| c_jet_scatter ||','|| c_jet_area ||','|| c_jet_bubble || ','|| c_jet_combo || ',' ||c_jet_box_plot;
    c_jet_no_axes             constant varchar2( 1000 ) := c_jet_dial ||','|| c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_pie_donut;
    c_jet_no_sorting          constant varchar2( 1000 ) := c_jet_stock ||','|| c_jet_gantt ||','|| c_jet_dial  ||','|| c_jet_funnel ||','|| c_jet_pyramid  ||','|| c_jet_scatter ||','|| c_jet_pie||','|| c_jet_donut;
    --
    ------------------------------------------------------------------------
    -- Global Variables
    ------------------------------------------------------------------------
    g_display_group_id            number  := 1;
    g_component_property_id       number  := 1;
    g_property_lov_value_id       number  := 1;
    g_component_property_sequence number;
    g_property_lov_value_sequence number;
    --
    g_null_parent_display_seq     number  := 0;
    g_parent_component_types      t_parent_component_types;
    --
    g_used_system_messages        t_used_system_messages;

    ------------------------------------------------------------------------
    -- Variables used in the generated script
    ------------------------------------------------------------------------
    l_property_id       number;
    l_component_type_id number;

    ------------------------------------------------------------------------
    -- Verifies if the entered configuration matches with our database constraints
    ------------------------------------------------------------------------
    procedure check_configuration
    is
        l_data_length number;
        l_is_nullable varchar2( 1 );

        procedure emit_message (
            p_severity      in varchar2,
            p_type_name     in varchar2,
            p_property_name in varchar2,
            p_db_column     in varchar2,
            p_error         in varchar2 )
        is
        begin
            sys.dbms_output.put_line( upper( p_severity ) || ': Component Type "' || p_type_name || '" - Property: "' || p_property_name || '" - DB Column "' || p_db_column || '" - ' || p_error );
        end emit_message;
    begin
        for l_type in ( select id,
                               name,
                               table_name
                          from wwv_pe_component_types
                         order by id )
        loop
            for l_comp_prop in ( select p.name as property_name,
                                        nvl( cp.db_column, p.db_column ) as db_column,
                                        p.max_length,
                                        cp.is_required,
                                        coalesce( to_char( cp.depending_on_comp_prop_id ), cp.plugin_std_attributes, case when p.supported_ui_types = 'DESKTOP:JQM_SMARTPHONE' then null else 'X' end, p.deprecated_values) as conditional,
                                        depending_on_condition_type,
                                        depending_on_expression
                                   from wwv_pe_component_props cp,
                                        wwv_pe_properties p
                                  where cp.component_type_id = l_type.id
                                    and p. id = cp.property_id
                                  order by 1 )
            loop
                begin
                    select case
                             when data_type = 'CLOB' then 32767
                             else data_length
                           end as data_length,
                           nullable
                      into l_data_length,
                           l_is_nullable
                      from user_tab_columns
                     where table_name  = l_type.table_name
                       and column_name = l_comp_prop.db_column;

                    if l_comp_prop.max_length > l_data_length then
                        emit_message (
                            p_severity      => 'error',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Constraint defines ' || l_data_length || ' chars, config uses ' || l_comp_prop.max_length );
                    elsif l_comp_prop.max_length <> l_data_length then
                        emit_message (
                            p_severity      => 'warning',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Constraint defines ' || l_data_length || ' chars, config uses ' || l_comp_prop.max_length );
                    end if;

                    if l_comp_prop.is_required = 'N' and l_is_nullable = 'N' then
                        emit_message (
                            p_severity      => 'error',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Has not null constraint, config defines it nullable' );
                    end if;

                    if l_is_nullable = 'N' and l_comp_prop.conditional is not null and l_comp_prop.property_name not in ( 'FIRE_ON_PAGE_LOAD' )
                    then
                        emit_message (
                            p_severity      => 'error',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Has not null constraint, property is conditional.' );
                    end if;

                    if    l_comp_prop.is_required = 'Y'
                      and l_is_nullable = 'Y'
                      and l_comp_prop.conditional   is null
                      and l_comp_prop.property_name not like 'GRID_NEW%'
                    then
                        emit_message (
                            p_severity      => 'warning',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Is nullable, config always requires value - Add DB NN constraint.' );
                    end if;

                    if    l_comp_prop.depending_on_condition_type in ( 'EQUALS', 'NOT_EQUALS' )
                      and l_comp_prop.depending_on_expression like '%,%'
                    then
                        emit_message (
                            p_severity      => 'error',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Depending-on expression contains comma, but ' || l_comp_prop.depending_on_condition_type || ' is used!' );
                    end if;

                exception when no_data_found then
                        emit_message (
                            p_severity      => 'error',
                            p_type_name     => l_type.name,
                            p_property_name => l_comp_prop.property_name,
                            p_db_column     => l_comp_prop.db_column,
                            p_error         => 'Column not found in ' || l_type.table_name );
                end;
            end loop;
        end loop;

    end check_configuration;

    ------------------------------------------------------------------------
    -- Get the Display Group ID, by name
    ------------------------------------------------------------------------
    function get_display_group_id (
        p_name in wwv_pe_display_groups.name%type )
        return wwv_pe_display_groups.id%type
    is
        l_id wwv_pe_display_groups.id%type;
    begin
        select id
          into l_id
          from wwv_pe_display_groups
         where name = p_name;

        return l_id;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Display Group "' || p_name || '" not found!' );
        -- too_many_rows will never be raised, as name is uniquely constrained
    end get_display_group_id;

    ------------------------------------------------------------------------
    -- Get the Property ID, by name
    ------------------------------------------------------------------------
    function get_property_id (
        p_name in wwv_pe_properties.name%type )
        return wwv_pe_properties.id%type
    is
        l_id wwv_pe_properties.id%type;
    begin
        select id
          into l_id
          from wwv_pe_properties
         where name = p_name;

        return l_id;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Property "' || p_name || '" not found!' );
        -- too_many_rows will never be raised, as name is uniquely constrained
    end get_property_id;

    ------------------------------------------------------------------------
    -- Get the Property Name, by ID
    ------------------------------------------------------------------------
    function get_property_name (
        p_id    in wwv_pe_properties.id%type )
        return wwv_pe_properties.name%type
    is
        l_name wwv_pe_properties.name%type;
    begin
        select name
          into l_name
          from wwv_pe_properties
         where id = p_id;

        return l_name;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Property "' || p_id || '" not found!' );
        -- too_many_rows will never be raised, as ID is unique
    end get_property_name;

    ------------------------------------------------------------------------
    -- Get the Component Property ID, by Component Type ID and Property Name
    ------------------------------------------------------------------------
    function get_component_prop_id (
        p_component_type_id in wwv_pe_component_types.id%type,
        p_property_name     in wwv_pe_properties.name%type )
        return wwv_pe_component_props.id%type
    is
        l_id wwv_pe_component_props.id%type;
    begin
        select cp.id
          into l_id
          from wwv_pe_component_props cp,
               wwv_pe_properties p
         where p.name               = p_property_name
           and cp.component_type_id = p_component_type_id
           and cp.property_id       = p.id;

        return l_id;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Property "' || p_property_name || '" for component type "' || p_component_type_id || '" not found!' );
        -- too_many_rows will never be raised, unique constraint on property_id
        -- and component_type_id
    end get_component_prop_id;

    ------------------------------------------------------------------------
    -- Get the Component Property ID, by Component Type ID and Property Name
    ------------------------------------------------------------------------
    function get_component_type_name (
        p_component_type_id in wwv_pe_component_types.id%type )
        return wwv_pe_component_types.name%type
    is
        l_name wwv_pe_component_types.name%type;
    begin
        select name
          into l_name
          from wwv_pe_component_types
         where id = p_component_type_id;

        return l_name;
    exception
        when no_data_found then
            raise_application_error( -20999, 'Component Type "' || p_component_type_id || '" not found!' );
        -- too_many_rows will never be raised as ID is unique
    end get_component_type_name;

    ------------------------------------------------------------------------
    -- System Message
    ------------------------------------------------------------------------
    procedure store_msg (
        p_name         in out varchar2,
        p_message_text in     varchar2 )
    is
    begin
        p_name := upper( 'PE.' || p_name );

        if p_message_text is not null and c_load_system_messages then
            ------------------------------------------------------------------------
            -- Try an update first
            ------------------------------------------------------------------------
            update wwv_flow_messages$
               set message_text = p_message_text
             where flow_id           = 4411
               and security_group_id = 10
               and name              = p_name
               and message_language  = 'en';
            ------------------------------------------------------------------------
            -- Do an insert if nothing has been updated
            ------------------------------------------------------------------------
            if sql%rowcount = 0 then
                insert into wwv_flow_messages$ (
                    flow_id,
                    security_group_id,
                    name,
                    message_text,
                    message_language )
                values (
                    4411,
                    10,
                    p_name,
                    p_message_text,
                    'en' );
            end if;
            g_used_system_messages( p_name ) := true;
        end if;
    end store_msg;
    --
    procedure remove_unused_messages
    is
    begin
        if c_load_system_messages then
            for l_msg in ( select rowid,
                                  name
                             from wwv_flow_messages$
                            where flow_id           = 4411
                              and security_group_id = 10
                              and name              like 'PE.%'
                              and message_language  = 'en' )
            loop
                if not g_used_system_messages.exists ( l_msg.name ) then
                    delete wwv_flow_messages$
                     where rowid = l_msg.rowid;
                end if;
            end loop;
        end if;
    end remove_unused_messages;

    ------------------------------------------------------------------------
    -- Component Types
    ------------------------------------------------------------------------
    procedure store_component_type (
        p_id                         in number,
        p_name                       in varchar2,
        p_singular_title             in varchar2,
        p_plural_title               in varchar2,
        p_table_name                 in varchar2,
        p_view_name                  in varchar2 default null,
        p_pk_column                  in varchar2 default 'ID',
        p_parent_component_type_id   in number   default null,
        p_parent_fk_column           in varchar2 default null,
        p_page_id_column             in varchar2 default null,
        p_display_column             in varchar2,
        p_where_clause               in varchar2 default null,
        p_validation_plsql_ret_error in varchar2 default null,
        p_plugin_type                in varchar2 default null,
        p_plugin_column              in varchar2 default null,
        p_create_url                 in varchar2 default null,
        p_edit_url                   in varchar2 default null,
        p_copy_url                   in varchar2 default null )
    is
        l_msg_plural_title   wwv_flow_messages$.name%type;
        l_msg_singular_title wwv_flow_messages$.name%type;
        l_display_sequence   number;
    begin
        ------------------------------------------------------------------------
        -- Store system message
        ------------------------------------------------------------------------
        l_msg_plural_title := 'COMPONEN.TYPE.' || p_name || '.PLURAL';
        store_msg (
            p_name         => l_msg_plural_title,
            p_message_text => p_plural_title );

        l_msg_singular_title := 'COMPONEN.TYPE.' || p_name || '.SINGULAR';
        store_msg (
            p_name         => l_msg_singular_title,
            p_message_text => p_singular_title );

        ------------------------------------------------------------------------
        -- Calculate Display Sequence
        ------------------------------------------------------------------------
        if p_parent_component_type_id is not null then
            if not g_parent_component_types.exists( p_parent_component_type_id ) then
                g_parent_component_types( p_parent_component_type_id ) := 0;
            end if;
            --
            g_parent_component_types( p_parent_component_type_id ) := g_parent_component_types( p_parent_component_type_id ) + 1;
            l_display_sequence := g_parent_component_types( p_parent_component_type_id );
        else
            l_display_sequence := g_null_parent_display_seq + 1;
        end if;

        insert into wwv_pe_component_types (
            id,
            name,
            table_name,
            view_name,
            plural_title,
            singular_title,
            display_sequence,
            pk_column,
            parent_component_type_id,
            parent_fk_column,
            page_id_column,
            display_column,
            where_clause,
            validation_plsql_ret_error,
            plugin_type,
            plugin_column,
            create_url,
            edit_url,
            copy_url )
        values (
            p_id,
            p_name,
            p_table_name,
            p_view_name,
            l_msg_plural_title, -- Store msg reference
            l_msg_singular_title, -- Store msg reference
            l_display_sequence,
            p_pk_column,
            p_parent_component_type_id,
            p_parent_fk_column,
            p_page_id_column,
            p_display_column,
            p_where_clause,
            p_validation_plsql_ret_error,
            p_plugin_type,
            p_plugin_column,
            p_create_url,
            p_edit_url,
            p_copy_url )
        ;

    end store_component_type;

    ------------------------------------------------------------------------
    -- Display Groups
    ------------------------------------------------------------------------
    procedure store_display_group (
        p_name  in varchar2,
        p_title in varchar2 )
    is
        l_msg_name_title wwv_flow_messages$.name%type;
    begin
        ------------------------------------------------------------------------
        -- Store system message
        ------------------------------------------------------------------------
        l_msg_name_title := 'DISPLAY_GROUP.' || p_name;
        store_msg (
            p_name         => l_msg_name_title,
            p_message_text => p_title );

        insert into wwv_pe_display_groups (
            id,
            name,
            title )
        values (
            g_display_group_id,
            p_name,
            l_msg_name_title ) -- Store msg reference
        ;

        -- Always increment global display group id
        g_display_group_id := g_display_group_id + 1;
    end store_display_group;

    ------------------------------------------------------------------------
    -- Properties
    ------------------------------------------------------------------------
    procedure store_property (
        p_id                           in number,
        p_name                         in varchar2,
        p_prompt                       in varchar2,
        p_property_type                in varchar2,
        p_prop_type_yesno_override_y   in varchar2     default null,
        p_prop_type_yesno_override_n   in varchar2     default null,
        p_multi_value_delimiter        in varchar2     default null,
        p_db_column                    in varchar2,
        p_is_query_only                in boolean      default false,
        p_display_length               in number       default null,
        p_max_length                   in number       default null,
        p_min_value                    in number       default null,
        p_max_value                    in number       default null,
        p_unit                         in varchar2     default null,
        p_validation_plsql_ret_error   in varchar2     default null,
        p_text_case                    in varchar2     default null,
        p_restricted_characters        in varchar2     default null,
        p_sql_min_column_count         in number       default null,
        p_sql_max_column_count         in number       default null,
        p_column_data_types            in varchar2     default null,
        p_examples                     in varchar2     default null,
        p_supported_ui_types           in varchar2     default 'DESKTOP:JQM_SMARTPHONE',
        p_display_group_name           in varchar2,
        p_lov_type                     in varchar2     default null,
        p_lov_component_type_id        in number       default null,
        p_lov_component_type_scope     in varchar2     default null,
        p_is_translatable              in boolean      default false,
        p_is_searchable                in boolean      default true,
        p_deprecated_values            in varchar2     default null,
        p_is_internal                  in boolean      default false,
        p_help_text                    in varchar2     default null,
        p_comment_text                 in varchar2     default null )
    is
        l_display_group_id     wwv_pe_display_groups.id%type;
        l_msg_name_prop_prompt wwv_flow_messages$.name%type;
        l_msg_name_prop_help   wwv_flow_messages$.name%type;
        l_msg_name_unit        wwv_flow_messages$.name%type;
        l_msg_name_examples    wwv_flow_messages$.name%type;
        l_text_case            wwv_pe_properties.text_case%type      := p_text_case;
        l_display_length       wwv_pe_properties.display_length%type := p_display_length;
        l_max_length           wwv_pe_properties.max_length%type     := p_max_length;
        l_help_text            wwv_flow_messages$.message_text%type  := p_help_text;
        l_examples             wwv_flow_messages$.message_text%type  := p_examples;
        l_is_translatable      varchar2( 1 ) := case when p_is_translatable then 'Y' else 'N' end;
        l_is_searchable        varchar2( 1 ) := case when p_is_searchable   then 'Y' else 'N' end;
        l_is_query_only        varchar2( 1 ) := case when p_is_query_only   then 'Y' else 'N' end;
        l_is_internal          varchar2( 1 ) := case when p_is_internal     then 'Y' else 'N' end;
    begin
        ------------------------------------------------------------------------
        -- Get Display Group ID, by Display Group Name
        ------------------------------------------------------------------------
        l_display_group_id := get_display_group_id( p_display_group_name );

        ------------------------------------------------------------------------
        -- Reset Property LOV Values sequence ready for  Property LOV values
        -- for this Property.
        ------------------------------------------------------------------------
        g_property_lov_value_sequence := 10;

        ------------------------------------------------------------------------
        -- Store system messages
        ------------------------------------------------------------------------
        l_msg_name_prop_prompt := 'PROPERTY.' || p_name || '.PROMPT';
        l_msg_name_prop_help   := 'PROPERTY.' || p_name || '.HELP';
        store_msg (
            p_name         => l_msg_name_prop_prompt,
            p_message_text => p_prompt );
        --
        if p_property_type = 'COLOR' then
            l_help_text := l_help_text ||
q'~
<p>The color is specified using hexadecimal (hex) notation, RGB color codes, or HTML color names. Hex notation is defined as #xxyyzz (a # followed by 3 double digit hex numbers), where xx, yy, and zz represent the two character hex values for red, green and blue respectively.
RGB codes are defined as RGB(xxx,xxx,xxx), where xxx is a number between 0 and 255 each representing the single 8-bit byte value for red, green, and blue respectively.</p>
<p>Search the internet for 'HTML Color Codes' to find the equivalent hex code or RGB code for the color you wish to utilize.</p>~';
        end if;
        store_msg (
            p_name         => l_msg_name_prop_help,
            p_message_text => l_help_text );
        --
        if p_unit is not null then
            l_msg_name_unit := 'PROPERTY.' || p_name || '.UNIT';
            store_msg (
                p_name         => l_msg_name_unit,
                p_message_text => p_unit );
        end if;
        --
        if p_property_type = 'COLOR' and l_examples is null then
            l_examples :=
'Examples of major HTML color codes include -
<ul>
  <li><strong><span style="background-color: lightgray; color: black;">&nbsp;&nbsp;Black&nbsp;&nbsp;</span></strong> <code>#000000 RGB(0,0,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: red;">&nbsp;&nbsp;Red&nbsp;&nbsp;</span></strong> <code>#FF0000 RGB(255,0,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: yellow;">&nbsp;&nbsp;Yellow&nbsp;&nbsp;</span></strong> <code>#FFFF00 RGB(255,255,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: lime;">&nbsp;&nbsp;Lime&nbsp;&nbsp;</span></strong> <code>#00FF00 RGB(0,255,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: green;">&nbsp;&nbsp;Green&nbsp;&nbsp;</span></strong> <code>#008000 RGB(0,128,0)</code></li>
  <li><strong><span style="background-color: lightgray; color: aqua;">&nbsp;&nbsp;Aqua&nbsp;&nbsp;</span></strong> <code>#00FFFF RGB(0,255,255)</code></li>
  <li><strong><span style="background-color: lightgray; color: blue;">&nbsp;&nbsp;Blue&nbsp;&nbsp;</span></strong> <code>#0000FF RGB(0,255,255)</code></li>
  <li><strong><span style="background-color: lightgray; color: navy;">&nbsp;&nbsp;Navy&nbsp;&nbsp;</span></strong> <code>#000080 RGB(0,0,128)</code></li>
  <li><strong><span style="background-color: lightgray; color: white;">&nbsp;&nbsp;White&nbsp;&nbsp;</span></strong> <code>#FFFFFF RGB(255,255,255)</code></li>
</ul>';
        end if;
        --
        if l_examples is not null then
            l_msg_name_examples := 'PROPERTY.' || p_name || '.EXAMPLES';
            store_msg (
                p_name         => l_msg_name_examples,
                p_message_text => l_examples );
        end if;
        -- Search doesn't make sense for a few property types
        if   ( p_lov_type is not null and p_lov_type not like '%FORMAT_MASK%' and p_lov_type <> 'DISTINCT' )
          or p_property_type in ( 'YES NO', 'SUBSCRIPTION', 'HIDDEN' )
        then
            l_is_searchable := 'N';
        end if;

        -- Numbers can have up to 22 digits
        if p_property_type = 'NUMBER' and l_max_length is null then
            l_max_length := 22;
        elsif p_property_type = 'COLOR' and ( l_display_length is null or l_max_length is null ) then
            l_display_length := nvl( l_display_length, 7 );
            l_max_length     := nvl( l_max_length, 255 );
        end if;

        -- Items are always in uppercase
        if p_property_type = 'ITEM' then
            l_text_case := 'UPPER';
        end if;

        insert into wwv_pe_properties (
            id,
            name,
            prompt,
            property_type,
            prop_type_yesno_override_y,
            prop_type_yesno_override_n,
            multi_value_delimiter,
            db_column,
            is_query_only,
            display_length,
            max_length,
            min_value,
            max_value,
            unit,
            validation_plsql_ret_error,
            text_case,
            restricted_characters,
            sql_min_column_count,
            sql_max_column_count,
            column_data_types,
            examples,
            supported_ui_types,
            display_group_id,
            lov_type,
            lov_component_type_id,
            lov_component_type_scope,
            is_translatable,
            is_searchable,
            deprecated_values,
            is_internal,
            help_text,
            comment_text )
        values (
            p_id,
            p_name,
            l_msg_name_prop_prompt,
            p_property_type,
            p_prop_type_yesno_override_y,
            p_prop_type_yesno_override_n,
            p_multi_value_delimiter,
            p_db_column,
            l_is_query_only,
            l_display_length,
            l_max_length,
            p_min_value,
            p_max_value,
            l_msg_name_unit,
            p_validation_plsql_ret_error,
            l_text_case,
            p_restricted_characters,
            p_sql_min_column_count,
            p_sql_max_column_count,
            p_column_data_types,
            l_msg_name_examples,
            p_supported_ui_types,
            l_display_group_id,
            p_lov_type,
            p_lov_component_type_id,
            p_lov_component_type_scope,
            l_is_translatable,
            l_is_searchable,
            p_deprecated_values,
            l_is_internal,
            l_msg_name_prop_help,
            p_comment_text )
        ;

    exception when others then
        raise_application_error( -20111, 'Property Name: ' || p_name || ' sqlerrm: ' || sqlerrm );
    end store_property;

    ------------------------------------------------------------------------
    -- Property LOV Values
    ------------------------------------------------------------------------
    procedure store_property_lov_values (
        p_property_id   in number,
        p_display_value in varchar2,
        p_return_value  in varchar2,
        p_icon          in varchar2 default null,
        p_is_quick_pick in varchar2 default 'N',
        p_is_internal   in varchar2 default 'N',
        p_is_deprecated in varchar2 default 'N',
        p_help_text     in varchar2 default null,
        p_comment_text  in varchar2 default null )
    is
        l_msg_name_prop_lov_val wwv_flow_messages$.name%type;
        l_msg_name_prop_help    wwv_flow_messages$.name%type;
    begin
        ------------------------------------------------------------------------
        -- Store system messages
        ------------------------------------------------------------------------
        l_msg_name_prop_lov_val := 'PROPERTY.' || get_property_name( p_property_id ) || '.LOV.' || upper( p_return_value ) || '.D';
        store_msg (
            p_name         => l_msg_name_prop_lov_val,
            p_message_text => p_display_value );
        --
        if p_help_text is not null then
            l_msg_name_prop_help := 'PROPERTY.' || get_property_name( p_property_id ) || '.LOV.' || upper( p_return_value ) || '.HELP';
            store_msg (
                p_name         => l_msg_name_prop_help,
                p_message_text => p_help_text );
        end if;

        insert into wwv_pe_property_lov_values (
            id,
            property_id,
            display_sequence,
            display_value,
            return_value,
            icon,
            is_quick_pick,
            is_internal,
            is_deprecated,
            help_text,
            comment_text )
        values (
            g_property_lov_value_id,
            p_property_id,
            g_property_lov_value_sequence,
            l_msg_name_prop_lov_val,
            p_return_value,
            p_icon,
            p_is_quick_pick,
            p_is_internal,
            p_is_deprecated,
            l_msg_name_prop_help,
            p_comment_text )
        ;
        --
        g_property_lov_value_id       := g_property_lov_value_id + 1;
        g_property_lov_value_sequence := g_property_lov_value_sequence + 10;

    end store_property_lov_values;

    ------------------------------------------------------------------------
    -- Component Properties
    ------------------------------------------------------------------------
    procedure store_component_prop (
        p_component_type_id             in number,
        p_property_name                 in varchar2,
        p_db_column                     in varchar2     default null,
        p_view_column                   in varchar2     default null,
        p_is_required                   in boolean,
        p_check_uniqueness              in varchar2     default null,
        p_is_common                     in boolean,
        p_is_read_only                  in boolean      default false,
        p_reference_on_delete           in varchar2     default null,
        p_reference_scope               in varchar2     default 'COMPONENT',
        p_supports_substitution         in boolean      default true,
        p_default_value                 in varchar2     default null,
        p_null_text                     in varchar2     default null,
        p_null_help_text                in varchar2     default null,
        p_plugin_std_attributes         in varchar2     default null,
        p_depending_on_comp_prop_name   in varchar2     default null,
        p_depending_on_has_to_exist     in boolean      default true,
        p_depending_on_condition_type   in varchar2     default null,
        p_depending_on_expression       in varchar2     default null,
        p_depending_on_comp_prop_name2  in varchar2     default null,
        p_depending_on_has_to_exist2    in boolean      default true,
        p_depending_on_condition_type2  in varchar2     default null,
        p_depending_on_expression2      in varchar2     default null,
        p_parent_comp_type_id           in number       default null,
        p_parent_comp_prop_name         in varchar2     default null,
        p_examples                      in varchar2     default null,
        p_help_text                     in varchar2     default null,
        p_comment_text                  in varchar2     default null )
    is
        l_property_id                wwv_pe_properties.id%type;
        l_property_type              wwv_pe_properties.property_type%type;
        l_depending_on_com_prop_id   wwv_pe_component_props.depending_on_comp_prop_id%type;
        l_depending_on_has_to_exist  varchar2( 1 );
        l_depending_on_com_prop_id2  wwv_pe_component_props.depending_on_comp_prop_id2%type;
        l_depending_on_has_to_exist2 varchar2( 1 );
        l_parent_comp_prop_id        wwv_pe_component_props.parent_comp_prop_id%type;
        l_msg_name_comp_prop_help    wwv_flow_messages$.name%type;
        l_msg_name_null_text         wwv_flow_messages$.name%type;
        l_msg_name_null_help_text    wwv_flow_messages$.name%type;
        l_msg_name_examples          wwv_flow_messages$.message_text%type;
        l_is_required                varchar2( 1 ) := case p_is_required
                                                        when true  then 'Y'
                                                        when false then 'N'
                                                        else null
                                                      end;
        l_is_common                  varchar2( 1 ) := case when p_is_common    then 'Y' else 'N' end;
        l_is_read_only               varchar2( 1 ) := case when p_is_read_only then 'Y' else 'N' end;
        l_supports_substitution      varchar2( 1 ) := case when p_supports_substitution then 'Y' else 'N' end;
        l_reference_on_delete        wwv_pe_component_props.reference_on_delete%type := p_reference_on_delete;
    begin
        ------------------------------------------------------------------------
        -- Get Property ID and type
        ------------------------------------------------------------------------
        l_property_id := get_property_id ( p_property_name );
        select property_type
          into l_property_type
          from wwv_pe_properties
         where id = l_property_id;
        ------------------------------------------------------------------------
        -- Store system messages (Only if help text is passed)
        ------------------------------------------------------------------------
        if p_null_text is not null then
            l_msg_name_null_text := 'PROPERTY.' || p_property_name || '.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.NULL_TEXT';
            store_msg (
                p_name         => l_msg_name_null_text,
                p_message_text => p_null_text );
        end if;

        if p_null_text is not null and p_null_help_text is not null then
            l_msg_name_null_help_text := 'PROPERTY.' || p_property_name || '.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.NULL_TEXT.HELP';
            store_msg (
                p_name         => l_msg_name_null_help_text,
                p_message_text => p_null_help_text );
        end if;

        if p_examples is not null then
            l_msg_name_examples := 'PROPERTY.'||p_property_name||'.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.EXAMPLES';
            store_msg (
                p_name         => l_msg_name_examples,
                p_message_text => p_examples );
        end if;

        if p_help_text is not null then
            l_msg_name_comp_prop_help := 'PROPERTY.'||p_property_name||'.COMPONENT_PROPERTY.'||get_component_type_name(p_component_type_id)|| '.HELP';
            store_msg (
                p_name         => l_msg_name_comp_prop_help,
                p_message_text => p_help_text );
        end if;

        if p_depending_on_comp_prop_name is not null then
            l_depending_on_com_prop_id  := get_component_prop_id (
                                               p_component_type_id => p_component_type_id,
                                               p_property_name     => p_depending_on_comp_prop_name );
            l_depending_on_has_to_exist := case when p_depending_on_has_to_exist then 'Y' else 'N' end;
        end if;

        if p_depending_on_comp_prop_name2 is not null then
            l_depending_on_com_prop_id2  := get_component_prop_id (
                                                p_component_type_id => p_component_type_id,
                                                p_property_name     => p_depending_on_comp_prop_name2 );
            l_depending_on_has_to_exist2 := case when p_depending_on_has_to_exist2 then 'Y' else 'N' end;
        end if;

        if p_parent_comp_prop_name is not null then
            l_parent_comp_prop_id := get_component_prop_id (
                                         p_component_type_id => nvl( p_parent_comp_type_id, p_component_type_id ),
                                         p_property_name     => p_parent_comp_prop_name );
        elsif l_property_type = 'REGION COLUMN' then
            l_parent_comp_prop_id := get_component_prop_id (
                                         p_component_type_id => c_comp_type_region,
                                         p_property_name     => 'REGION_SQL' );
        elsif l_property_type = 'COLUMN' then
            raise_application_error( -20999, 'Column property requires a parent property' );
        end if;

        if l_property_type not in ( 'COMBOBOX', 'CSS', 'JAVASCRIPT', 'HTML', 'LINK', 'LINK EXTENDED', 'TEXT', 'TEXT EDITOR' ) then
            l_supports_substitution := 'N';
        end if;

        if l_property_type = 'YES NO' then
            l_is_required := 'Y';
        end if;

        if l_property_type = 'ITEM' and l_reference_on_delete is null then
            l_reference_on_delete := 'WEAK_NULL';
        end if;

        insert into wwv_pe_component_props (
            id,
            component_type_id,
            property_id,
            db_column,
            view_column,
            display_sequence,
            is_required,
            check_uniqueness,
            is_common,
            is_read_only,
            reference_on_delete,
            reference_scope,
            supports_substitution,
            default_value,
            null_text,
            null_help_text,
            plugin_std_attributes,
            depending_on_comp_prop_id,
            depending_on_has_to_exist,
            depending_on_condition_type,
            depending_on_expression,
            depending_on_comp_prop_id2,
            depending_on_has_to_exist2,
            depending_on_condition_type2,
            depending_on_expression2,
            parent_comp_prop_id,
            examples,
            help_text,
            comment_text )
        values (
            g_component_property_id,
            p_component_type_id,
            l_property_id,
            p_db_column,
            p_view_column,
            g_component_property_sequence,
            l_is_required,
            p_check_uniqueness,
            l_is_common,
            l_is_read_only,
            l_reference_on_delete,
            p_reference_scope,
            l_supports_substitution,
            p_default_value,
            l_msg_name_null_text,
            l_msg_name_null_help_text,
            p_plugin_std_attributes,
            l_depending_on_com_prop_id,
            l_depending_on_has_to_exist,
            p_depending_on_condition_type,
            p_depending_on_expression,
            l_depending_on_com_prop_id2,
            l_depending_on_has_to_exist2,
            p_depending_on_condition_type2,
            p_depending_on_expression2,
            l_parent_comp_prop_id,
            l_msg_name_examples,
            l_msg_name_comp_prop_help,
            p_comment_text )
        ;
        --
        g_component_property_id       := g_component_property_id + 1;
        g_component_property_sequence := g_component_property_sequence + 10;
        --
    exception when others then
        raise_application_error( -20999, 'Type: ' || p_component_type_id || ', Name: ' || p_property_name || ', SQLERRM: ' || sqlerrm );
    end store_component_prop;
    --
    --
    procedure store_plugin_attr_seq_offset (
        p_component_type_id in number )
    is
    begin
        update wwv_pe_component_types
           set plugin_attributes_seq_offset = g_component_property_sequence
         where id = p_component_type_id;
        --
        g_component_property_sequence := g_component_property_sequence + 2500; -- 25 custom attributes
    end store_plugin_attr_seq_offset;
    --
    --
    procedure store_cond_type_properties (
        p_start_property_id  in number,
        p_name_prefix        in varchar2,
        p_prompt_type        in varchar2 default 'Type',
        p_help_text_type     in varchar2,
        p_db_column_type     in varchar2,
        p_db_column_expr1    in varchar2,
        p_db_column_expr2    in varchar2,
        p_display_group_name in varchar2 )
    is
        c_name_prefix constant varchar2( 30) := case when p_name_prefix is not null then p_name_prefix || '_' end;
        l_property_id number := p_start_property_id;
    begin
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_TYPE',
            p_prompt             => p_prompt_type,
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_db_column_type,
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => p_help_text_type );
        --
        if p_name_prefix = 'READ_ONLY' then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Always',
                p_return_value  => 'ALWAYS',
                p_is_deprecated => 'N',
                p_is_quick_pick => 'Y',
                p_help_text     => q'~The component will always be rendered as read only.~' );
        else
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Always',
                p_return_value  => 'ALWAYS',
                p_is_deprecated => 'Y',
                p_help_text     => q'~The component will always be rendered.~' );
        end if;
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Rows returned',
            p_return_value  => 'EXISTS',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~The SQL query returns one or more rows.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'No Rows returned',
            p_return_value  => 'NOT_EXISTS',
            p_help_text     => q'~The SQL Query returns no rows~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'SQL Expression',
            p_return_value  => 'SQL_EXPRESSION',
            p_help_text     => q'~The SQL expression evaluates to TRUE.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Expression',
            p_return_value  => 'PLSQL_EXPRESSION',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~The PL/SQL expression evaluates to TRUE.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Function Body',
            p_return_value  => 'FUNCTION_BODY',
            p_help_text     => q'~The PL/SQL function body returns TRUE.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Request = Value',
            p_return_value  => 'REQUEST_EQUALS_CONDITION',
            p_help_text     => q'~The page request is equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Request != Value',
            p_return_value  => 'REQUEST_NOT_EQUAL_CONDITION',
            p_help_text     => q'~The page request is not equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Request is contained in Value',
            p_return_value  => 'REQUEST_IN_CONDITION',
            p_help_text     => q'~The page request is contained in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Request is NOT contained in Value',
            p_return_value  => 'REQUEST_NOT_IN_CONDITION',
            p_help_text     => q'~The page request is not contained in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item = Value',
            p_return_value  => 'VAL_OF_ITEM_IN_COND_EQ_COND2',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~The value of the selected <em>Item</em> is equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item != Value',
            p_return_value  => 'VAL_OF_ITEM_IN_COND_NOT_EQ_COND2',
            p_help_text     => q'~The value of the selected <em>Item</em> is not equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is NULL',
            p_return_value  => 'ITEM_IS_NULL',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~The value of the selected <em>Item</em> is empty.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is NOT NULL',
            p_return_value  => 'ITEM_IS_NOT_NULL',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~The value of the selected <em>Item</em> is not empty.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is zero',
            p_return_value  => 'ITEM_IS_ZERO',
            p_help_text     => q'~The value of the selected <em>Item</em> is the number zero.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is NOT zero',
            p_return_value  => 'ITEM_IS_NOT_ZERO',
            p_help_text     => q'~The value of the selected <em>Item</em> is not the number zero.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is NULL or zero',
            p_return_value  => 'ITEM_IS_NULL_OR_ZERO',
            p_help_text     => q'~The value of the selected <em>Item</em> is empty or the number zero.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is NOT NULL and NOT zero',
            p_return_value  => 'ITEM_NOT_NULL_OR_ZERO',
            p_help_text     => q'~The value of the selected <em>Item</em> is not empty and not the number zero.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item contains no spaces',
            p_return_value  => 'ITEM_CONTAINS_NO_SPACES',
            p_help_text     => q'~The value of the selected <em>Item</em> has no spaces.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is numeric',
            p_return_value  => 'ITEM_IS_NUMERIC',
            p_help_text     => q'~The value of the selected <em>Item</em> is numeric.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is NOT numeric',
            p_return_value  => 'ITEM_IS_NOT_NUMERIC',
            p_help_text     => q'~The value of the selected <em>Item</em> is not numeric.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is alphanumeric',
            p_return_value  => 'ITEM_IS_ALPHANUMERIC',
            p_help_text     => q'~The value of the selected <em>Item</em> is alphanumeric, containing only letters or numbers and no special characters.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is in colon delimited list',
            p_return_value  => 'VALUE_OF_ITEM_IN_CONDITION_IN_COLON_DELIMITED_LIST',
            p_help_text     => q'~The value of the selected <em>Item</em> is completely contained in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Item is NOT in colon delimited list',
            p_return_value  => 'VALUE_OF_ITEM_IN_CONDITION_NOT_IN_COLON_DELIMITED_LIST',
            p_help_text     => q'~The value of the selected <em>Item</em> is not completely contained in the text you entered into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Text is contained in Item',
            p_return_value  => 'CONDITION1_IN_VALUE_OF_ITEM_IN_CONDITION2',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Text = Value',
            p_return_value  => 'DISPLAY_COND_EQUAL_COND_TEXT',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Text != Value',
            p_return_value  => 'DISP_COND_NOT_EQUAL_COND_TEXT',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Text is contained in Value',
            p_return_value  => 'DISPLAY_COND_IN_COND_TEXT',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Text is NOT contained in Value',
            p_return_value  => 'DISPLAY_COND_NOT_IN_COND_TEXT',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'User Preference = Value',
            p_return_value  => 'USER_PREF_IN_COND_EQ_COND2',
            p_help_text     => q'~The value of the <em>Preference</em> entered is equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'User Preference != Value',
            p_return_value  => 'USER_PREF_IN_COND_NOT_EQ_COND2',
            p_help_text     => q'~The value of the <em>Preference</em> entered is not equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Page = Page',
            p_return_value  => 'CURRENT_PAGE_EQUALS_CONDITION',
            p_help_text     => q'~The current page is equal to the value you enter into <em>Page</em>.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Page != Page',
            p_return_value  => 'CURRENT_PAGE_NOT_EQUAL_CONDITION',
            p_help_text     => q'~The current page is not equal to the value you enter into <em>Page</em>.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Page is in comma delimited list',
            p_return_value  => 'CURRENT_PAGE_IN_CONDITION',
            p_help_text     => q'~The current page is in the comma separated list you enter into <em>Pages</em>.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Page is NOT in comma delimited list',
            p_return_value  => 'CURRENT_PAGE_NOT_IN_CONDITION',
            p_help_text     => q'~The current page is not in the comma separated list you enter into <em>Pages</em>.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Page = Page Submitted (posted)',
            p_return_value  => 'WHEN_THIS_PAGE_SUBMITTED',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Page != Page Submitted (posted)',
            p_return_value  => 'WHEN_THIS_PAGE_NOT_SUBMITTED',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Page is in Printer Friendly Mode',
            p_return_value  => 'PAGE_IS_IN_PRINTER_FRIENDLY_MODE',
            p_help_text     => q'~The current page has been toggled to 'Printer Friendly Mode' by the end user.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current page is NOT in Printer Friendly Mode',
            p_return_value  => 'PAGE_IS_NOT_IN_PRINTER_FRIENDLY_MODE',
            p_help_text     => q'~The current page has not been toggled to 'Printer Friendly Mode' by the end user.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Page/Region is Read Only',
            p_return_value  => 'IS_READ_ONLY',
            p_help_text     => q'~Either the page or parent region, if appropriate, 'Read Only' condition evaluates to TRUE.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Page/Region is NOT Read Only',
            p_return_value  => 'IS_NOT_READ_ONLY',
            p_help_text     => q'~The page and parent region, if appropriate, are displayed normally.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'User is Authenticated  (not public)',
            p_return_value  => 'USER_IS_NOT_PUBLIC_USER',
            p_help_text     => q'~The end user is logged into the application.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'User is the Public User (user has not authenticated)',
            p_return_value  => 'USER_IS_PUBLIC_USER',
            p_help_text     => q'~The end user is not logged into the application.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Inline Validation Errors displayed',
            p_return_value  => 'DISPLAYING_INLINE_VALIDATION_ERRORS',
            p_help_text     => q'~An inline validation error is displayed on the page, following a page submission.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Inline Validation Errors NOT displayed',
            p_return_value  => 'NOT_DISPLAYING_INLINE_VALIDATION_ERRORS',
            p_help_text     => q'~An inline validation error is not displayed on the page.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'SQL Reports (OK to show the forward button)',
            p_return_value  => 'MAX_ROWS_LT_ROWS_FETCHED',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'SQL Reports (OK to show the back button)',
            p_return_value  => 'MIN_ROW_GT_THAN_ONE',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Language = Value',
            p_return_value  => 'CURRENT_LANG_EQ_COND1',
            p_help_text     => q'~The end user is currently running the application in the language you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Language != Value',
            p_return_value  => 'CURRENT_LANG_NOT_EQ_COND1',
            p_help_text     => q'~The end user is not currently running the application in the language you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Language is contained in Value',
            p_return_value  => 'CURRENT_LANG_IN_COND1',
            p_help_text     => q'~The end user is currently running the application in one of the languages you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Current Language is NOT contained in Value',
            p_return_value  => 'CURRENT_LANG_NOT_IN_COND1',
            p_help_text     => q'~The end user is not currently running the application in one of the languages you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Client Browser is Mozilla, Netscape 6.x/7x or higher',
            p_return_value  => 'BROWSER_IS_NSCP',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Client Browser is Microsoft Internet Explorer 7.0 or higher',
            p_return_value  => 'BROWSER_IS_MSIE',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Client Browser is XHTML / CSS capable browser',
            p_return_value  => 'BROWSER_IS_MSIE_OR_NSCP',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Client Browser is Other browsers (or older version)',
            p_return_value  => 'BROWSER_IS_OTHER',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'CGI_ENV: DAD_NAME = Value',
            p_return_value  => 'DAD_NAME_EQ_CONDITION',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'CGI_ENV: DAD_NAME != Value',
            p_return_value  => 'DAD_NAME_NOT_EQ_CONDITION',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'CGI_ENV: SERVER_NAME = Value',
            p_return_value  => 'SERVER_NAME_EQ_CONDITION',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'CGI_ENV: SERVER_NAME != Value',
            p_return_value  => 'SERVER_NAME_NOT_EQ_CONDITION',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'CGI_ENV: HTTP_HOST = Value',
            p_return_value  => 'HTTP_HOST_EQ_CONDITION',
            p_is_deprecated => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'CGI_ENV: HTTP_HOST != Value',
            p_return_value  => 'HTTP_HOST_NOT_EQ_CONDITION',
            p_is_deprecated => 'Y' );
        --
        if nvl( p_name_prefix, 'CONDITION' ) in ( 'CONDITION', 'LINK', 'READ_ONLY' ) then
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Never',
                p_return_value  => 'NEVER',
                p_is_quick_pick => case when nvl( p_name_prefix, 'CONDITION' ) in ( 'CONDITION', 'READ_ONLY' ) then 'Y' else 'N' end,
                p_help_text     => case
                                     when p_name_prefix = 'READ_ONLY' then
                                         q'~The component is rendered normally, irrespective of the read only condition for parent component(s).~'
                                     else
                                         q'~<p>The component is never rendered.</p>
<p>Note: Changing a condition to <strong>Never</strong> will remove any existing condition. For temporarily disabling a component, Oracle recommends using the <em>Build Option</em> attribute instead.</p>~'
                                   end );
        else
            -- Remove Never for caching, ...
            store_property_lov_values (
                p_property_id   => l_property_id,
                p_display_value => 'Never',
                p_return_value  => 'NEVER',
                p_is_quick_pick => 'N',
                p_is_deprecated => 'Y',
                p_help_text     => q'~~' );
        end if;
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => c_name_prefix || 'CONDITION_SQL_STATEMENT',
            p_prompt               => 'SQL Query',
            p_property_type        => 'SQL',
            p_db_column            => p_db_column_expr1,
            p_display_length       => 80,
            p_max_length           => 4000,
            p_display_group_name   => p_display_group_name,
            p_sql_min_column_count => 1,
            p_help_text            => q'~Enter a SQL query for this condition.~',
            p_examples             => q'~
<dl><dt>To return successfully as one or more rows exist when checking if the employee is in department 30:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno = 30
</pre></dd>
<dt>To return successfully as no rows exist when checking if the employee is in department 40:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno = 40
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_SQL_EXPRESSION',
            p_prompt             => 'SQL Expression',
            p_property_type      => 'SQL EXPRESSION BOOLEAN',
            p_db_column          => p_db_column_expr1,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a SQL Expression for this condition.<br>
                                       Use SQL Expression to enter complex "where" conditions.~',
            p_examples           => q'~
<dl><dt>To return successfully when the employee is a manager and their department is located in Chicago:</dt>
<dd><pre>
:P2_JOB = 'MANAGER' and
exists ( select 1
           from dept
          where deptno = :P2_DEPTNO
            and loc    = 'CHICAGO' )
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_PLSQL_EXPRESSION',
            p_prompt             => 'PL/SQL Expression',
            p_property_type      => 'PLSQL EXPRESSION BOOLEAN',
            p_db_column          => p_db_column_expr1,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a PL/SQL Expression for this condition.~',
            p_examples           => q'~
<dl><dt>To return successfully when the employee is in department 30 or is a manager:</dt>
<dd><pre>
( :P2_DEPTNO = 30 or :P2_JOB = 'MANAGER' )
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_PLSQL_FUNCTION_BODY',
            p_prompt             => 'PL/SQL Function Body',
            p_property_type      => 'PLSQL FUNCTION BODY BOOLEAN',
            p_db_column          => p_db_column_expr1,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a PL/SQL Function Body that returns a boolean value for this condition.~',
            p_examples           => q'~
<dl><dt>To return successfully when the employee is in department 30:</dt>
<dd><pre>
begin
    if :P2_DEPTNO = 30 then
        return true;
    else
        return false;
    end if;
end;
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_VALUE1',
            p_prompt             => 'Value',
            p_property_type      => 'TEXT',
            p_db_column          => p_db_column_expr1,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter the value to compare against the condition.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_ITEM1',
            p_prompt             => 'Item',
            p_property_type      => 'ITEM',
            p_db_column          => p_db_column_expr1,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter the page or application item used in this condition. You can type in the name or pick from the list of available items.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_LIST',
            p_prompt             => 'List',
            p_property_type      => 'TEXT',
            p_db_column          => p_db_column_expr2,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a colon(:) separated list of values for this condition.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_PREFERENCE',
            p_prompt             => 'Preference',
            p_property_type      => 'TEXT',
            p_db_column          => p_db_column_expr1,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_text_case          => 'UPPER',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a User Preference that is compared against the specified value for this condition.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_PAGE',
            p_prompt             => 'Page',
            p_property_type      => 'PAGE',
            p_db_column          => p_db_column_expr1,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter the Page Number for this condition.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                    => l_property_id,
            p_name                  => c_name_prefix || 'CONDITION_PAGES',
            p_prompt                => 'Pages',
            p_property_type         => 'PAGE',
            p_multi_value_delimiter => ',',
            p_db_column             => p_db_column_expr1,
            p_display_length        => 80,
            p_max_length            => 4000,
            p_display_group_name    => p_display_group_name,
            p_help_text             => q'~Enter a comma separated list of Page Numbers for this condition.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_TEXT',
            p_prompt             => 'Text',
            p_property_type      => 'TEXT',
            p_db_column          => p_db_column_expr1,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter the text value for this condition.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_VALUE2',
            p_prompt             => 'Value',
            p_property_type      => 'TEXT',
            p_db_column          => p_db_column_expr2,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter the value, including <code>&ITEM.</code> substitution strings, for this condition.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_ITEM2',
            p_prompt             => 'Item',
            p_property_type      => 'ITEM',
            p_db_column          => p_db_column_expr2,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter the page or application item used in this condition. You can type in the name or pick from the list of available items.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'CONDITION_TEXT2',
            p_prompt             => 'Value',
            p_property_type      => 'TEXT',
            p_db_column          => p_db_column_expr2,
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter the value, including <code>&ITEM.</code> substitution strings, for this condition.~' );
    end store_cond_type_properties;
    --
    --
    procedure store_condition_type_comp_prop (
        p_component_type_id           in number,
        p_name_prefix                 in varchar2,
        p_help_text_type              in varchar2,
        p_db_column_type              in varchar2,
        p_view_column_type            in varchar2 default null,
        p_db_column_expr1             in varchar2,
        p_db_column_expr2             in varchar2,
        p_reference_scope             in varchar2 default 'COMPONENT',
        p_is_common                   in boolean  default true,
        p_plugin_std_attributes       in varchar2 default null,
        p_parent_comp_prop_name       in varchar2 default null,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null )
    is
        c_name_prefix constant varchar2( 30 ) := case when p_name_prefix is not null then p_name_prefix || '_' end;
    begin
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_TYPE',
            p_db_column                   => p_db_column_type,
            p_view_column                 => p_view_column_type,
            p_is_required                 => false,
            p_is_common                   => p_is_common,
            p_reference_scope             => p_reference_scope,
            p_plugin_std_attributes       => p_plugin_std_attributes,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression,
            p_help_text                   => p_help_text_type );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_SQL_STATEMENT',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'EXISTS,NOT_EXISTS' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_SQL_EXPRESSION',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_EXPRESSION' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_PLSQL_EXPRESSION',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLSQL_EXPRESSION' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_PLSQL_FUNCTION_BODY',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'FUNCTION_BODY' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_VALUE1',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'REQUEST_EQUALS_CONDITION,REQUEST_NOT_EQUAL_CONDITION,REQUEST_IN_CONDITION,REQUEST_NOT_IN_CONDITION,CURRENT_LANG_IN_COND1,CURRENT_LANG_NOT_IN_COND1,CURRENT_LANG_NOT_EQ_COND1,CURRENT_LANG_EQ_COND1,DAD_NAME_EQ_CONDITION,DAD_NAME_NOT_EQ_CONDITION,SERVER_NAME_EQ_CONDITION,SERVER_NAME_NOT_EQ_CONDITION,HTTP_HOST_EQ_CONDITION,HTTP_HOST_NOT_EQ_CONDITION' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_ITEM1',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'VAL_OF_ITEM_IN_COND_EQ_COND2,VAL_OF_ITEM_IN_COND_NOT_EQ_COND2,VALUE_OF_ITEM_IN_COND_1_EQ_COND_2,VALUE_OF_ITEM_IN_COND_1_NOT_EQ_COND_2,ITEM_IS_NULL,ITEM_IS_NOT_NULL,ITEM_IS_ZERO,ITEM_IS_NOT_ZERO,ITEM_IS_NULL_OR_ZERO,ITEM_NOT_NULL_OR_ZERO,ITEM_CONTAINS_NO_SPACES,ITEM_IS_NUMERIC,ITEM_IS_NOT_NUMERIC,ITEM_IS_ALPHANUMERIC,VALUE_OF_ITEM_IN_CONDITION_IN_COLON_DELIMITED_LIST,VALUE_OF_ITEM_IN_CONDITION_NOT_IN_COLON_DELIMITED_LIST' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_PREFERENCE',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'USER_PREF_IN_COND_EQ_COND2,USER_PREF_IN_COND_NOT_EQ_COND2' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_PAGE',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'CURRENT_PAGE_EQUALS_CONDITION,CURRENT_PAGE_NOT_EQUAL_CONDITION' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_PAGES',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'CURRENT_PAGE_IN_CONDITION,CURRENT_PAGE_NOT_IN_CONDITION' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_TEXT',
            p_db_column                   => p_db_column_expr1,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'CONDITION1_IN_VALUE_OF_ITEM_IN_CONDITION2,DISPLAY_COND_IN_COND_TEXT,DISPLAY_COND_NOT_IN_COND_TEXT,DISPLAY_COND_EQUAL_COND_TEXT,DISP_COND_NOT_EQUAL_COND_TEXT' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_VALUE2',
            p_db_column                   => p_db_column_expr2,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'VAL_OF_ITEM_IN_COND_EQ_COND2,VAL_OF_ITEM_IN_COND_NOT_EQ_COND2,VALUE_OF_ITEM_IN_COND_1_EQ_COND_2,VALUE_OF_ITEM_IN_COND_1_NOT_EQ_COND_2,USER_PREF_IN_COND_EQ_COND2,USER_PREF_IN_COND_NOT_EQ_COND2' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_LIST',
            p_db_column                   => p_db_column_expr2,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'VALUE_OF_ITEM_IN_CONDITION_IN_COLON_DELIMITED_LIST,VALUE_OF_ITEM_IN_CONDITION_NOT_IN_COLON_DELIMITED_LIST' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_ITEM2',
            p_db_column                   => p_db_column_expr2,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_parent_comp_prop_name       => p_parent_comp_prop_name,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'CONDITION1_IN_VALUE_OF_ITEM_IN_CONDITION2' );
        --
        store_component_prop (
            p_component_type_id           => p_component_type_id,
            p_property_name               => c_name_prefix || 'CONDITION_TEXT2',
            p_db_column                   => p_db_column_expr2,
            p_is_required                 => true,
            p_is_common                   => false,
            p_reference_scope             => p_reference_scope,
            p_depending_on_comp_prop_name => c_name_prefix || 'CONDITION_TYPE',
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'DISPLAY_COND_IN_COND_TEXT,DISPLAY_COND_NOT_IN_COND_TEXT,DISPLAY_COND_EQUAL_COND_TEXT,DISP_COND_NOT_EQUAL_COND_TEXT' );
        --
    end store_condition_type_comp_prop;
    --
    --
    procedure store_val_type_properties (
        p_start_property_id in number,
        p_name_prefix       in varchar2 )
    is
        c_name_prefix constant   varchar2( 30 )          := case when p_name_prefix is not null then p_name_prefix || '_' end;
        c_item_or_column_lower   constant varchar2( 10 ) := case when p_name_prefix is null then 'item' else 'column' end;
        c_item_or_column_initcap constant varchar2( 10 ) := initcap( c_item_or_column_lower );
        l_property_id number := p_start_property_id;
    begin
        --
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VALIDATION_TYPE',
            p_prompt             => 'Type',
            p_property_type      => 'SELECT LIST',
            p_db_column          => 'VALIDATION_TYPE',
            p_display_group_name => 'VALIDATION',
            p_lov_type           => 'STATIC',
            p_help_text          => q'~<p>Select the type of equality to be tested for this validation. Depending on your selection, one or more additional attributes are required to fully define this validation.</p>
<p>If the validation passes the equality test, or evaluates to TRUE, then the validation error message does not display.
Validation error messages display when the validation fails the equality test, or evaluates to FALSE, or a non-empty text string is returned.</p>
<p>A validation failure does not stop subsequent validations from being evaluated, therefore, each subsequent validation may raise an additional validation error message. If you want to stop subsequent validations from executing then you need to add additional logic into the first failed validation, such as setting a page item to a specific value, and then enhancing the conditional logic on subsequent validations as needed. Subsequent processes and branches are not executed if one or more validations fail evaluation.</p>~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Rows returned',
            p_return_value  => 'EXISTS',
            p_help_text     => q'~Passes if the SQL query returns one or more rows.<br>
Fails if the SQL query returns no rows.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'No Rows returned',
            p_return_value  => 'NOT_EXISTS',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Passes if the SQL query returns no rows.<br>
Fails if the SQL query returns one or more rows.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'SQL Expression',
            p_return_value  => 'SQL_EXPRESSION',
            p_help_text     => q'~Passes if the SQL expression evaluates to TRUE.<br>
Fails if the SQL expression evaluates to FALSE.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Expression',
            p_return_value  => 'PLSQL_EXPRESSION',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Passes if the PL/SQL expression evaluates to TRUE.<br>
Fails if the PL/SQL expression evaluates to FALSE.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Error',
            p_return_value  => 'PLSQL_ERROR',
            p_help_text     => q'~Passes if the PL/SQL expression executes without generating an error.<br>
Fails if the PL/SQL expression generates an error when it executes.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Function Body (returning Boolean)',
            p_return_value  => 'FUNC_BODY_RETURNING_BOOLEAN',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Passes if the PL/SQL Function body returns TRUE.<br>
Fails if the PL/SQL Function body returns FALSE.<br>
Note: The result returned from the function must be a boolean.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Function (returning Error Text)',
            p_return_value  => 'FUNC_BODY_RETURNING_ERR_TEXT',
            p_help_text     => q'~Passes if the PL/SQL Function body returns an empty string.<br>
Fails if the PL/SQL Function body returns a non-empty string. The returned string displays as the error message for the validation.<br>
Note: The result returned from the function must be a text string.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is NOT NULL',
            p_return_value  => 'ITEM_NOT_NULL',
            p_is_quick_pick => 'Y',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not empty.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is empty.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is NOT NULL or zero',
            p_return_value  => 'ITEM_NOT_NULL_OR_ZERO',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not empty and is not the number zero.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is empty or is the number zero.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is NOT zero',
            p_return_value  => 'ITEM_NOT_ZERO',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not the number zero.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is the number zero.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' contains no spaces',
            p_return_value  => 'ITEM_CONTAINS_NO_SPACES',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value has no spaces.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value contains spaces.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is alphanumeric',
            p_return_value  => 'ITEM_IS_ALPHANUMERIC',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is alphanumeric, containing only letters and numbers and no special characters.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value includes special characters.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is numeric',
            p_return_value  => 'ITEM_IS_NUMERIC',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is numeric.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value contains non-numeric characters, including spaces, other than leading spaces.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is a valid date',
            p_return_value  => 'ITEM_IS_DATE',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is a valid date.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is not a valid date.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is a valid timestamp',
            p_return_value  => 'ITEM_IS_TIMESTAMP',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is a valid timestamp.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is not a valid timestamp.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' = Value',
            p_return_value  => 'ITEM_IN_VALIDATION_EQ_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is equal to the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is not equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' != Value',
            p_return_value  => 'ITEM_IN_VALIDATION_NOT_EQ_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not equal to the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is equal to the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is contained in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is completely contained in the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is not completely contained in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' is NOT contained in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_NOT_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value is not completely contained in the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value is completely contained in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' contains only characters specified in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_CONTAINS_ONLY_CHAR_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value contains only characters found in the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value contains any characters that are not in the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' contains at least one of the characters in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_CONTAINS_AT_LEAST_ONE_CHAR_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value includes at least one character from the the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value does not include any characters from the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' does NOT contain any of the characters in Value',
            p_return_value  => 'ITEM_IN_VALIDATION_CONTAINS_NO_CHAR_IN_STRING2',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value does not include any characters from the text you enter into the <em>Value</em> attribute.<br>
Fails if the ~' || c_item_or_column_initcap || q'~ value includes at least one character from the text you enter into the <em>Value</em> attribute.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => c_item_or_column_initcap || ' matches Regular Expression',
            p_return_value  => 'REGULAR_EXPRESSION',
            p_help_text     => q'~Passes if the ~' || c_item_or_column_initcap || q'~ value matches the regular expression you enter into the <em>Value</em> attribute.
Fails if the ~' || c_item_or_column_initcap || q'~ value does not match the regular expression you enter into the <em>Value</em> attribute.<br>
Note: Regular expressions enable you to search for patterns in string data by using standardized syntax conventions, rather than just a straight character comparisons.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                   => l_property_id,
            p_name                 => c_name_prefix || 'VAL_SQL_STATEMENT',
            p_prompt               => 'SQL Query',
            p_property_type        => 'SQL',
            p_db_column            => 'VALIDATION',
            p_display_length       => 80,
            p_max_length           => 4000,
            p_display_group_name   => 'VALIDATION',
            p_sql_min_column_count => 1,
            p_help_text            => q'~Enter a SQL query to define this validation.~',
            p_examples             => q'~
<dl><dt>For <strong>Rows Returned</strong>, to pass the validation, and not raise an error message, when the employee is in department 30:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno = 30
</pre></dd>
<dt>For <strong>No Rows Returned</strong, to pass the validation, and not raise an error message, when the employee is in department 40:</dt>
<dd><pre>
select 1
  from emp
 where empno  = :P2_EMPNO
   and deptno <> 40
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_SQL_EXPRESSION',
            p_prompt             => 'SQL Expression',
            p_property_type      => 'SQL EXPRESSION BOOLEAN',
            p_db_column          => 'VALIDATION',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter a SQL expression to define this validation.<br>
                                       Use SQL Expression to enter complex "where" conditions~',
            p_examples           => q'~
<dl><dt>To pass the validation, and not raise an error message, when the employee is a manager or the department is located in Chicago:</dt>
<dd><pre>
:P2_JOB = 'MANAGER' or
exists ( select 1
           from dept
          where deptno = :P2_DEPTNO
            and loc    = 'CHICAGO' )
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_PLSQL_EXPRESSION',
            p_prompt             => 'PL/SQL Expression',
            p_property_type      => 'PLSQL EXPRESSION BOOLEAN',
            p_db_column          => 'VALIDATION',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter a PL/SQL expression to define the validation.~',
            p_examples           => q'~
<dl><dt>To pass the validation, and not raise an error message, when the employee is in department 30 or is a manager:</dt>
<dd><pre>
( :P2_DEPTNO = 30 or :P2_JOB = 'MANAGER' )
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_PLSQL_FUNCTION_BODY_BOOLEAN',
            p_prompt             => 'PL/SQL Function Body Returning Boolean',
            p_property_type      => 'PLSQL FUNCTION BODY BOOLEAN',
            p_db_column          => 'VALIDATION',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter a PL/SQL function body that returns a BOOLEAN value as the basis for this validation.~',
            p_examples           => q'~
<dl><dt>To pass the validation, and not raise an error message, when the employee is in department 30:</dt>
<dd><pre>
begin
    if :P2_DEPTNO = 30 then
        return true;
    else
        return false;
    end if;
end;
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_PLSQL_FUNCTION_BODY_VARCHAR2',
            p_prompt             => 'PL/SQL Function Body Returning Error Text',
            p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
            p_db_column          => 'VALIDATION',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter a PL/SQL function body that returns the error message text as the basis for this validation.~',
            p_examples           => q'~
<dl><dt>To pass the validation, and not raise the sepcified error message, when the employee is in department 30:</dt>
<dd><pre>
begin
    if :P2_DEPTNO <> 30 then
        return 'Employee is in Department ' || :P2_DEPTNO || ' and not Department 30';
    end if;
    return null;
end;
</pre></dd>
</dl>~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_PLSQL',
            p_prompt             => 'PL/SQL Code raising Error',
            p_property_type      => 'PLSQL',
            p_db_column          => 'VALIDATION',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter a PL/SQL expression that raises an error as the basis for this validation.~',
            p_examples           => q'~
<dl><dt>To pass the validation, and not raise the sepcified error, when the employee is in department 30:</dt>
<dd><pre>
begin
    if :P2_DEPTNO <> 30 then
        raise_application_error( -20000, 'Employee is in Department ' || :P2_DEPTNO || ' and not Department 30' );
    end if;
end;
</pre></dd>
</dl>~' );
        --
        if p_name_prefix is null then
            l_property_id := l_property_id + 1;
            store_property (
                p_id                       => l_property_id,
                p_name                     => 'VAL_ITEM',
                p_prompt                   => 'Item',
                p_property_type            => 'ITEM',
                p_db_column                => 'VALIDATION',
                p_display_length           => 80,
                p_max_length               => 255,
                p_display_group_name       => 'VALIDATION',
                p_lov_component_type_scope => 'APPLICATION',
                p_help_text                => q'~Enter a page or application item used in this validation. You can type in the name or pick from the list of available items.~' );
        end if;
        --
        if p_name_prefix = 'REGION' then
            l_property_id := l_property_id + 1;
            store_property (
                p_id                 => l_property_id,
                p_name               => c_name_prefix || 'VAL_COLUMN',
                p_prompt             => 'Column',
                p_property_type      => 'REGION COLUMN',
                p_db_column          => 'VALIDATION',
                p_display_length     => 80,
                p_max_length         => 128,
                p_display_group_name => 'VALIDATION',
                p_help_text          => q'~Enter a case-sensitive column name for this validation. You can type in the name or pick from the list of available columns.~' );
        end if;
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_VALUE',
            p_prompt             => 'Value',
            p_property_type      => 'TEXT EDITOR',
            p_db_column          => 'VALIDATION2',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter the value used to compare against the value of the ~' || c_item_or_column_lower || q'~ column specified for this validation.~' );
        --
        l_property_id := l_property_id + 1;
        store_property (
            p_id                 => l_property_id,
            p_name               => c_name_prefix || 'VAL_REGULAR_EXPRESSION',
            p_prompt             => 'Regular Expression',
            p_property_type      => 'TEXT',
            p_db_column          => 'VALIDATION2',
            p_display_length     => 80,
            p_max_length         => 4000,
            p_display_group_name => 'VALIDATION',
            p_help_text          => q'~Enter the regular expression used to match the ~' || c_item_or_column_lower || q'~ specified for this validation.~' );
        --
    end store_val_type_properties;
    --
    --
    procedure store_val_type_comp_props (
        p_name_prefix in varchar2 )
    is
        c_name_prefix     constant varchar2( 30 ) := case when p_name_prefix is not null then p_name_prefix || '_' end;
        c_type_property   constant varchar2( 30 ) := c_name_prefix || 'VALIDATION_TYPE';
        c_reference_scope constant varchar2( 30 ) := case when p_name_prefix is not null then 'ROW' else 'COMPONENT' end;
    begin
    --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_type_property,
            p_db_column                   => null,
            p_view_column                 => 'VALIDATION_TYPE',
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'PLSQL_EXPRESSION',
            p_depending_on_comp_prop_name => 'VALIDATION_REGION',
            p_depending_on_condition_type => case when p_name_prefix is not null then 'NOT_NULL' else 'NULL' end );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'VAL_SQL_STATEMENT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => c_reference_scope,
            p_depending_on_comp_prop_name => c_type_property,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'EXISTS,NOT_EXISTS' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'VAL_PLSQL_FUNCTION_BODY_BOOLEAN',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => c_reference_scope,
            p_depending_on_comp_prop_name => c_type_property,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'FUNC_BODY_RETURNING_BOOLEAN' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'VAL_PLSQL_FUNCTION_BODY_VARCHAR2',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => c_reference_scope,
            p_depending_on_comp_prop_name => c_type_property,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'FUNC_BODY_RETURNING_ERR_TEXT' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'VAL_PLSQL_EXPRESSION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => c_reference_scope,
            p_depending_on_comp_prop_name => c_type_property,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLSQL_EXPRESSION' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'VAL_SQL_EXPRESSION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => c_reference_scope,
            p_depending_on_comp_prop_name => c_type_property,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_EXPRESSION' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'VAL_PLSQL',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_reference_scope             => c_reference_scope,
            p_depending_on_comp_prop_name => c_type_property,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLSQL_ERROR' );
        --
        if p_name_prefix is null then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => c_name_prefix || 'VAL_ITEM',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => true,
                p_reference_on_delete          => 'WEAK_CASCADE',
                p_depending_on_comp_prop_name  => c_type_property,
                p_depending_on_condition_type  => 'IN_LIST_LIKE',
                p_depending_on_expression      => 'ITEM,REGULAR_EXPRESSION' );
        end if;
        --
        if p_name_prefix = 'REGION' then
            store_component_prop (
                p_component_type_id            => l_component_type_id,
                p_property_name                => c_name_prefix || 'VAL_COLUMN',
                p_db_column                    => null,
                p_is_required                  => true,
                p_is_common                    => true,
                p_parent_comp_prop_name        => 'VALIDATION_REGION',
                p_depending_on_comp_prop_name  => c_type_property,
                p_depending_on_condition_type  => 'IN_LIST_LIKE',
                p_depending_on_expression      => 'ITEM,REGULAR_EXPRESSION' );
        end if;
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => c_name_prefix || 'VAL_REGULAR_EXPRESSION',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => 'DEPENDS',
            p_depending_on_comp_prop_name  => c_type_property,
            p_depending_on_condition_type  => 'EQUALS',
            p_depending_on_expression      => 'REGULAR_EXPRESSION' );
        --
        store_component_prop (
            p_component_type_id            => l_component_type_id,
            p_property_name                => c_name_prefix || 'VAL_VALUE',
            p_db_column                    => null,
            p_is_required                  => true,
            p_is_common                    => true,
            p_reference_scope              => c_reference_scope,
            p_depending_on_comp_prop_name  => c_type_property,
            p_depending_on_condition_type  => 'IN_LIST',
            p_depending_on_expression      => 'ITEM_IN_VALIDATION_EQ_STRING2,ITEM_IN_VALIDATION_NOT_EQ_STRING2,ITEM_IN_VALIDATION_IN_STRING2,ITEM_IN_VALIDATION_NOT_IN_STRING2,ITEM_IN_VALIDATION_CONTAINS_AT_LEAST_ONE_CHAR_IN_STRING2,ITEM_IN_VALIDATION_CONTAINS_ONLY_CHAR_IN_STRING2,ITEM_IN_VALIDATION_CONTAINS_NO_CHAR_IN_STRING2' );
        --
    end store_val_type_comp_props;
    --
    --
    procedure store_audit_info_comp_prop (
        p_component_type_id in number,
        p_db_column_prefix  in varchar2 default 'LAST_' )
    is
    begin
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'CHANGED_BY',
            p_db_column             => p_db_column_prefix || 'UPDATED_BY',
            p_is_required           => false,
            p_is_common             => false,
            p_is_read_only          => true,
            p_supports_substitution => false );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'CHANGED_ON',
            p_db_column             => p_db_column_prefix || 'UPDATED_ON',
            p_is_required           => false,
            p_is_common             => false,
            p_is_read_only          => true,
            p_supports_substitution => false );
    end store_audit_info_comp_prop;
    --
    --
    procedure store_computation_comp_prop (
        p_component_type_id in number )
    is
    begin
        --
        store_component_prop (
            p_component_type_id   => p_component_type_id,
            p_property_name       => 'COMPUTATION_ITEM_NAME',
            p_db_column           => null,
            p_is_required         => true,
            p_is_common           => true,
            p_reference_on_delete => 'WEAK_CASCADE' );
        --
        if p_component_type_id = c_comp_type_page_computation then
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'EXECUTION_SEQUENCE',
                p_db_column         => 'COMPUTATION_SEQUENCE',
                p_is_required       => true,
                p_is_common         => false );
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'COMPUTATION_POINT',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'BEFORE_BOX_BODY' );
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'COMPUTATION_TYPE',
                p_db_column         => null,
                p_view_column       => 'COMPUTATION_TYPE',
                p_is_required       => true,
                p_is_common         => true,
                p_default_value     => 'QUERY' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'COMPUTATION_STATIC_VALUE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'STATIC_ASSIGNMENT' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'COMPUTATION_SQL_STATEMENT',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'QUERY' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'COMPUTATION_SQL_COLON',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'QUERY_COLON' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'COMPUTATION_SQL_EXPRESSION',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'SQL_EXPRESSION' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'COMPUTATION_PLSQL_EXPRESSION',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'PLSQL_EXPRESSION' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'COMPUTATION_PLSQL_FUNCTION_BODY',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'FUNCTION_BODY' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'COMPUTATION_ITEM_VALUE',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'ITEM_VALUE' );
            --
            store_component_prop (
                p_component_type_id           => p_component_type_id,
                p_property_name               => 'COMPUTATION_PREFERENCE_VALUE',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => 'COMPUTATION_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'SET_ITEM_EQUAL_THIS_PREFERENCE' );
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'ERROR_MESSAGE',
                p_db_column         => 'COMPUTATION_ERROR_MESSAGE',
                p_is_required       => false,
                p_is_common         => false,
            p_help_text         => q'~<p>Enter an error message that displays if this computation fails.
    Use <code>#SQLERRM#</code> as a substitution string for the SQL error message resulting from a failed computation.</p>
    <p>Computations are designed to always succeed, and only fail due to unanticipated errors.
    It is not advisable to implement a computation that regularly fails and acts as a psuedo-validation utilizing this error message.~' );
            --
            store_condition_type_comp_prop (
                p_component_type_id => p_component_type_id,
                p_name_prefix       => null,
                p_help_text_type    => null,
                p_db_column_type    => 'COMPUTE_WHEN_TYPE',
                p_view_column_type  => 'CONDITION_TYPE',
                p_db_column_expr1   => 'COMPUTE_WHEN',
                p_db_column_expr2   => 'COMPUTE_WHEN_TEXT' );
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'AUTHORIZATION_SCHEME',
                p_db_column         => 'SECURITY_SCHEME',
                p_is_required       => false,
                p_is_common         => false );
            --
            store_component_prop (
                p_component_type_id => p_component_type_id,
                p_property_name     => 'BUILD_OPTION',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false );
            --
            store_component_prop (
                p_component_type_id     => p_component_type_id,
                p_property_name         => 'COMMENTS',
                p_db_column             => 'COMPUTATION_COMMENT',
                p_is_required           => false,
                p_is_common             => false,
                p_supports_substitution => false );
            --
            store_audit_info_comp_prop (
                p_component_type_id => l_component_type_id );
        end if;
        --
    end store_computation_comp_prop;
    --
    procedure store_grid_comp_prop (
        p_component_type_id     in number,
        p_new_grid_db_column    in varchar2 default 'GRID_NEW_GRID',           -- Pass if component's DB column is not GRID_NEW_GRID
        p_new_row_db_column     in varchar2 default 'GRID_NEW_ROW',            -- Pass if component's DB column is not GRID_NEW_ROW
        p_column_db_column      in varchar2 default 'GRID_COLUMN',             -- Pass if component's DB column is not GRID_COLUMN
        p_new_column_db_column  in varchar2 default 'GRID_NEW_COLUMN',         -- Pass if component's DB column is not GRID_NEW_COLUMN
        p_column_span_db_column in varchar2 default 'GRID_COLUMN_SPAN',        -- Pass if component's DB column is not GRID_COLUMN_SPAN
        p_row_span_db_column    in varchar2 default 'GRID_ROW_SPAN',           -- Pass if component's DB column is not GRID_ROW_SPAN
        p_column_css_db_column  in varchar2 default 'GRID_COLUMN_CSS_CLASSES', -- Pass if component's DB column is not GRID_COLUMN_CSS_CLASSES
        p_column_attr_db_column in varchar2 default 'GRID_COLUMN_ATTRIBUTES',  -- Pass if component's DB column is not GRID_COLUMN_ATTRIBUTES
        p_has_label_column_span in boolean  default false,
        p_plugin_std_attributes in varchar2 default null )
    is
    begin
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'GRID_NEW_GRID',
            p_db_column             => p_new_grid_db_column,
            p_is_required           => true,
            p_is_common             => true,
            p_default_value         => 'N',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'GRID_NEW_ROW',
            p_db_column             => p_new_row_db_column,
            p_is_required           => true,
            p_is_common             => true,
            p_default_value         => 'Y',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => p_component_type_id,
            p_property_name         => 'GRID_COLUMN',
            p_db_column             => p_column_db_column,
            p_is_required           => false,
            p_is_common             => true,
            p_null_text             => 'Automatic',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_NEW_COLUMN',
            p_db_column             => p_new_column_db_column,
            p_is_required           => true,
            p_is_common             => true,
            p_default_value         => 'Y',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_COLUMN_SPAN',
            p_db_column             => p_column_span_db_column,
            p_is_required           => false,
            p_is_common             => true,
            p_null_text             => 'Automatic',
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        if p_row_span_db_column is not null then
            store_component_prop (
                p_component_type_id     => l_component_type_id,
                p_property_name         => 'GRID_ROW_SPAN',
                p_db_column             => p_row_span_db_column,
                p_is_required           => false,
                p_is_common             => false,
                p_plugin_std_attributes => p_plugin_std_attributes );
        end if;
        --
        if p_has_label_column_span then
            store_component_prop (
                p_component_type_id     => l_component_type_id,
                p_property_name         => 'GRID_LABEL_COLUMN_SPAN',
                p_db_column             => null,
                p_is_required           => false,
                p_is_common             => false,
                p_null_text             => 'Page Template Default',
                p_plugin_std_attributes => p_plugin_std_attributes );
        end if;
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_COLUMN_CSS_CLASSES',
            p_db_column             => p_column_css_db_column,
            p_is_required           => false,
            p_is_common             => false,
            p_plugin_std_attributes => p_plugin_std_attributes );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'GRID_COLUMN_ATTRIBUTES',
            p_db_column             => p_column_attr_db_column,
            p_is_required           => false,
            p_is_common             => false,
            p_plugin_std_attributes => p_plugin_std_attributes );

    end store_grid_comp_prop;
    --
    procedure store_report_attributes
    is
    begin
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'NUMBER_OF_ROWS_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NUMBER_OF_ROWS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '15',
            p_depending_on_comp_prop_name => 'NUMBER_OF_ROWS_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NUMBER_OF_ROWS_ITEM',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'NUMBER_OF_ROWS_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ITEM' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'TEMPLATE_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'THEME' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'REPORT_TEMPLATE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '#DEFAULT_REPORT_TEMPLATE#',
            p_depending_on_comp_prop_name => 'TEMPLATE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'THEME' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'REPORT_PREDEFINED_TEMPLATE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '1',
            p_depending_on_comp_prop_name => 'TEMPLATE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PREDEFINED' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'TEMPLATE_OPTIONS',
            p_db_column                   => 'COMPONENT_TEMPLATE_OPTIONS',
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
            p_parent_comp_prop_name       => 'REPORT_TEMPLATE',
            p_depending_on_comp_prop_name => 'REPORT_TEMPLATE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'APPEARANCE_CSS_CLASSES',
            p_db_column                   => 'REGION_SUB_CSS_CLASSES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'TEMPLATE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'THEME',
            p_help_text                   => q'~Enter additional space delimited CSS classes you want to add to your report. Your report template must include the <code>#COMPONENT_CSS_CLASSES#</code> substitution string.~',
            p_comment_text                => '$$$ we should only show this property if the template supports the #COMPONENT_CSS_CLASSES# placeholder' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'SHOW_NULL_VALUES_AS',
            p_db_column         => 'PLUG_QUERY_SHOW_NULLS_AS',
            p_is_required       => false,
            p_is_common         => false,
            p_default_value     => '-' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'CLASSIC_REPORT_PAGINATION_TYPE',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true,
            p_default_value     => 'NEXT_PREVIOUS_LINKS',
            p_null_text         => 'No Pagination (Show All Rows)' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PAGINATION_DISPLAY_POSITION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'BOTTOM_RIGHT',
            p_depending_on_comp_prop_name => 'CLASSIC_REPORT_PAGINATION_TYPE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PARTIAL_PAGE_REFRESH',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'Y' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'WHEN_NO_DATA_FOUND_MESSAGE',
            p_db_column         => 'PLUG_QUERY_NO_DATA_FOUND',
            p_is_required       => false,
            p_is_common         => false );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'WHEN_MORE_DATA_FOUND_MESSAGE',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'REPORT_SUM_LABEL',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'BREAK_COLUMNS',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false,
            p_null_text         => 'No Break' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_COLUMN_STYLE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'DEFAULT_BREAK_FORMATTING',
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_REPEAT_HEADING_FORMAT',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMN_STYLE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'REPEAT_HEADINGS_ON_BREAK_1' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_COLUMN_TEXT_FORMAT',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_BEFORE_ROW',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_GENERIC_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BREAK_AFTER_ROW',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'BREAK_COLUMNS',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'CUSTOM_ATTRIBUTES',
            p_db_column         => 'REPORT_ATTRIBUTES_SUBSTITUTION',
            p_is_required       => false,
            p_is_common         => false,
            p_help_text         => q'~The report template substitution string <code>#REPORT_ATTRIBUTES#</code> is replaced with this value.  The <code>#REPORT_ATTRIBUTES#</code> substitution string is only replaced in the before rows attribute of the report template.~' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'MAXIMUM_ROW_COUNT',
            p_db_column         => 'PLUG_QUERY_ROW_COUNT_MAX',
            p_is_required       => false,
            p_is_common         => false,
            p_comment_text      => q'~$$$ should be moved to region attributes, I think that is needed by all plug-ins~' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'STRIP_HTML',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'SORT_NULLS',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'L' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'HEADINGS_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'COLON_DELMITED_LIST' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HEADING_TYPE_PLSQL_FUNCTION_BODY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'HEADINGS_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST' );
        --
        /* Add back when we have fixed header support for classic reports / tabular forms
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FIXED_HEADER',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'PAGE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FIXED_HEADER_MAX_HEIGHT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'FIXED_HEADER',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'REGION' );
        */
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'CSV_EXPORT_ENABLED',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CSV_SEPARATOR',
            p_db_column                   => 'PLUG_QUERY_EXP_SEPARATOR',
            p_is_required                 => false,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'CSV_EXPORT_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CSV_ENCLOSED_BY',
            p_db_column                   => 'PLUG_QUERY_EXP_ENCLOSED_BY',
            p_is_required                 => false,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'CSV_EXPORT_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DOWNLOAD_LINK_TEXT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Download',
            p_depending_on_comp_prop_name => 'CSV_EXPORT_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DOWNLOAD_FILENAME',
            p_db_column                   => 'PLUG_QUERY_EXP_FILENAME',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'CSV_EXPORT_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y',
            p_help_text                   => q'~Specify a name for the CSV download file. If no name is specified, the region name is used followed by the extension .csv.~' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'ENABLE_PRINTING',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'EXTERNAL_PROCESSING_ENABLED',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'EXTERNAL_PROCESSING_URL',
            p_db_column                   => null,
            p_view_column                 => 'URL',
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'EXTERNAL_PROCESSING_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'EXTERNAL_PROCESSING_LINK_TEXT',
            p_db_column                   => null,
            p_view_column                 => 'LINK_LABEL',
            p_is_required                 => true,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'EXTERNAL_PROCESSING_ENABLED',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
    end store_report_attributes;
    --
    procedure store_report_columns (
        p_type_property_name in varchar2 )
    is
    begin
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'COLUMN_NAME',
            p_db_column         => 'COLUMN_ALIAS',
            p_is_required       => true,
            p_is_common         => true,
            p_is_read_only      => true,
            p_check_uniqueness  => 'PARENT',
            p_comment_text      => q'~$$$ the old edit page maps CHECK$, LINK$ and DERIVED$ to system messages. See wwv_flow_edit_report.get_alias_display_name~' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'QUERY_COLUMN_ID',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'DERIVED_COLUMN',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true,
            p_default_value     => 'N' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => p_type_property_name,
            p_db_column         => null,
            p_view_column       => 'DISPLAY_AS',
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'PLAIN' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_HEADING',
            p_db_column                   => 'COLUMN_HEADING',
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HEADING_ALIGNMENT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'CENTER',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'DISPLAY_SEQUENCE',
            p_db_column         => 'COLUMN_DISPLAY_SEQUENCE',
            p_is_required       => true,
            p_is_common         => true,
            p_comment_text      => q'~$$$ make this read only for now~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_ALIGNMENT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'LEFT',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FORMAT_MASK',
            p_db_column                   => 'COLUMN_FORMAT',
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN,LINK,DISPLAY_AND_SAVE,TEXT,DATE_PICKER',
            p_help_text                   => q'~<p>Enter the format mask to apply to this column.
    You can type in the format mask or pick from the predefined list, based on a sample representation of how that format mask is displayed.</p>
    <p>It is important that number format masks are only applied to columns that contain numbers and date format masks are only applied to columns that contain dates.
    Otherwise, a runtime error is raised when any record contains a value that can not be converted using the specified format mask.</p>~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DATE_PICKER_FORMAT_MASK',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DATE_POPUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PCT_GRAPH_BACKGROUD_COLOR',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PCT_GRAPH' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PCT_GRAPH_FOREGROUND_COLOR',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PCT_GRAPH' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PCT_GRAPH_BAR_WIDTH',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PCT_GRAPH' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_TABLE_OWNER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_comment_text                => q'~$$$ Note: A owner column is not yet supported by the format mask~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_TABLE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE_OWNER' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_CONTENT_COLUMN',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_PK_COLUMN1',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_PK_COLUMN2',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_MIME_TYPE_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_FILENAME_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_LAST_UPDATED_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'IMAGE,DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'BLOB_CHARSET_COLUMN',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN_LOV,SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY',
            p_comment_text                => q'~$$$ for POPUP and POPUPKEY we should NOT show STATIC~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NAMED_LOV',
            p_db_column                   => 'NAMED_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SHARED' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_SQL',
            p_db_column                   => 'INLINE_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_STATIC_VALUES',
            p_db_column                   => 'INLINE_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'STATIC:Display1;Return1,Display2;Return2',
            p_depending_on_comp_prop_name => 'LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LOV_FUNC_BODY_RETURNING_SQL',
            p_db_column                   => 'INLINE_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'LOV_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLSQL_FUNCTION_BODY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SIMPLE_CHECKBOX_VALUES',
            p_db_column                   => 'INLINE_LOV',
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SIMPLE_CHECKBOX' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DISPLAY_EXTRA_VALUES',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'SELECT_LIST,RADIOGROUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DISPLAY_NULL_VALUE',
            p_db_column                   => 'LOV_SHOW_NULLS',
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NULL_DISPLAY_VALUE',
            p_db_column                   => 'LOV_NULL_TEXT',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'NULL_RETURN_VALUE',
            p_db_column                   => 'LOV_NULL_VALUE',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_TARGET',
            p_db_column                   => 'COLUMN_LINK',
            p_is_required                 => false,
            p_is_common                   => true,
            p_reference_scope             => 'ROW',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'LINK,PCT_GRAPH',
            p_comment_text                => q'~$$$ IMAGE raises the runtime error "Numeric value error" if a value is set~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_TEXT',
            p_db_column                   => 'COLUMN_LINKTEXT',
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => '##CURRENT_COLUMN_NAME##',
            p_reference_scope             => 'ROW',
            p_depending_on_comp_prop_name => 'LINK_TARGET',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LINK_ATTRIBUTES',
            p_db_column                   => 'COLUMN_LINK_ATTR',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_scope             => 'ROW',
            p_depending_on_comp_prop_name => 'LINK_TARGET',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DOWNLOAD_TEXT',
            p_db_column                   => 'BLOB_DOWNLOAD_TEXT',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DOWNLOAD',
            p_parent_comp_prop_name       => 'BLOB_TABLE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CONTENT_DISPOSITION',
            p_db_column                   => 'BLOB_CONTENT_DISPOSITION',
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'attachment',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'DOWNLOAD' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ELEMENT_WIDTH',
            p_db_column                   => 'COLUMN_WIDTH',
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'TEXT,TEXTAREA,DATE_POPUP,DATE_PICKER,POPUP,POPUPKEY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ELEMENT_HEIGHT',
            p_db_column                   => 'COLUMN_HEIGHT',
            p_is_required                 => false,
            p_is_common                   => true,
            p_default_value               => '3',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'TEXTAREA' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'RADIO_COLUMNS',
            p_db_column                   => 'ATTRIBUTE_01',
            p_is_required                 => false,
            p_is_common                   => false,
            p_default_value               => '1',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'RADIOGROUP' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HTML_EXPRESSION',
            p_db_column                   => 'COLUMN_HTML_EXPRESSION',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_scope             => 'ROW',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLAIN' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FORMATTING_CSS_CLASSES',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN,LINK,PCT_GRAPH',
            p_comment_text                => q'~$$$ IMAGE or DOWNLOAD do raise the runtime error "Numeric value error" if a value is set~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CSS_STYLE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN,LINK,PCT_GRAPH',
            p_comment_text                => q'~$$$ IMAGE or DOWNLOAD do raise the runtime error "Numeric value error" if a value is set~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'HIGHLIGHT_WORDS',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLAIN' );
        --
        if p_type_property_name = 'TAB_FORM_COLUMN_TYPE' then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'COLUMN_DEFAULT_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => p_type_property_name,
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => 'DISPLAY_AND_SAVE,DATE_POPUP,DATE_PICKER,TEXT,TEXTAREA,SELECT_LIST,RADIOGROUP,HIDDEN_FIELD,POPUP,POPUPKEY,SIMPLE_CHECKBOX,ROW_SELECTOR',
                p_comment_text                => '$$$ Property should only be visible if the current column name NOT matches with the primary key column(s) in the tabular form DML process' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'DEFAULT_VALUE_ITEM',
                p_db_column                   => 'COLUMN_DEFAULT',
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'COLUMN_DEFAULT_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'ITEM' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'DEFAULT_VALUE_PLSQL_EXPRESSION',
                p_db_column                   => 'COLUMN_DEFAULT',
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'COLUMN_DEFAULT_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'FUNCTION' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PK_SOURCE_TYPE',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => p_type_property_name,
                p_depending_on_condition_type => 'NOT_EQUALS',
                p_depending_on_expression     => 'ROW_SELECTOR',
                p_comment_text                => '$$$ Property should only be visible if the current column name matches with the primary key column(s) in the tabular form DML process' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PK_SOURCE_SEQUENCE_NAME',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'PK_SOURCE_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'S' );
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PK_SOURCE_PLSQL_EXPRESSION',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'PK_SOURCE_TYPE',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'F' );
            --
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_SORT_SEQUENCE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,ROW_SELECTOR' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_SORT_DIRECTION',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_null_text                   => 'Ascending',
            p_depending_on_comp_prop_name => 'COLUMN_SORT_SEQUENCE',
            p_depending_on_condition_type => 'NOT_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'DISABLE_SORT_COLUMN',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,ROW_SELECTOR' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'INCLUDE_IN_EXPORT_PRINT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,ROW_SELECTOR',
            p_comment_text                => q'~$$$ should we hide it for LINK as well? Is Hidden supported?~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PRINT_COLUMN_WIDTH',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'INCLUDE_IN_EXPORT_PRINT',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Y' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ADVANCED_CSS_CLASSES',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'TEXT,TEXTAREA,DATE_POPUP,DATE_PICKER,HIDDEN_FIELD,HIDDEN_PROTECTED,SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY,SIMPLE_CHECKBOX' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'CUSTOM_ATTRIBUTES',
            p_db_column                   => 'CATTRIBUTES',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'TEXT,TEXTAREA,DATE_POPUP,DATE_PICKER,HIDDEN_FIELD,HIDDEN_PROTECTED,SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY,SIMPLE_CHECKBOX' );
        --
    /*
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ELEMENT_OPTION_HTML_ATTRIBUTES', -- $$$ is this property really used by reports3.plb, can't find it in the rendering code
            p_db_column                   => 'CATTRIBUTES_ELEMENT',
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name, -- $$$ would it be better to restricted to specific display types?
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'HIDDEN_COLUMN' );
    */
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COLUMN_WIDTH',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'COMPUTE_SUM',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD,ROW_SELECTOR,DATE_POPUP,DATE_PICKER' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'FIELD_TEMPLATE',
            p_db_column                   => 'COLUMN_FIELD_TEMPLATE',
            p_is_required                 => false,
            p_is_common                   => false,
            p_reference_on_delete         => 'WEAK_NULL',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'DISPLAY_AND_SAVE,TEXT,TEXTAREA,DATE_POPUP,DATE_PICKER,HIDDEN_FIELD,HIDDEN_PROTECTED,SELECT_LIST,RADIOGROUP,POPUP,POPUPKEY,SIMPLE_CHECKBOX',
            p_help_text                   => q'~Choose the field template to be used when rendering the tabular form field. When no template is selected, the field is rendered using the default accessibility compliant label.~' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'USE_AS_ROW_HEADER',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'N',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'NOT_IN_LIST',
            p_depending_on_expression     => 'HIDDEN_COLUMN,HIDDEN_FIELD,PCT_GRAPH,ROW_SELECTOR' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'UI_DEFAULT_REF_TABLE_OWNER',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => false,
            p_depending_on_comp_prop_name => 'DERIVED_COLUMN',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'N' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'UI_DEFAULT_REF_TABLE',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => false,
            p_parent_comp_prop_name => 'UI_DEFAULT_REF_TABLE_OWNER' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'UI_DEFAULT_REF_COLUMN',
            p_db_column             => null,
            p_is_required           => false,
            p_is_common             => false,
            p_parent_comp_prop_name => 'UI_DEFAULT_REF_TABLE' );
        --
        store_condition_type_comp_prop (
            p_component_type_id => l_component_type_id,
            p_name_prefix       => null,
            p_help_text_type    => null,
            p_db_column_type    => 'DISPLAY_WHEN_COND_TYPE',
            p_view_column_type  => 'CONDITION_TYPE',
            p_db_column_expr1   => 'DISPLAY_WHEN_CONDITION',
            p_db_column_expr2   => 'DISPLAY_WHEN_CONDITION2' );
        --
        store_component_prop (
            p_component_type_id   => l_component_type_id,
            p_property_name       => 'AUTHORIZATION_SCHEME',
            p_db_column           => 'REPORT_COLUMN_REQUIRED_ROLE',
            p_is_required         => false,
            p_is_common           => false,
            p_reference_on_delete => 'WEAK_NULL' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'ESCAPE_SPECIAL_CHARACTERS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => p_type_property_name,
            p_depending_on_condition_type => 'IN_LIST',
            p_depending_on_expression     => 'PLAIN,LINK,HIDDEN_COLUMN' );
        --
        store_component_prop (
            p_component_type_id   => l_component_type_id,
            p_property_name       => 'BUILD_OPTION',
            p_db_column           => null,
            p_is_required         => false,
            p_is_common           => false,
            p_reference_on_delete => 'WEAK_NULL' );
        --
        store_component_prop (
            p_component_type_id     => l_component_type_id,
            p_property_name         => 'COMMENTS',
            p_db_column             => 'COLUMN_COMMENT',
            p_is_required           => false,
            p_is_common             => false,
            p_supports_substitution => false );
        --
        store_audit_info_comp_prop (
            p_component_type_id => l_component_type_id );
    end store_report_columns;
    --
    procedure store_comp_props_web_src_param 
    is
    begin
        store_component_prop (
            p_component_type_id   => l_component_type_id,
            p_property_name       => 'WEB_SRC_PARAM',
            p_db_column           => null,
            p_is_required         => true,
            p_is_common           => true,
            p_is_read_only        => true,
            p_reference_on_delete => 'DB_CASCADE' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'VALUE_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_STATIC_VALUE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'STATIC' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_QUERY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
    /*
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_QUERY_COLON',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY_COLON' );

        --
    */
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_ITEM',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'ITEM' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_PLSQL_EXPRESSION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLSQL_EXPRESSION' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_PLSQL_FUNCTION_BODY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PLSQL_FUNCTION_BODY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_PREFERENCE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'PREFERENCE' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'VALUE_COLLECTION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_supports_substitution       => false,
            p_depending_on_comp_prop_name => 'VALUE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'COLLECTION' );
        --
        store_audit_info_comp_prop (
            p_component_type_id => l_component_type_id );
        --
    end store_comp_props_web_src_param;
    --
    procedure store_property_series_source (
        p_prefix               in varchar2,
        p_property_id_type     in number,
        p_property_id_sql      in number,
        p_property_id_plsql    in number,
        p_sql_min_column_count in number,
        p_sql_max_column_count in number,
        p_examples_sql         in varchar2,
        p_examples_plsql       in varchar2 )
    is
    begin
        l_property_id := p_property_id_type;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_prefix || '_SERIES_SOURCE_TYPE',
            p_prompt             => 'Type',
            p_property_type      => 'SELECT LIST',
            p_db_column          => 'SERIES_QUERY_TYPE',
            p_display_group_name => 'SOURCE',
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select the query source type for the chart series.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'SQL Query',
            p_return_value  => 'SQL_QUERY' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'PL/SQL Function Body returning SQL Query',
            p_return_value  => 'FUNCTION_RETURNING_SQL_QUERY' );
        --
        l_property_id := p_property_id_sql;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_prefix || '_SOURCE_QUERY',
            p_prompt               => 'SQL Query',
            p_property_type        => 'SQL',
            p_db_column            => 'SERIES_QUERY',
            p_display_length       => 80,
            p_max_length           => 32767,
            p_sql_min_column_count => p_sql_min_column_count,
            p_sql_max_column_count => p_sql_max_column_count,
            p_examples             => p_examples_sql,
            p_display_group_name   => 'SOURCE',
            p_help_text            => q'~Enter the SQL Query for the chart series.~',
            p_comment_text         => '$$$ how can we check the data types of the SQL query?' );
        --
        l_property_id := p_property_id_plsql;
        store_property (
            p_id                   => l_property_id,
            p_name                 => p_prefix || '_SOURCE_FUNC_RETURNING_SQL',
            p_prompt               => 'PL/SQL Function Body returning SQL Query',
            p_property_type        => 'PLSQL FUNCTION BODY SQL',
            p_db_column            => 'SERIES_QUERY',
            p_display_length       => 80,
            p_max_length           => 32767,
            p_display_group_name   => 'SOURCE',
            p_sql_min_column_count => p_sql_min_column_count,
            p_sql_max_column_count => p_sql_max_column_count,
            p_examples             => p_examples_plsql,
            p_help_text            => q'~Enter a PL/SQL function body that returns an SQL Query for the chart series.~',
            p_comment_text         => '$$$ how can we check the data types of the SQL query?' );
    end store_property_series_source;
    --
    procedure store_comp_props_series_source (
        p_prefix             in varchar2,
        p_series_chart_types in varchar2 default null )
    is
        l_ser_src_type_dep_on_name  varchar2(100);
        l_ser_src_type_dep_on_cond  varchar2(100);
        l_ser_src_type_dep_on_exp   varchar2(1000);
    begin
        if p_series_chart_types is not null then
            l_ser_src_type_dep_on_name := 'SERIES_CHART_TYPE';
            l_ser_src_type_dep_on_cond := 'IN_LIST';
            l_ser_src_type_dep_on_exp  := p_series_chart_types;
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_prefix || '_SERIES_SOURCE_TYPE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'SQL_QUERY',
            p_depending_on_comp_prop_name => l_ser_src_type_dep_on_name,
            p_depending_on_condition_type => l_ser_src_type_dep_on_cond,
            p_depending_on_expression     => l_ser_src_type_dep_on_exp );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_prefix || '_SOURCE_QUERY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_prefix || '_SERIES_SOURCE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'SQL_QUERY' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_prefix || '_SOURCE_FUNC_RETURNING_SQL',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => p_prefix || '_SERIES_SOURCE_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'FUNCTION_RETURNING_SQL_QUERY' );
    end store_comp_props_series_source;
    --
    procedure store_chart_font_properties (
        p_font_group             in varchar2,
        p_prompt_prefix          in varchar2 default null,
        p_display_group_name     in varchar2,
        p_property_id_font       in number,
        p_property_id_font_size  in number,
        p_property_id_font_color in number )
    is
        c_prompt_prefix varchar2( 30 ) := p_prompt_prefix || case when p_prompt_prefix is not null then ' ' end;
    begin
        --
        l_property_id := p_property_id_font;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FACE',
            p_prompt             => c_prompt_prefix || 'Font Face',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_font_group || '_FACE',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a font face.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arial',
            p_return_value  => 'Arial' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Helvetica',
            p_return_value  => 'Helvetica' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Geneva',
            p_return_value  => 'Geneva' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Sans-serif',
            p_return_value  => 'sans-serif' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Verdana',
            p_return_value  => 'Verdana' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Tahoma',
            p_return_value  => 'Tahoma' );
        --
        l_property_id := p_property_id_font_size;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_SIZE',
            p_prompt             => c_prompt_prefix || 'Font Size',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_font_group || '_SIZE',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select the font size.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '2',
            p_return_value  => '2' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '4',
            p_return_value  => '4' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '6',
            p_return_value  => '6' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '8',
            p_return_value  => '8' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '10',
            p_return_value  => '10' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '12',
            p_return_value  => '12' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '14',
            p_return_value  => '14' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '16',
            p_return_value  => '16' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '18',
            p_return_value  => '18' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '20',
            p_return_value  => '20' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => '22',
            p_return_value  => '22' );
        --
        l_property_id := p_property_id_font_color;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_COLOR',
            p_prompt             => c_prompt_prefix || 'Font Color',
            p_property_type      => 'COLOR',
            p_db_column          => p_font_group || '_COLOR',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~<p>Enter the color used to display the font for the specified attribute.</p>~' );

    end store_chart_font_properties;
    --
    procedure store_chart_font_comp_props (
        p_font_group                  in varchar2,
        p_default_font_size           in number   default 10,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null )
    is
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FACE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Tahoma',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_SIZE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => p_default_font_size,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_COLOR',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => '#000000',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
    end store_chart_font_comp_props;
    --
    --
    procedure store_gantt_marker_property (
        p_marker_group      in varchar2,
        p_property_id_start in number,
        p_property_id_end   in number,
        p_property_id_shape in number )
    is
    begin
        l_property_id := p_property_id_start;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_marker_group || '_START',
            p_prompt             => 'Start Marker',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_marker_group || '_START',
            p_display_group_name => p_marker_group,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a marker to be used when rendering the selected task bar starting point.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'None',
            p_return_value  => 'None',
            p_is_quick_pick => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arrow',
            p_return_value  => 'Arrow',
            p_is_quick_pick => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Circle',
            p_return_value  => 'Circle',
            p_is_quick_pick => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Bottom Circle',
            p_return_value  => 'HalfBottomCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Center Circle',
            p_return_value  => 'HalfCenterCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Top Circle',
            p_return_value  => 'HalfTopCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Rhombus',
            p_return_value  => 'Rhomb' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Bottom Circle',
            p_return_value  => 'ThinBottomCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Center Circle',
            p_return_value  => 'ThinCenterCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Top Circle',
            p_return_value  => 'ThinTopCircle' );
        --
        l_property_id := p_property_id_end;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_marker_group || '_END',
            p_prompt             => 'End Marker',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_marker_group || '_END',
            p_display_group_name => p_marker_group,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a marker to be used when rendering the selected task bar end point.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'None',
            p_return_value  => 'None',
            p_is_quick_pick => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Arrow',
            p_return_value  => 'Arrow',
            p_is_quick_pick => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Circle',
            p_return_value  => 'Circle',
            p_is_quick_pick => 'Y' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Bottom Circle',
            p_return_value  => 'HalfBottomCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Center Circle',
            p_return_value  => 'HalfCenterCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Top Circle',
            p_return_value  => 'HalfTopCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Rhombus',
            p_return_value  => 'Rhomb' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Bottom Circle',
            p_return_value  => 'ThinBottomCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Center Circle',
            p_return_value  => 'ThinCenterCircle' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Top Circle',
            p_return_value  => 'ThinTopCircle' );
        --
        l_property_id := p_property_id_shape;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_marker_group || '_SHAPE',
            p_prompt             => 'Middle Shape',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_marker_group || '_SHAPE',
            p_display_group_name => p_marker_group,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a shape to be used when rendering the middle section of the selected task bar.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Full',
            p_return_value  => 'Full' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Bottom',
            p_return_value  => 'HalfBottom' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Center',
            p_return_value  => 'HalfCenter' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Half Top',
            p_return_value  => 'HalfTop' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Bottom',
            p_return_value  => 'ThinBottom' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Center',
            p_return_value  => 'ThinCenter' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thin Top',
            p_return_value  => 'ThinTop' );
        --
    end store_gantt_marker_property;
    --
    --
    procedure store_gantt_marker_comp_props (
        p_marker_group            in varchar2,
        p_depending_on_expression in varchar2 )
    is
        procedure store (
            p_property_name in varchar2,
            p_default_value in varchar2 )
        is
        begin
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_property_name,
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => p_default_value,
                p_depending_on_comp_prop_name => 'CHART_TYPE',
                p_depending_on_condition_type => 'IN_LIST',
                p_depending_on_expression     => p_depending_on_expression );
        end store;
    begin
        store (
            p_property_name => p_marker_group || '_START',
            p_default_value => 'Rhomb' );
        --
        store (
            p_property_name => p_marker_group || '_END',
            p_default_value => 'Rhomb' );
        --
        store (
            p_property_name => p_marker_group || '_SHAPE',
            p_default_value => 'Full' );
        --
    end store_gantt_marker_comp_props;
    --
    --
    procedure store_cal_weekday_property (
        p_property_id        in number,
        p_name               in varchar2,
        p_prompt             in varchar2,
        p_db_column          in varchar2,
        p_display_group_name in varchar2,
        p_help_text          in varchar2 )
    is
    begin
        l_property_id := p_property_id;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_name,
            p_prompt             => p_prompt,
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_db_column,
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => p_help_text );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Sunday',
            p_return_value  => '19721105' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Monday',
            p_return_value  => '19721106' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Tuesday',
            p_return_value  => '19721107' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Wednesday',
            p_return_value  => '19721108' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Thursday',
            p_return_value  => '19721109' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Friday',
            p_return_value  => '19721110' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Saturday',
            p_return_value  => '19721111' );
        --
    end store_cal_weekday_property;
    --
    --
    procedure store_map_level_properties (
        p_start_property_id in number )
    is
        l_last_property_id number := p_start_property_id - 1;
        --
        procedure store_map_property (
            p_level                 in number,
            p_property_name_postfix in varchar2 default null,
            p_parent_id             in number )
        is
            l_property_id             number;
            l_last_lov_value_sequence number;
            --
            l_is_leaf_level boolean := false;
            l_adm1_code     boolean := false;
            l_fips          boolean := false;
            l_gmi_admin     boolean := false;
            l_custom        boolean := false;
            l_state_fips    boolean := false;
            l_unconditional_region_col_map boolean := false;
        begin
            l_last_property_id := l_last_property_id + 1;
            l_property_id      := l_last_property_id;
            --
            store_property (
                p_id                 => l_property_id,
                p_name               => 'MAP_LEVEL_' || p_level || case when p_property_name_postfix is not null then '_' || p_property_name_postfix end,
                p_prompt             => 'Level ' || p_level,
                p_property_type      => 'SELECT LIST',
                p_db_column          => 'MAP_LEVEL_' || p_level,
                p_display_group_name => 'MAP',
                p_lov_type           => 'STATIC',
                p_help_text          => q'~Select the map level from the available list.~' );
            --
            for l_map in ( select id,
                                  map_name,
                                  case when instr( map_file_path, '.amap' ) > 0 then map_file_path else substr( map_file_path, instr( map_file_path, '/', -1 ) + 1 ) end as map_file,
                                  ( select count(*)
                                      from wwv_flow_flash_map_files
                                     where parent_id = x.id ) as sub_maps_count
                             from wwv_flow_flash_map_files x
                            where parent_id = p_parent_id
                               or ( p_parent_id is null and parent_id is null )
                            order by map_name )
            loop
                store_property_lov_values (
                    p_property_id   => l_property_id,
                    p_display_value => l_map.map_name,
                    p_return_value  => l_map.map_file );
                --
                if l_map.sub_maps_count > 0 then
                    --
                    l_last_lov_value_sequence     := g_property_lov_value_sequence;
                    store_map_property (
                        p_level                 => p_level + 1,
                        p_property_name_postfix => case when p_property_name_postfix is not null then p_property_name_postfix || '_' end || replace( upper( l_map.map_file ), '/', '_' ),
                        p_parent_id             => l_map.id );
                    g_property_lov_value_sequence := l_last_lov_value_sequence;
                else
                    l_is_leaf_level := true;
                end if;
                -- Check which lov values the conditional map region column property should get
                if instr( ',2,14,23,29,', ',' || l_map.id || ',' ) > 0 then
                    l_adm1_code := true;
                elsif instr( ',154,155,187,188,189,190,191,192,193,194,195,', ',' || l_map.id || ',' ) > 0 then
                    l_fips := true;
                elsif instr( ',156,157,158,', ',' || l_map.id || ',' ) > 0 then
                    l_gmi_admin := true;
                elsif instr( ',160,161,162,163,164,178,179,180,181,182,183,184,185,186,196,197,198,199,', ',' || l_map.id || ',' ) > 0 then
                    l_state_fips := true;
                    if l_map.id = 160 then
                        l_custom := true;
                    end if;
                else
                    l_unconditional_region_col_map := true;
                end if;
            end loop;
            --
            if l_is_leaf_level then
                --
                l_last_property_id := l_last_property_id + 1;
                --
                store_property (
                    p_id                 => l_last_property_id,
                    p_name               => 'MAP_CENTER' || case when p_property_name_postfix is not null then '_' || p_property_name_postfix end,
                    p_prompt             => 'Center',
                    p_property_type      => 'POPUP LOV',
                    p_db_column          => 'MAP_CENTER',
                    p_display_group_name => 'MAP',
                    p_lov_type           => 'MAP_REGIONS',
                    p_help_text          => q'~Select how the center of the map region is derived from the available list.~' );
                --
                if l_unconditional_region_col_map then
                    --
                    l_last_property_id := l_last_property_id + 1;
                    --
                    store_property (
                        p_id                 => l_last_property_id,
                        p_name               => 'MAP_REGION_COLUMN_1' || case when p_property_name_postfix is not null then '_' || p_property_name_postfix end,
                        p_prompt             => 'Map Region Column',
                        p_property_type      => 'SELECT LIST',
                        p_db_column          => 'MAP_REGION_COLUMN',
                        p_display_group_name => 'MAP',
                        p_lov_type           => 'STATIC',
                        p_help_text          => q'~Set the map region column for the selected map. By default, Map Region Column is set to REGION_NAME. This is the AnyChart Map Reference column holding the data that corresponds with the information returned using the LABEL parameter of the map series query.~' );
                    --
                    store_property_lov_values (
                        p_property_id   => l_last_property_id,
                        p_display_value => 'CENTROID_X',
                        p_return_value  => 'CENTROID_X' );
                    --
                    store_property_lov_values (
                        p_property_id   => l_last_property_id,
                        p_display_value => 'CENTROID_Y',
                        p_return_value  => 'CENTROID_Y' );
                    --
                    store_property_lov_values (
                        p_property_id   => l_last_property_id,
                        p_display_value => 'REGION_ID',
                        p_return_value  => 'REGION_ID' );
                    --
                    store_property_lov_values (
                        p_property_id   => l_last_property_id,
                        p_display_value => 'REGION_NAME',
                        p_return_value  => 'REGION_NAME' );
                    --
                end if;
                --
                if l_adm1_code or l_fips or l_gmi_admin or l_custom or l_state_fips then
                   --
                    l_last_property_id := l_last_property_id + 1;
                    --
                    store_property (
                        p_id                 => l_last_property_id,
                        p_name               => 'MAP_REGION_COLUMN_2' || case when p_property_name_postfix is not null then '_' || p_property_name_postfix end,
                        p_prompt             => 'Map Region Column',
                        p_property_type      => 'SELECT LIST',
                        p_db_column          => 'MAP_REGION_COLUMN',
                        p_display_group_name => 'MAP',
                        p_lov_type           => 'STATIC',
                        p_help_text          => q'~Set the map region column for the selected map. By default, Map Region Column is set to REGION_NAME. This is the AnyChart Map Reference column holding the data that corresponds with the information returned using the LABEL parameter of the map series query.~' );
                    --
                    if l_adm1_code then
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'ADM1_CODE',
                            p_return_value  => 'ADM1_CODE' );
                    end if;
                    --
                    store_property_lov_values (
                        p_property_id   => l_last_property_id,
                        p_display_value => 'CENTROID_X',
                        p_return_value  => 'CENTROID_X' );
                    --
                    store_property_lov_values (
                        p_property_id   => l_last_property_id,
                        p_display_value => 'CENTROID_Y',
                        p_return_value  => 'CENTROID_Y' );
                    --
                    if l_fips then
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'FIPS',
                            p_return_value  => 'FIPS' );
                    end if;
                    --
                    if l_gmi_admin then
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'GMI_ADMIN',
                            p_return_value  => 'GMI_ADMIN' );
                    end if;
                    --
                    if l_custom then
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'HSHOLD_1_M',
                            p_return_value  => 'HSHOLD_1_M' );
                        --
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'MOBILEHOME',
                            p_return_value  => 'MOBILEHOME' );
                        --
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'POP1990',
                            p_return_value  => 'POP1990' );
                        --
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'POP90_SQMI',
                            p_return_value  => 'POP90_SQMI' );
                    end if;
                    --
                    store_property_lov_values (
                        p_property_id   => l_last_property_id,
                        p_display_value => 'REGION_ID',
                        p_return_value  => 'REGION_ID' );
                    --
                    store_property_lov_values (
                        p_property_id   => l_last_property_id,
                        p_display_value => 'REGION_NAME',
                        p_return_value  => 'REGION_NAME' );
                    --
                    if l_state_fips then
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'STATE_FIPS',
                            p_return_value  => 'STATE_FIPS' );
                    end if;
                    --
                    if l_custom then
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'SUB_REGION',
                            p_return_value  => 'SUB_REGION' );
                        --
                        store_property_lov_values (
                            p_property_id   => l_last_property_id,
                            p_display_value => 'WHITE',
                            p_return_value  => 'WHITE' );
                    end if;
                    --
                end if;
                --
            end if;
        end store_map_property;
    begin
        store_map_property (
            p_level     => 1,
            p_parent_id => null );
        --
    end store_map_level_properties;
    --
    --
    procedure store_map_level_comp_props
    is
        procedure store_map_comp_prop (
            p_level                  in number,
            p_property_name_postfix  in varchar2 default null,
            p_depending_on_prop_name in varchar2 default null,
            p_depending_map_file     in varchar2 default null,
            p_parent_id              in number )
        is
            l_property_name                varchar2( 255 );
            l_is_leaf_level                boolean          := false;
            l_not_in_maps                  varchar2( 4000 );
            l_conditional_region_col_maps  varchar2( 4000 );
            l_unconditional_region_col_map boolean          := false;
        begin
            l_property_name := 'MAP_LEVEL_' || p_level || case when p_property_name_postfix is not null then '_' || p_property_name_postfix end;
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => l_property_name,
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => true,
                p_depending_on_comp_prop_name => p_depending_on_prop_name,
                p_depending_on_condition_type => case when p_depending_on_prop_name is not null then 'EQUALS' end,
                p_depending_on_expression     => case when p_depending_on_prop_name is not null then p_depending_map_file end );
            --
            for l_map in ( select id,
                                  map_name,
                                  substr( map_file_path, instr( map_file_path, '/', -1 ) + 1 ) as map_file,
                                  map_file_path,
                                  ( select count(*)
                                      from wwv_flow_flash_map_files
                                     where parent_id = x.id ) as sub_maps_count
                             from wwv_flow_flash_map_files x
                            where parent_id = p_parent_id
                               or ( p_parent_id is null and parent_id is null )
                            order by map_name )
            loop
                if l_map.sub_maps_count > 0 then
                    l_not_in_maps := l_not_in_maps || case when l_not_in_maps is not null then ',' end || l_map.map_file;
                    store_map_comp_prop (
                        p_level                  => p_level + 1,
                        p_property_name_postfix  => case when p_property_name_postfix is not null then p_property_name_postfix || '_' end || replace( upper( l_map.map_file ), '/', '_' ),
                        p_depending_on_prop_name => l_property_name,
                        p_depending_map_file     => l_map.map_file,
                        p_parent_id              => l_map.id );
                else
                    l_is_leaf_level := true;
                end if;
                --
                -- Check if the conditional map region column property should be used
                if instr( ',2,14,23,29,154,155,187,188,189,190,191,192,193,194,195,156,157,158,160,161,162,163,164,178,179,180,181,182,183,184,185,186,196,197,198,199', ',' || l_map.id || ',' ) > 0 then
                    l_conditional_region_col_maps := l_conditional_region_col_maps || case when l_conditional_region_col_maps is not null then ',' end ||
                                                     l_map.map_file_path;
                else
                    l_unconditional_region_col_map := true;
                end if;
            end loop;
            --
            -- Do all maps in that leaf use the conditional region column property? Then there is no need to create the generic one.
            if not l_unconditional_region_col_map then
                l_conditional_region_col_maps := null;
            end if;
            --
            if l_is_leaf_level then
                store_component_prop (
                    p_component_type_id           => l_component_type_id,
                    p_property_name               => 'MAP_CENTER' || case when p_property_name_postfix is not null then '_' || p_property_name_postfix end,
                    p_db_column                   => null,
                    p_is_required                 => false,
                    p_is_common                   => true,
                    p_parent_comp_prop_name       => l_property_name,
                    p_depending_on_comp_prop_name => l_property_name,
                    p_depending_on_condition_type => case when l_not_in_maps is not null then 'NOT_IN_LIST' else 'NOT_NULL' end,
                    p_depending_on_expression     => l_not_in_maps );
                --
                if l_unconditional_region_col_map then
                    store_component_prop (
                        p_component_type_id           => l_component_type_id,
                        p_property_name               => 'MAP_REGION_COLUMN_1' || case when p_property_name_postfix is not null then '_' || p_property_name_postfix end,
                        p_db_column                   => null,
                        p_is_required                 => true,
                        p_is_common                   => false,
                        p_default_value               => 'REGION_NAME',
                        p_parent_comp_prop_name       => l_property_name,
                        p_depending_on_comp_prop_name => l_property_name,
                        p_depending_on_condition_type => case when l_conditional_region_col_maps is not null then 'NOT_IN_LIST' else 'NOT_NULL' end,
                        p_depending_on_expression     => l_conditional_region_col_maps );
                end if;
                --
                if l_conditional_region_col_maps is not null or not l_unconditional_region_col_map then
                    store_component_prop (
                        p_component_type_id           => l_component_type_id,
                        p_property_name               => 'MAP_REGION_COLUMN_2' || case when p_property_name_postfix is not null then '_' || p_property_name_postfix end,
                        p_db_column                   => null,
                        p_is_required                 => true,
                        p_is_common                   => false,
                        p_default_value               => 'REGION_NAME',
                        p_parent_comp_prop_name       => l_property_name,
                        p_depending_on_comp_prop_name => l_property_name,
                        p_depending_on_condition_type => case when l_conditional_region_col_maps is not null then 'IN_LIST' else 'NOT_NULL' end,
                        p_depending_on_expression     => l_conditional_region_col_maps );
                end if;
                --
            end if;
        end store_map_comp_prop;
    begin
        store_map_comp_prop (
            p_level     => 1,
            p_parent_id => null );
        --
    end store_map_level_comp_props;
    --
    --
    procedure store_bg_color_properties (
        p_name_prefix           in varchar2 default null,
        p_display_group_name    in varchar2,
        p_property_id_type      in number,
        p_property_id_color     in number,
        p_property_id_fade_from in number,
        p_property_id_fade_to   in number,
        p_property_id_angle     in number )
    is
        c_name_prefix   constant varchar2(30) := case when p_name_prefix is not null then p_name_prefix || '_' end;
    begin
        store_property (
            p_id                 => p_property_id_type,
            p_name               => c_name_prefix || 'BACKGROUND_COLOR_TYPE',
            p_prompt             => 'Type',
            p_property_type      => 'SELECT LIST',
            p_db_column          => c_name_prefix || 'BACKGROUND_COLOR_TYPE',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a background color type for this chart.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id_type,
            p_display_value => 'Transparent',
            p_return_value  => 'Trans',
            p_help_text     => q'~Makes the chart background area transparent.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id_type,
            p_display_value => 'Solid Color',
            p_return_value  => 'Solid',
            p_help_text     => q'~Uses the specified background color for the chart.~' );
        --
        store_property_lov_values (
            p_property_id   => p_property_id_type,
            p_display_value => 'Gradient',
            p_return_value  => 'Gradient',
            p_help_text     => q'~Fades between the two specified background colors, along the specified angle.~' );
        --
        store_property (
            p_id                 => p_property_id_color,
            p_name               => c_name_prefix || 'BACKGROUND_COLOR',
            p_prompt             => 'Color',
            p_property_type      => 'COLOR',
            p_db_column          => c_name_prefix || 'BACKGROUND_COLOR',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~<p>Enter the color used for the background of this chart.</p>~' );
        --
        store_property (
            p_id                 => p_property_id_fade_from,
            p_name               => c_name_prefix || 'BACKGROUND_COLOR_1',
            p_prompt             => 'Background Color 1',
            p_property_type      => 'COLOR',
            p_db_column          => c_name_prefix || 'BACKGROUND_COLOR',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~<p>Enter the gradient color to fade from for the background of this chart.</p>~' );
        --
        store_property (
            p_id                 => p_property_id_fade_to,
            p_name               => c_name_prefix || 'BACKGROUND_COLOR_2',
            p_prompt             => 'Background Color 2',
            p_property_type      => 'COLOR',
            p_db_column          => c_name_prefix || 'BACKGROUND_COLOR_2',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~<p>Enter the gradient color to darken to for the background of this chart.</p>~' );
        --
        store_property (
            p_id                 => p_property_id_angle,
            p_name               => c_name_prefix || 'BACKGROUND_GRADIENT_ANGLE',
            p_prompt             => 'Gradient Angle',
            p_property_type      => 'INTEGER',
            p_db_column          => c_name_prefix || 'BACKGROUND_GRADIENT_ANGLE',
            p_display_length     => 4,
            p_min_value          => -360,
            p_max_value          => +360,
            p_unit               => c_unit_degrees,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Specify the angle in degrees for the background gradient. A value of 0 results in a horizontal gradient fading from left to right.~' );
        --
    end store_bg_color_properties;
    --
    --
    procedure store_bg_color_comp_props (
        p_name_prefix   in varchar2 default null )
    is
        c_name_prefix   constant varchar2(30) := case when p_name_prefix is not null then p_name_prefix || '_' end;
    begin
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => c_name_prefix || 'BACKGROUND_COLOR_TYPE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'Trans' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'BACKGROUND_COLOR',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => '#ffffff',
            p_depending_on_comp_prop_name => c_name_prefix || 'BACKGROUND_COLOR_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Solid' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'BACKGROUND_COLOR_1',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => '#ffffff',
            p_depending_on_comp_prop_name => c_name_prefix || 'BACKGROUND_COLOR_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Gradient' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'BACKGROUND_COLOR_2',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => '#c7c7cc',
            p_depending_on_comp_prop_name => c_name_prefix || 'BACKGROUND_COLOR_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Gradient' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => c_name_prefix || 'BACKGROUND_GRADIENT_ANGLE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 0,
            p_depending_on_comp_prop_name => c_name_prefix || 'BACKGROUND_COLOR_TYPE',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'Gradient' );
         --
    end store_bg_color_comp_props;
    --
    --
    procedure store_legend_comp_props (
        p_show_legend_dep_on_cp_name    in varchar2 default null,
        p_show_legend_dep_on_cond_type  in varchar2 default null,
        p_show_legend_dep_on_expr       in varchar2 default null )
    is
    begin
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SHOW_LEGEND',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => true,
            p_default_value               => 'N',
            p_depending_on_comp_prop_name => p_show_legend_dep_on_cp_name,
            p_depending_on_condition_type => p_show_legend_dep_on_cond_type,
            p_depending_on_expression     => p_show_legend_dep_on_expr );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LEGEND_TITLE',
            p_db_column                   => null,
            p_is_required                 => false,
            p_is_common                   => true,
            p_depending_on_comp_prop_name => 'SHOW_LEGEND',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'N' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'LEGEND_ELEMENT_ORIENTATION',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'V',
            p_depending_on_comp_prop_name => 'SHOW_LEGEND',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'N' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'SHOW_LEGEND_BACKGROUND',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Y',
            p_depending_on_comp_prop_name => 'SHOW_LEGEND',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'N' );
        --
        store_chart_font_comp_props (
            p_font_group                  => 'LEGEND_FONT',
            p_depending_on_comp_prop_name => 'SHOW_LEGEND',
            p_depending_on_condition_type => 'NOT_EQUALS',
            p_depending_on_expression     => 'N' );
    end store_legend_comp_props;
    --
    --
    procedure store_print_font_properties (
        p_font_group                in varchar2,
        p_display_group_name        in varchar2,
        p_db_column_prefix          in varchar2,
        p_property_id_font          in number,
        p_property_id_font_weight   in number,
        p_property_id_font_size     in number,
        p_property_id_font_color    in number,
        p_property_id_font_bg_color in number default null )
    is
    begin
        --
        l_property_id := p_property_id_font;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FONT_FAMILY',
            p_prompt             => 'Font',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_db_column_prefix || '_FONT_FAMILY',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a font face for this component.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Helvetica',
            p_return_value  => 'Helvetica' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Times',
            p_return_value  => 'Times' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Courier',
            p_return_value  => 'Courier' );
        --
        l_property_id := p_property_id_font_weight;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FONT_WEIGHT',
            p_prompt             => 'Font Weight',
            p_property_type      => 'SELECT LIST',
            p_db_column          => p_db_column_prefix || '_FONT_WEIGHT',
            p_display_group_name => p_display_group_name,
            p_lov_type           => 'STATIC',
            p_help_text          => q'~Select a font weight for this component.~' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Normal',
            p_return_value  => 'normal' );
        --
        store_property_lov_values (
            p_property_id   => l_property_id,
            p_display_value => 'Bold',
            p_return_value  => 'bold' );
        --
        l_property_id := p_property_id_font_size;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FONT_SIZE',
            p_prompt             => 'Font Size',
            p_property_type      => 'INTEGER',
            p_db_column          => p_db_column_prefix || '_FONT_SIZE',
            p_display_length     => 4,
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~Enter a font size for this component.~' );
        --
        l_property_id := p_property_id_font_color;
        store_property (
            p_id                 => l_property_id,
            p_name               => p_font_group || '_FONT_COLOR',
            p_prompt             => 'Font Color',
            p_property_type      => 'COLOR',
            p_db_column          => p_db_column_prefix || '_FONT_COLOR',
            p_display_group_name => p_display_group_name,
            p_help_text          => q'~<p>Enter the color used to display this component.</p>~' );
        --
        if p_property_id_font_bg_color is not null then
            l_property_id := p_property_id_font_bg_color;
            store_property (
                p_id                 => l_property_id,
                p_name               => p_font_group || '_BG_COLOR',
                p_prompt             => 'Background Color',
                p_property_type      => 'COLOR',
                p_db_column          => p_db_column_prefix || '_BG_COLOR',
                p_display_group_name => p_display_group_name,
                p_help_text          => q'~<p>Enter the color used to display the background for this component.</p>~' );
        end if;
        --
    end store_print_font_properties;
    --
    procedure store_print_font_comp_props (
        p_font_group                  in varchar2,
        p_default_size                in varchar2,
        p_has_bg_color                in boolean  default false,
        p_default_bg_color            in varchar2 default null,
        p_depending_on_comp_prop_name in varchar2 default null,
        p_depending_on_condition_type in varchar2 default null,
        p_depending_on_expression     in varchar2 default null )
    is
    begin
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FONT_FAMILY',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'Helvetica',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FONT_WEIGHT',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'normal',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FONT_SIZE',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => p_default_size,
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => p_font_group || '_FONT_COLOR',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => '#000000',
            p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
            p_depending_on_condition_type => p_depending_on_condition_type,
            p_depending_on_expression     => p_depending_on_expression );
        --
        if p_has_bg_color then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => p_font_group || '_BG_COLOR',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_default_value               => p_default_bg_color,
                p_depending_on_comp_prop_name => p_depending_on_comp_prop_name,
                p_depending_on_condition_type => p_depending_on_condition_type,
                p_depending_on_expression     => p_depending_on_expression );
        end if;
        --
    end store_print_font_comp_props;
    --
    --
    procedure store_print_comp_props (
        p_component_type_id in number )
    is
    begin
        --
        if p_component_type_id in ( c_comp_type_classic_rpt_print, c_comp_type_tab_form_print ) then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'PRINT_LINK_TEXT',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false,
                p_default_value     => '#PRINT_LINK_TEXT#' );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'PRINT_OUTPUT_FORMAT',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => true,
                p_default_value     => 'PDF',
                p_null_text         => 'Derive from Item');
            --
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PRINT_OUTPUT_FORMAT_ITEM',
                p_db_column                   => null,
                p_is_required                 => true,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'PRINT_OUTPUT_FORMAT',
                p_depending_on_condition_type => 'NULL' );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'REPORT_LAYOUT',
                p_db_column         => null,
                p_is_required       => false,
                p_is_common         => false,
                p_null_text         => 'Default Report Layout' );
        end if;
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PRINT_RESPONSE_HEADER',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'APEX' );
        --
        store_component_prop (
            p_component_type_id           => l_component_type_id,
            p_property_name               => 'PRINT_VIEW_FILE_AS',
            p_db_column                   => null,
            p_is_required                 => true,
            p_is_common                   => false,
            p_default_value               => 'ATTACHMENT',
            p_depending_on_comp_prop_name => 'PRINT_RESPONSE_HEADER',
            p_depending_on_condition_type => 'EQUALS',
            p_depending_on_expression     => 'APEX' );
            --
        if p_component_type_id in ( c_comp_type_classic_rpt_print, c_comp_type_tab_form_print ) then
            store_component_prop (
                p_component_type_id           => l_component_type_id,
                p_property_name               => 'PRINT_FILE_NAME',
                p_db_column                   => null,
                p_is_required                 => false,
                p_is_common                   => false,
                p_depending_on_comp_prop_name => 'PRINT_RESPONSE_HEADER',
                p_depending_on_condition_type => 'EQUALS',
                p_depending_on_expression     => 'APEX' );
            --
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'LINK_EXAMPLE',
                p_db_column         => 'PRINT_EXAMPLE_URL',
                p_is_required       => false,
                p_is_common         => false,
                p_help_text         => q'~<p>Report regions can be printed using the standard print link, shown below the report region, or using a button. If you want to use a button, remove the link label and create a button on your page, using the URL shown in Print URL as the button target.</p>
<p>Using buttons to print report regions enables you to set session state. This is useful if you are planning to support printing to several different output formats (Word, Excel, PDF, and so on) and want to display a button, link, or image for each option. For this implementation, use the output format derived from item option and include the item name and value in your Print URL.</p>~' );
        end if;
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_SIZE',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'LETTER',
            p_comment_text      => '$$$ default based on current language' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_ORIENTATION',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => true,
            p_default_value     => 'HORIZONTAL' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_UNITS',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'INCHES',
            p_comment_text      => '$$$ default based on current language' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_WIDTH',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => '11',
            p_comment_text      => '$$$ default based on current language' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_HEIGHT',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => '8.5',
            p_comment_text      => '$$$ default based on current language' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_BORDER_WIDTH',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false,
            p_default_value     => '.5' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_BORDER_COLOR',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
        store_print_font_comp_props (
            p_font_group   => 'PRINT_PAGE_HEADER',
            p_default_size => 12 );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_HEADER_ALIGNMENT',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'CENTER' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_HEADER_TEXT',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => true );
        --
        store_print_font_comp_props (
            p_font_group       => 'PRINT_COLUMN_HEADING',
            p_default_size     => 10,
            p_has_bg_color     => true,
            p_default_bg_color => '#9bafde' );
        --
        store_print_font_comp_props (
            p_font_group       => 'PRINT_COLUMN',
            p_default_size     => 10,
            p_has_bg_color     => true,
            p_default_bg_color => '#efefef' );
        --
        if p_component_type_id in ( c_comp_type_classic_rpt_print, c_comp_type_tab_form_print ) then
            store_component_prop (
                p_component_type_id => l_component_type_id,
                p_property_name     => 'PRINT_COLUMN_WIDTH_UNITS',
                p_db_column         => null,
                p_is_required       => true,
                p_is_common         => false,
                p_default_value     => 'PERCENTAGE' );
        end if;
        --
        store_print_font_comp_props (
            p_font_group   => 'PRINT_PAGE_FOOTER',
            p_default_size => 12 );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_FOOTER_ALIGNMENT',
            p_db_column         => null,
            p_is_required       => true,
            p_is_common         => false,
            p_default_value     => 'CENTER' );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_PAGE_FOOTER_TEXT',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
        store_component_prop (
            p_component_type_id => l_component_type_id,
            p_property_name     => 'PRINT_SERVER_OVERWRITE',
            p_db_column         => null,
            p_is_required       => false,
            p_is_common         => false );
        --
    end store_print_comp_props;
    --
begin
    sys.dbms_output.enable( 1000000 );

    ------------------------------------------------------------------------
    -- Delete all configuration first
    ------------------------------------------------------------------------
    delete from wwv_pe_properties;
    delete from wwv_pe_component_types;
    delete from wwv_pe_display_groups;


    ------------------------------------------------------------------------
    -- Component Types
    ------------------------------------------------------------------------
    store_component_type (
        p_id                        => c_comp_type_application,
        p_name                      => 'APPLICATION',
        p_singular_title            => 'Application',
        p_plural_title              => 'Applications',
        p_table_name                => 'WWV_FLOWS',
        p_display_column            => 'ID' );
    --
    store_component_type (
        p_id                        => c_comp_type_remote_database,
        p_name                      => 'REMOTE_DATABASE',
        p_singular_title            => 'Remote Database',
        p_plural_title              => 'Remote Databases',
        p_table_name                => 'WWV_REMOTE_SERVERS',
        p_display_column            => 'NAME',
        p_where_clause              => q'~server_type = 'REMOTE_SQL' ~',
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null );

    -- Theme related component types
    store_component_type (
        p_id                        => c_comp_type_theme,
        p_name                      => 'THEME',
        p_singular_title            => 'Theme',
        p_plural_title              => 'Themes',
        p_table_name                => 'WWV_FLOW_THEMES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'THEME_NAME' );

    -- Templates
    store_component_type (
        p_id                        => c_comp_type_page_template,
        p_name                      => 'PAGE_TEMPLATE',
        p_singular_title            => 'Page Template',
        p_plural_title              => 'Page Templates',
        p_table_name                => 'WWV_FLOW_TEMPLATES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:162:%session%::NO:162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4307:%session%::NO:4307:F4000_P4307_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:568:%session%::NO:568:FB_FLOW_ID,P568_FROM_TEMPLATE_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_region_template,
        p_name                      => 'REGION_TEMPLATE',
        p_singular_title            => 'Region Template',
        p_plural_title              => 'Region Templates',
        p_table_name                => 'WWV_FLOW_PAGE_PLUG_TEMPLATES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'PAGE_PLUG_TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%::NO:162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4653:%session%::NO:4653:F4000_P4653_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:538:%session%::NO:538:FB_FLOW_ID,P538_FROM_TEMPLATE_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_field_template,
        p_name                      => 'FIELD_TEMPLATE',
        p_singular_title            => 'Field Template',
        p_plural_title              => 'Field Templates',
        p_table_name                => 'WWV_FLOW_FIELD_TEMPLATES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%::NO:162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:85:%session%::NO:85:F4000_P85_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:574:%session%::NO:574:FB_FLOW_ID,P574_FROM_TEMPLATE_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_button_template,
        p_name                      => 'BUTTON_TEMPLATE',
        p_singular_title            => 'Button Template',
        p_plural_title              => 'Button Templates',
        p_table_name                => 'WWV_FLOW_BUTTON_TEMPLATES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%::NO:162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:204:%session%::NO:204:F4000_P204_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:571:%session%::NO:571:FB_FLOW_ID,P571_FROM_TEMPLATE_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_list_template,
        p_name                      => 'LIST_TEMPLATE',
        p_singular_title            => 'List Template',
        p_plural_title              => 'List Templates',
        p_table_name                => 'WWV_FLOW_LIST_TEMPLATES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'LIST_TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%::NO:162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4655:%session%::NO:4655:F4000_P4655_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:573:%session%::NO:573:FB_FLOW_ID,P573_FROM_TEMPLATE_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_bc_template,
        p_name                      => 'BREADCRUMB_TEMPLATE',
        p_singular_title            => 'Breadcrumb Template',
        p_plural_title              => 'Breadcrumb Templates',
        p_table_name                => 'WWV_FLOW_MENU_TEMPLATES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:162:%session%::NO:162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:289:%session%::NO:289:F4000_P289_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:636:%session%::NO:636,596:FB_FLOW_ID,P636_FROM_TEMPLATE_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_calendar_template,
        p_name                      => 'CALENDAR_TEMPLATE',
        p_singular_title            => 'Legacy Calendar Template',
        p_plural_title              => 'Legacy Calendar Templates',
        p_table_name                => 'WWV_FLOW_CAL_TEMPLATES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:162:%session%::NO:162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:697:%session%::NO:697:F4000_P697_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:564:%session%::NO:564:FB_FLOW_ID,P564_FROM_TEMPLATE_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_report_template,
        p_name                      => 'REPORT_TEMPLATE',
        p_singular_title            => 'Classic Report Template',
        p_plural_title              => 'Classic Report Templates',
        p_table_name                => 'WWV_FLOW_ROW_TEMPLATES',
        p_parent_component_type_id  => c_comp_type_theme,
        p_parent_fk_column          => 'THEME_ID',
        p_display_column            => 'ROW_TEMPLATE_NAME',
        p_create_url                => 'f?p=4000:162:%session%::NO:162:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:258:%session%::NO:258:F4000_P258_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:569:%session%::NO:569:FB_FLOW_ID,P569_FROM_TEMPLATE_ID:%application_id%,%pk_value%' );

    -- Shared Component related component types
    store_component_type (
        p_id                        => c_comp_type_app_item,
        p_name                      => 'APP_ITEM',
        p_singular_title            => 'Application Item',
        p_plural_title              => 'Application Items',
        p_table_name                => 'WWV_FLOW_ITEMS',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:4303:%session%::NO::F4000_P4303_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_app_computation,
        p_name                      => 'APPLICATION_COMPUTATION',
        p_singular_title            => 'Application Computation',
        p_plural_title              => 'Application Computations',
        p_table_name                => 'WWV_FLOW_COMPUTATIONS',
        p_view_name                 => 'APEX_APPLICATION_COMPUTATIONS',
        p_parent_component_type_id  => C_COMP_TYPE_APPLICATION,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'COMPUTATION_ITEM',
        p_edit_url                  => 'f?p=4000:4304:%session%::::F4000_P4304_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_app_process,
        p_name                      => 'APPLICATION_PROCESS',
        p_singular_title            => 'Application Process',
        p_plural_title              => 'Application Processes',
        p_table_name                => 'WWV_FLOW_PROCESSING',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'PROCESS_NAME',
        p_edit_url                  => 'f?p=4000:4309:%session%::::F4000_P4309_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_build_option,
        p_name                      => 'BUILD_OPTION',
        p_singular_title            => 'Build Option',
        p_plural_title              => 'Build Options',
        p_table_name                => 'WWV_FLOW_PATCHES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'PATCH_NAME',
        p_create_url                => 'f?p=4000:4911:%session%::NO:4911:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4911:%session%::NO:4911:F4000_P4911_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_authentication,
        p_name                      => 'AUTHENTICATION',
        p_singular_title            => 'Authentication',
        p_plural_title              => 'Authentications',
        p_table_name                => 'WWV_FLOW_AUTHENTICATIONS',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
/*
        p_plugin_type               => 'AUTHENTICATION TYPE',
        p_plugin_column             => 'SCHEME_TYPE',
*/
        p_edit_url                  => 'f?p=4000:4495:%session%::::P4495_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_authorization,
        p_name                      => 'AUTHORIZATION',
        p_singular_title            => 'Authorization',
        p_plural_title              => 'Authorizations',
        p_table_name                => 'WWV_FLOW_SECURITY_SCHEMES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
/*
        p_plugin_type               => 'AUTHORIZATION TYPE',
        p_plugin_column             => 'SCHEME_TYPE',
*/
        p_create_url                => 'f?p=4000:184:%session%::::FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4008:%session%::NO::F4000_P4008_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:493:%session%::NO:493:FB_FLOW_ID,P493_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_module,
        p_name                      => 'WEB_SRC_MODULE',
        p_singular_title            => 'Web Source Module',
        p_plural_title              => 'Web Source Modules',
        p_table_name                => 'WWV_FLOW_WEB_SRC_MODULES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_mod_param,
        p_name                      => 'WEB_SRC_MODULE_PARAM',
        p_singular_title            => 'Web Source Module Parameter',
        p_plural_title              => 'Web Source Module Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_PARAMS',
        p_parent_component_type_id  => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID',
        p_display_column            => 'NAME',
        p_where_clause              => 'web_src_operation_id is null',
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_operation,
        p_name                      => 'WEB_SRC_OPERATION',
        p_singular_title            => 'Web Source Operation',
        p_plural_title              => 'Web Source Operations',
        p_table_name                => 'WWV_FLOW_WEB_SRC_OPERATIONS',
        p_parent_component_type_id  => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID',
        p_display_column            => 'OPERATION',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_oper_param,
        p_name                      => 'WEB_SRC_OPER_PARAM',
        p_singular_title            => 'Web Source Operation Parameter',
        p_plural_title              => 'Web Source Operation Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_PARAMS',
        p_parent_component_type_id  => c_comp_type_web_src_operation,
        p_parent_fk_column          => 'WEB_SRC_OPERATION_ID',
        p_display_column            => 'NAME',
        p_where_clause              => 'web_src_operation_id is not null',
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_web_src_query,
        p_name                      => 'WEB_SRC_QUERY',
        p_singular_title            => 'Web Source Query',
        p_plural_title              => 'Web Source Query',
        p_table_name                => 'WWV_FLOW_WEB_SRC_MODULES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~exists( select 1 from wwv_flow_web_src_operations where web_src_module_id=wwv_flow_web_src_modules.id and database_operation = 'FETCH_COLLECTION') ~',
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null );
    --
    -- Helper component type to get all parameters of a web src module (incl. operation parameters)
    -- This is needed for wwv_flow_web_src_comp_params
    store_component_type (
        p_id                        => c_comp_type_web_src_param,
        p_name                      => 'WEB_SRC_PARAM',
        p_singular_title            => 'Web Source Parameter',
        p_plural_title              => 'Web Source Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_PARAMS',
        p_parent_component_type_id  => c_comp_type_web_src_module,
        p_parent_fk_column          => 'WEB_SRC_MODULE_ID',
        p_display_column            => 'NAME',
        p_where_clause              => null,
        p_create_url                => null,
        p_edit_url                  => null,
        p_copy_url                  => null );
    --
    store_component_type (
        p_id                        => c_comp_type_breadcrumb,
        p_name                      => 'BREADCRUMB',
        p_singular_title            => 'Breadcrumb',
        p_plural_title              => 'Breadcrumbs',
        p_table_name                => 'WWV_FLOW_MENUS',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:288:%session%::NO:288:FB_FLOW_ID:%application_id%',
        p_copy_url                  => '',
        p_edit_url                  => 'f?p=4000:288:%session%::NO:RP,288:F4000_P288_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_list,
        p_name                      => 'LIST',
        p_singular_title            => 'List',
        p_plural_title              => 'Lists',
        p_table_name                => 'WWV_FLOW_LISTS',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:105:%session%::NO:105,427,440,464,529,734:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4051:%session%::NO:RP:F4000_P4051_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:602:%session%::NO:602,658,659,663:FB_FLOW_ID,P602_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_lov,
        p_name                      => 'LOV',
        p_singular_title            => 'List of Values',
        p_plural_title              => 'Lists of Values',
        p_table_name                => 'WWV_FLOW_LISTS_OF_VALUES$',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'LOV_NAME',
        p_create_url                => 'f?p=4000:137:%session%::NO:4004,4007,4014,137,138,139:FB_FLOW_ID:%application_id%',
        p_edit_url                  => 'f?p=4000:4111:%session%::NO:4111:F4000_P4111_ID,FB_FLOW_ID:%pk_value%,%application_id%',
        p_copy_url                  => 'f?p=4000:603:%session%::NO:603:FB_FLOW_ID,P603_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref,
        p_name                      => 'WEB_SERVICE_REFERENCE',
        p_singular_title            => 'Web Service Reference',
        p_plural_title              => 'Web Service References',
        p_table_name                => 'WWV_FLOW_SHARED_WEB_SERVICES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:870:%session%::NO:550,555,560,565,570,575,580,585,595,870,871,872,873,874,875,REST_INPUT_PARMS,REST_OUTPUT_PARMS,REST_HTTP_HEADERS:FB_FLOW_ID:%application_id%',
        p_copy_url                  => '',
        p_edit_url                  => '' ); /* web services do have different edit pages */
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_operations,
        p_name                      => 'WEB_SERVICE_REFERENCE_OPERATION',
        p_singular_title            => 'Web Service Operation',
        p_plural_title              => 'Web Service Operations',
        p_table_name                => 'WWV_FLOW_WS_OPERATIONS_DEV',
        p_parent_component_type_id  => c_comp_type_ws_ref,
        p_parent_fk_column          => 'WS_ID',
        p_display_column            => 'FULL_NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_oper_p_i,
        p_name                      => 'WEB_SERVICE_REF_OPER_PARAM_I',
        p_singular_title            => 'In Parameter',
        p_plural_title              => 'In Parameters',
        p_table_name                => 'WWV_FLOW_WS_OPER_PARAM_DEV',
        p_parent_component_type_id  => c_comp_type_ws_ref_operations,
        p_parent_fk_column          => 'WS_OPERS_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~input_or_output = 'I' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_oper_p_o,
        p_name                      => 'WEB_SERVICE_REF_OPER_PARAM_O',
        p_singular_title            => 'Out Parameter',
        p_plural_title              => 'Out Parameters',
        p_table_name                => 'WWV_FLOW_WS_OPER_PARAM_DEV',
        p_parent_component_type_id  => c_comp_type_ws_ref_operations,
        p_parent_fk_column          => 'WS_OPERS_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~input_or_output = 'O' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_oper_p_a,
        p_name                      => 'WEB_SERVICE_REF_OPER_PARAM_A',
        p_singular_title            => 'Basic Authentication Parameter',
        p_plural_title              => 'Basic Authentication Parameters',
        p_table_name                => 'WWV_FLOW_WS_OPER_PARAM_DEV',
        p_parent_component_type_id  => c_comp_type_ws_ref_operations,
        p_parent_fk_column          => 'WS_OPERS_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~input_or_output = 'A' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_ws_ref_oper_p_h,
        p_name                      => 'WEB_SERVICE_REF_OPER_PARAM_H',
        p_singular_title            => 'HTTP Header Parameter',
        p_plural_title              => 'HTTP Header Parameters',
        p_table_name                => 'WWV_FLOW_WS_OPER_PARAM_DEV',
        p_parent_component_type_id  => c_comp_type_ws_ref_operations,
        p_parent_fk_column          => 'WS_OPERS_ID',
        p_display_column            => 'NAME',
        p_where_clause              => q'~input_or_output = 'H' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_data_load_table,
        p_name                      => 'DATA_LOAD_TABLE',
        p_singular_title            => 'Data Load Table',
        p_plural_title              => 'Data Load Tables',
        p_table_name                => 'WWV_FLOW_LOAD_TABLES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_edit_url                  => 'f?p=4000:1801:%session%::NO:1801:P1801_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_tab_set,
        p_name                      => 'TAB SET',
        p_singular_title            => 'Standard Tab Set',
        p_plural_title              => 'Standard Tab Sets',
        p_table_name                => 'WWV_FLOW_TABSET_VIEW',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'D',
        p_edit_url                  => 'f?p=4000:643:%session%::NO:643:FB_FLOW_ID:%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_report_layout,
        p_name                      => 'REPORT LAYOUT',
        p_singular_title            => 'Report Layout',
        p_plural_title              => 'Report Layouts',
        p_table_name                => 'WWV_FLOW_REPORT_LAYOUTS',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'REPORT_LAYOUT_NAME',
        p_edit_url                  => 'f?p=4000:4111:%session%::NO:4111:F4000_P4111_ID,FB_FLOW_ID:%pk_value%,%application_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_user_interface,
        p_name                      => 'USER_INTERFACE',
        p_singular_title            => 'User Interface',
        p_plural_title              => 'User Interfaces',
        p_table_name                => 'WWV_FLOW_USER_INTERFACES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'DISPLAY_NAME',
        p_edit_url                  => 'f?p=4000:677:%session%::NO:677:P677_ID,FB_FLOW_ID:%pk_value%,%application_id%' );

    -- Misc component types
    store_component_type (
        p_id                        => c_comp_type_page_group,
        p_name                      => 'PAGE_GROUP',
        p_singular_title            => 'Page Group',
        p_plural_title              => 'Page Groups',
        p_table_name                => 'WWV_FLOW_PAGE_GROUPS',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'GROUP_NAME' );
    --
    -- Page related component types
    --
    store_component_type (
        p_id                        => c_comp_type_page,
        p_name                      => 'PAGE',
        p_singular_title            => 'Page',
        p_plural_title              => 'Pages',
        p_table_name                => 'WWV_FLOW_STEPS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGES',
        p_parent_component_type_id  => c_comp_type_application,
        p_parent_fk_column          => 'FLOW_ID',
        p_display_column            => 'NAME',
        p_create_url                => 'f?p=4000:259:%session%::NO:181,259,380,311:FB_FLOW_ID:%application_id%',
        p_copy_url                  => 'f?p=4000:618:%session%::NO:618,301,302,305,308,309:FB_FLOW_ID:%application_id%' );

    -- Page Rendering
    store_component_type (
        p_id                        => c_comp_type_region,
        p_name                      => 'REGION',
        p_singular_title            => 'Region',
        p_plural_title              => 'Regions',
        p_table_name                => 'WWV_FLOW_PAGE_PLUGS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_REGIONS',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'PAGE_ID',
        p_page_id_column            => 'PAGE_ID',
        p_plugin_type               => 'REGION TYPE',
        p_plugin_column             => 'PLUG_SOURCE_TYPE',
        p_display_column            => 'PLUG_NAME',
        p_copy_url                  => 'f?p=4000:194:%session%::NO:194:FB_FLOW_ID,F4000_P194_PLUG_ID_FROM,F4000_P194_COPY_FROM_PAGE_ID:%application_id%,%pk_value%,%page_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_item,
        p_name                      => 'PAGE_ITEM',
        p_singular_title            => 'Page Item',
        p_plural_title              => 'Page Items',
        p_table_name                => 'WWV_FLOW_STEP_ITEMS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_ITEMS',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'ITEM_PLUG_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'NAME',
        p_plugin_type               => 'ITEM TYPE',
        p_plugin_column             => 'DISPLAY_AS',
        p_copy_url                  => 'f?p=4000:171:%session%::NO:171,172:FB_FLOW_ID,F4000_P171_COPY_FROM_ID,F4000_P171_COPY_FROM_PAGE_ID:%application_id%,%pk_value%,%page_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_button,
        p_name                      => 'BUTTON',
        p_singular_title            => 'Button',
        p_plural_title              => 'Buttons',
        p_table_name                => 'WWV_FLOW_STEP_BUTTONS',
        p_view_name                 => 'APEX_APPLICATION_PAGE_BUTTONS',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'BUTTON_PLUG_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'BUTTON_NAME',
        p_copy_url                  => 'f?p=4000:231:%session%::NO:231,191:FB_FLOW_ID,F4000_P231_COPY_FROM_ID,F4000_P231_COPY_FROM_PAGE_ID:%application_id%,%pk_value%,%page_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_da_event,
        p_name                      => 'DYNAMIC_ACTION_EVENT',
        p_singular_title            => 'Dynamic Action',
        p_plural_title              => 'Dynamic Actions',
        p_table_name                => 'WWV_FLOW_PAGE_DA_EVENTS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_DA',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'PAGE_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME',
        p_copy_url                  => 'f?p=4000:796:%session%::NO:128,796,797:FB_FLOW_ID,F4000_P796_COPY_FROM_ID,F4000_P796_COPY_FROM_PAGE_ID:%application_id%,%pk_value%,%page_id%' );
    --
    store_component_type (
        p_id                        => c_comp_type_da_action,
        p_name                      => 'DYNAMIC_ACTION_ACTION',
        p_singular_title            => 'Action',
        p_plural_title              => 'Actions',
        p_table_name                => 'WWV_FLOW_PAGE_DA_ACTIONS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_DA_ACTS',
        p_parent_component_type_id  => c_comp_type_da_event,
        p_parent_fk_column          => 'EVENT_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'ACTION',
        p_plugin_type               => 'DYNAMIC ACTION',
        p_plugin_column             => 'ACTION' );

    -- Page Processing
    store_component_type (
        p_id                        => c_comp_type_validation,
        p_name                      => 'VALIDATION',
        p_singular_title            => 'Validation',
        p_plural_title              => 'Validations',
        p_table_name                => 'WWV_FLOW_STEP_VALIDATIONS',
        p_view_name                 => 'APEX_APPLICATION_PAGE_VAL',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'VALIDATION_NAME',
        p_copy_url                  => 'f?p=4000:583:%session%::NO:583,596:FB_FLOW_ID,P583_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_computation,
        p_name                      => 'PAGE_COMPUTATION',
        p_singular_title            => 'Computation',
        p_plural_title              => 'Computations',
        p_table_name                => 'WWV_FLOW_STEP_COMPUTATIONS',
        p_view_name                 => 'APEX_APPLICATION_PAGE_COMP',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'COMPUTATION_ITEM',
        p_copy_url                  => 'f?p=4000:592:%session%::NO:592,597:FB_FLOW_ID,P592_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_process,
        p_name                      => 'PAGE_PROCESS',
        p_singular_title            => 'Process',
        p_plural_title              => 'Processes',
        p_table_name                => 'WWV_FLOW_STEP_PROCESSING',
        p_view_name                 => 'APEX_APPLICATION_PAGE_PROC',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'PROCESS_NAME',
        p_plugin_type               => 'PROCESS TYPE',
        p_plugin_column             => 'PROCESS_TYPE',
        p_copy_url                  => 'f?p=4000:590:%session%::NO:590,645:FB_FLOW_ID,P590_ID:%application_id%,%pk_value%' );
    --
    store_component_type (
        p_id                        => c_comp_type_branch,
        p_name                      => 'BRANCH',
        p_singular_title            => 'Branch',
        p_plural_title              => 'Branches',
        p_table_name                => 'WWV_FLOW_STEP_BRANCHES_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_BRANCHES',
        p_parent_component_type_id  => c_comp_type_page,
        p_parent_fk_column          => 'FLOW_STEP_ID',
        p_page_id_column            => 'FLOW_STEP_ID',
        p_display_column            => 'BRANCH_NAME',
        p_copy_url                  => 'f?p=4000:587:%session%::NO:587,685:FB_FLOW_ID,P587_ID:%application_id%,%pk_value%' );
    --
    -- Region type specific component types
    --
    -- Region Plug-in Attributes
    store_component_type (
        p_id                       => c_comp_type_region_plugin_attr,
        p_name                     => 'REGION_PLUGIN_ATTRIBUTES',
        p_singular_title           => 'Attributes',
        p_plural_title             => 'Attributes',
        p_table_name               => 'WWV_FLOW_REGION_PLUGIN_DEV',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_plugin_type              => 'REGION TYPE',
        p_plugin_column            => 'PLUG_SOURCE_TYPE',
        p_display_column           => null );

    -- Interactive Report
    store_component_type (
        p_id                        => c_comp_type_ir_attributes,
        p_name                      => 'IR_ATTRIBUTES',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_WORKSHEETS',
        p_view_name                 => 'APEX_APPLICATION_PAGE_IR',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_saved_report,
        p_name                      => 'IR_SAVED_REPORT',
        p_singular_title            => 'Saved Report',
        p_plural_title              => 'Saved Reports',
        p_table_name                => 'WWV_FLOW_WORKSHEET_RPTS_DEV',
        p_parent_component_type_id  => c_comp_type_ir_attributes,
        p_parent_fk_column          => 'WORKSHEET_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME',
        p_where_clause              => 'visibility <> ''PRIVATE''' );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_column_group,
        p_name                      => 'IR_COLUMN_GROUP',
        p_singular_title            => 'Column Group',
        p_plural_title              => 'Column Groups',
        p_table_name                => 'WWV_FLOW_WORKSHEET_COL_GRP_DEV',
        p_parent_component_type_id  => c_comp_type_ir_attributes,
        p_parent_fk_column          => 'WORKSHEET_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_column,
        p_name                      => 'IR_COLUMN',
        p_singular_title            => 'Column',
        p_plural_title              => 'Columns',
        p_table_name                => 'WWV_FLOW_WORKSHEET_COL_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_IR_COL',
        p_parent_component_type_id  => c_comp_type_ir_attributes,
        p_parent_fk_column          => 'WORKSHEET_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'DB_COLUMN_NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_ir_print,
        p_name                      => 'IR_PRINT_ATTR',
        p_singular_title            => 'Printing',
        p_plural_title              => 'Printing',
        p_table_name                => 'WWV_FLOW_REGION_PRINT_DEV',
        p_pk_column                 => 'WORKSHEET_ID',
        p_parent_component_type_id  => c_comp_type_ir_attributes,
        p_parent_fk_column          => 'WORKSHEET_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null,
        p_where_clause              => q'~plug_source_type = 'NATIVE_IR' and ( download_formats like '%XLS%' or download_formats like '%PDF%' or download_formats like '%RTF%') ~' );

    -- Interactive grid
    store_component_type (
        p_id                        => c_comp_type_ig_attributes,
        p_name                      => 'IG_ATTRIBUTES',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_INTERACTIVE_GRIDS',
        p_view_name                 => 'APEX_APPLICATION_PAGE_IG',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_ig_column_group,
        p_name                      => 'IG_COLUMN_GROUP',
        p_singular_title            => 'Column Group',
        p_plural_title              => 'Column Groups',
        p_table_name                => 'WWV_FLOW_REGION_COLUMN_GROUPS',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'HEADING' );
    --
    store_component_type (
        p_id                        => c_comp_type_ig_column,
        p_name                      => 'IG_COLUMN',
        p_singular_title            => 'Column',
        p_plural_title              => 'Columns',
        p_table_name                => 'WWV_FLOW_IG_COLUMNS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_IG_COL',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_plugin_type               => 'ITEM TYPE',
        p_plugin_column             => 'ITEM_TYPE',
        p_display_column            => 'NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_ig_print,
        p_name                      => 'IG_PRINT_ATTR',
        p_singular_title            => 'Printing',
        p_plural_title              => 'Printing',
        p_table_name                => 'WWV_FLOW_REGION_PRINT_DEV',
        p_pk_column                 => 'REGION_ID',
        p_parent_component_type_id  => c_comp_type_ig_attributes,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null,
        p_where_clause              => q'~plug_source_type = 'NATIVE_IG' and ( download_formats like '%XLS%' or download_formats like '%PDF%' or download_formats like '%RTF%') ~' );

    -- Web Service
    store_component_type (
        p_id                        => c_comp_type_page_proc_ws_p_i,
        p_name                      => 'PAGE_PROCESS_WS_PARAM_IN',
        p_singular_title            => 'In Parameter',
        p_plural_title              => 'In Parameters',
        p_table_name                => 'WWV_FLOW_PAGE_PROC_WS_PARM_DEV',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'PARAMETER_NAME',
        p_where_clause              => q'~parameter_type in ( 'I', 'H' ) ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_proc_ws_p_o,
        p_name                      => 'PAGE_PROCESS_WS_PARAM_OUT',
        p_singular_title            => 'Out Parameter',
        p_plural_title              => 'Out Parameters',
        p_table_name                => 'WWV_FLOW_PAGE_PROC_WS_PARM_DEV',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'PARAMETER_NAME',
        p_where_clause              => q'~parameter_type = 'O' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_page_proc_ws_p_a,
        p_name                      => 'PAGE_PROCESS_WS_PARAM_AUTH',
        p_singular_title            => 'Basic Authentication Parameter',
        p_plural_title              => 'Basic Authentication Parameters',
        p_table_name                => 'WWV_FLOW_PAGE_PROC_WS_PARM_DEV',
        p_parent_component_type_id  => c_comp_type_page_process,
        p_parent_fk_column          => 'PROCESS_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'PARAMETER_NAME',
        p_where_clause              => q'~parameter_type = 'A' ~' );
    --
    store_component_type (
        p_id                        => c_comp_type_region_ws_param,
        p_name                      => 'REGION_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_COMP_PARAMS',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'PAGE_PLUG_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );

    -- Map Charts
    store_component_type (
        p_id                        => c_comp_type_map_chart,
        p_name                      => 'MAP_CHART',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_CHARTS5_DEV',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null,
        p_where_clause              => 'chart_type = ''MAP''' );
    --
    store_component_type (
        p_id                        => c_comp_type_map_chart_series,
        p_name                      => 'MAP_CHART_SERIES',
        p_singular_title            => 'Series',
        p_plural_title              => 'Series',
        p_table_name                => 'WWV_FLOW_CHART5_SERIES_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_FLASH5_S',
        p_parent_component_type_id  => c_comp_type_map_chart,
        p_parent_fk_column          => 'CHART_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'SERIES_NAME' );

    -- Classic Report
    store_component_type (
        p_id                       => c_comp_type_classic_report,
        p_name                     => 'CLASSIC_REPORT',
        p_singular_title           => 'Attributes',
        p_plural_title             => 'Attributes',
        p_table_name               => 'WWV_FLOW_REGION_RPT_DEV',
        p_view_name                => 'APEX_APPLICATION_PAGE_REGIONS',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_display_column           => null,
        p_where_clause             => q'~plug_source_type = 'NATIVE_SQL_REPORT' ~' );
    --
    store_component_type (
        p_id                       => c_comp_type_classic_rpt_column,
        p_name                     => 'CLASSIC_REPORT_COLUMN',
        p_singular_title           => 'Column',
        p_plural_title             => 'Columns',
        p_table_name               => 'WWV_FLOW_REGION_RPT_COL_DEV',
        p_view_name                => 'APEX_APPLICATION_PAGE_RPT_COLS',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'FLOW_STEP_ID',
        p_display_column           => 'COLUMN_ALIAS',
        p_where_clause             => q'~exists ( select 1 from wwv_flow_page_plugs a where a.id = region_id and a.plug_source_type = 'NATIVE_SQL_REPORT' ) ~' );
    --
    store_component_type (
        p_id                       => c_comp_type_classic_rpt_print,
        p_name                     => 'CLASSIC_REPORT_PRINT_ATTR',
        p_singular_title           => 'Printing',
        p_plural_title             => 'Printing',
        p_table_name               => 'WWV_FLOW_REGION_PRINT_DEV',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_classic_report,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_display_column           => null,
        p_where_clause             => q'~plug_source_type = 'NATIVE_SQL_REPORT' and prn_output = 'Y' ~' );

    -- Tabular Form
    store_component_type (
        p_id                       => c_comp_type_tab_form,
        p_name                     => 'TABULAR_FORM',
        p_singular_title           => 'Attributes',
        p_plural_title             => 'Attributes',
        p_table_name               => 'WWV_FLOW_REGION_RPT_DEV',
        p_view_name                => 'APEX_APPLICATION_PAGE_REGIONS',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_display_column           => null,
        p_where_clause             => q'~plug_source_type = 'NATIVE_TABFORM' ~' );
    --
    store_component_type (
        p_id                       => c_comp_type_tab_form_column,
        p_name                     => 'TABULAR_FORM_COLUMN',
        p_singular_title           => 'Column',
        p_plural_title             => 'Columns',
        p_table_name               => 'WWV_FLOW_REGION_RPT_COL_DEV',
        p_view_name                => 'APEX_APPLICATION_PAGE_RPT_COLS',
        p_parent_component_type_id => c_comp_type_region,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'FLOW_STEP_ID',
        p_display_column           => 'COLUMN_ALIAS',
        p_where_clause             => q'~exists ( select 1 from wwv_flow_page_plugs a where a.id = region_id and a.plug_source_type = 'NATIVE_TABFORM' ) ~' );
    --
    store_component_type (
        p_id                       => c_comp_type_tab_form_print,
        p_name                     => 'TABULAR_FORM_PRINT_ATTR',
        p_singular_title           => 'Printing',
        p_plural_title             => 'Printing',
        p_table_name               => 'WWV_FLOW_REGION_PRINT_DEV',
        p_pk_column                => 'REGION_ID',
        p_parent_component_type_id => c_comp_type_tab_form,
        p_parent_fk_column         => 'REGION_ID',
        p_page_id_column           => 'PAGE_ID',
        p_display_column           => null,
        p_where_clause             => q'~plug_source_type = 'NATIVE_TABFORM' and prn_output = 'Y' ~' );

    -- Chart
    store_component_type (
        p_id                        => c_comp_type_chart,
        p_name                      => 'CHART',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_CHARTS5_DEV',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null,
        p_where_clause              => 'chart_type <> ''MAP''' );
    --
    store_component_type (
        p_id                        => c_comp_type_chart_series,
        p_name                      => 'CHART_SERIES',
        p_singular_title            => 'Series',
        p_plural_title              => 'Series',
        p_table_name                => 'WWV_FLOW_CHART5_SERIES_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_FLASH5_S',
        p_parent_component_type_id  => c_comp_type_chart,
        p_parent_fk_column          => 'CHART_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'SERIES_NAME' );
    -- Classic Calendar
    store_component_type (
        p_id                        => c_comp_type_classic_calendar,
        p_name                      => 'CLASSIC_CALENDAR',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_CALS_DEV',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'PLUG_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_region_column,
        p_name                      => 'REGION_COLUMN',
        p_singular_title            => 'Column',
        p_plural_title              => 'Columns',
        p_table_name                => 'WWV_FLOW_REGION_COLUMNS_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_REG_COLS',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_plugin_type               => 'REGION TYPE',
        p_plugin_column             => 'REGION_TYPE',
        p_display_column            => 'NAME' );

    -- JET Chart
    store_component_type (
        p_id                        => c_comp_type_jet_chart,
        p_name                      => 'JET_CHART',
        p_singular_title            => 'Attributes',
        p_plural_title              => 'Attributes',
        p_table_name                => 'WWV_FLOW_JET_CHARTS',
        p_parent_component_type_id  => c_comp_type_region,
        p_parent_fk_column          => 'REGION_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => null );
    --
    store_component_type (
        p_id                        => c_comp_type_jet_chart_series,
        p_name                      => 'JET_CHART_SERIES',
        p_singular_title            => 'Series',
        p_plural_title              => 'Series',
        p_table_name                => 'WWV_FLOW_JET_SERIES_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_CHART_S',
        p_parent_component_type_id  => c_comp_type_jet_chart,
        p_parent_fk_column          => 'CHART_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'NAME' );
    --
    store_component_type (
        p_id                        => c_comp_type_jet_chart_axes,
        p_name                      => 'JET_CHART_AXES',
        p_singular_title            => 'Axis',
        p_plural_title              => 'Axes',
        p_table_name                => 'WWV_FLOW_JET_AXES_DEV',
        p_view_name                 => 'APEX_APPLICATION_PAGE_CHART_A',
        p_parent_component_type_id  => c_comp_type_jet_chart,
        p_parent_fk_column          => 'CHART_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'AXIS' );
    --
    store_component_type (
        p_id                        => c_comp_type_jet_chart_ws_param,
        p_name                      => 'JET_CHART_WS_PARAM',
        p_singular_title            => 'Parameter',
        p_plural_title              => 'Parameters',
        p_table_name                => 'WWV_FLOW_WEB_SRC_COMP_PARAMS',
        p_parent_component_type_id  => c_comp_type_jet_chart_series,
        p_parent_fk_column          => 'JET_CHART_SERIES_ID',
        p_page_id_column            => 'PAGE_ID',
        p_display_column            => 'WEB_SRC_PARAM_ID' );
    --
    --*******************
    -- END COMPONENT TYPE
    --*******************
    --
    ------------------------------------------------------------------------
    -- Display Groups
    ------------------------------------------------------------------------
    store_display_group (
        p_name  => 'IDENTIFICATION',
        p_title => 'Identification' );
    --
    store_display_group (
        p_name  => 'SETTINGS',
        p_title => 'Settings' );
    --
    store_display_group (
        p_name  => 'ATTRIBUTES',
        p_title => 'Attributes' );
    --
    store_display_group (
        p_name  => 'COMMENTS',
        p_title => 'Comments' );
    --
    store_display_group (
        p_name  => 'ERROR',
        p_title => 'Error' );
    --
    store_display_group (
        p_name  => 'CONFIGURATION',
        p_title => 'Configuration' );
    --
    store_display_group (
        p_name  => 'CSS',
        p_title => 'CSS' );
    --
    store_display_group (
        p_name  => 'DIALOG',
        p_title => 'Dialog' );
    --
    store_display_group (
        p_name  => 'ERROR_HANDLING',
        p_title => 'Error Handling' );
    --
    store_display_group (
        p_name  => 'HEADER_AND_FOOTER',
        p_title => 'Header and Footer' );
    --
    store_display_group (
        p_name  => 'HELP',
        p_title => 'Help' );
    --
    store_display_group (
        p_name  => 'HTML_HEADER',
        p_title => 'HTML Header' );
    --
    store_display_group (
        p_name  => 'JAVASCRIPT',
        p_title => 'JavaScript' );
    --
    store_display_group (
        p_name  => 'READ_ONLY',
        p_title => 'Read Only' );
    --
    store_display_group (
        p_name  => 'SECURITY',
        p_title => 'Security' );
    --
    store_display_group (
        p_name  => 'SERVER_CACHE',
        p_title => 'Server Cache' );
    --
    store_display_group (
        p_name  => 'SERVER_SIDE_CONDITION',
        p_title => 'Server-side Condition' );
    store_display_group (
    	p_name  => 'CLIENT_SIDE_CONDITION',
    	p_title => 'Client-side Condition' );
    --
    store_display_group (
        p_name  => 'EXECUTION_OPTIONS',
        p_title => 'Execution Options' );
    --
    store_display_group (
        p_name  => 'COMPUTATION',
        p_title => 'Computation' );
    --
    store_display_group (
        p_name  => 'ADVANCED',
        p_title => 'Advanced' );
    --
    store_display_group (
        p_name  => 'AUTHORIZATION',
        p_title => 'Authorization' );
    --
    store_display_group (
        p_name  => 'WHEN',
        p_title => 'When' );
    --
    store_display_group (
        p_name  => 'AFFECTED_ELEMENTS',
        p_title => 'Affected Elements' );
    --
    store_display_group (
        p_name  => 'DEFAULT',
        p_title => 'Default' );
    --
    store_display_group (
        p_name  => 'ELEMENT',
        p_title => 'Element' );
    --
    store_display_group (
        p_name  => 'HELP_TEXT',
        p_title => 'Help Text' );
    --
    store_display_group (
        p_name  => 'LABEL',
        p_title => 'Label' );
    --
    store_display_group (
        p_name  => 'LIST_OF_VALUES',
        p_title => 'List of Values' );
    --
    store_display_group (
        p_name  => 'QUICK_PICKS',
        p_title => 'Quick Picks' );
    --
    store_display_group (
        p_name  => 'SOURCE',
        p_title => 'Source' );
    --
    store_display_group (
        p_name  => 'VALIDATION',
        p_title => 'Validation' );
    --
    store_display_group (
        p_name  => 'BEHAVIOR',
        p_title => 'Behavior' );
    --
    store_display_group (
        p_name  => 'APPEARANCE',
        p_title => 'Appearance' );
    --
    store_display_group (
        p_name  => 'LAYOUT',
        p_title => 'Layout' );
    --
    store_display_group (
        p_name  => 'LOGIN_PROCESSING',
        p_title => 'Login Processing' );
    --
    store_display_group (
        p_name  => 'POST_LOGOUT_URL',
        p_title => 'Post-Logout URL' );
    --
    store_display_group (
        p_name  => 'REAL_APPLICATION_SECURITY',
        p_title => 'Real Application Security' );
    --
    store_display_group (
        p_name  => 'SESSION_COOKIE_ATTRIBUTES',
        p_title => 'Session Cookie Attributes' );
    --
    store_display_group (
        p_name  => 'SESSION_NOT_VALID',
        p_title => 'Session Not Valid' );
    --
    store_display_group (
        p_name  => 'SUBSCRIPTION',
        p_title => 'Subscription' );
    --
    store_display_group (
        p_name  => 'CUSTOMIZATION',
        p_title => 'Customization' );
    --
    store_display_group (
        p_name  => 'NAVIGATION',
        p_title => 'Navigation' );
    --
    store_display_group (
        p_name  => 'NAVIGATION_MENU',
        p_title => 'Navigation Menu' );
    --
    store_display_group (
        p_name  => 'TABS',
        p_title => 'Tabs' );
    --
    store_display_group (
        p_name  => 'SEARCH_BAR',
        p_title => 'Search Bar' );
    --
    store_display_group (
        p_name  => 'ACTIONS_MENU',
        p_title => 'Actions Menu' );
    --
    store_display_group (
        p_name  => 'COLUMN_FORMATTING',
        p_title => 'Column Formatting' );
    --
    store_display_group (
        p_name  => 'ENABLE_USER_TO',
        p_title => 'Enable Users To' );
    --
    store_display_group (
        p_name  => 'DESCRIPTION',
        p_title => 'Description' );
    --
    store_display_group (
        p_name  => 'DETAIL_VIEW',
        p_title => 'Detail View' );
    --
    store_display_group (
        p_name  => 'DOWNLOAD',
        p_title => 'Download' );
    --
    store_display_group (
        p_name  => 'ICON_VIEW',
        p_title => 'Icon View' );
    --
    store_display_group (
        p_name  => 'PAGINATION',
        p_title => 'Pagination' );
    --
    store_display_group (
        p_name  => 'SINGLE_ROW_VIEW',
        p_title => 'Single Row View' );
    --
    store_display_group (
        p_name  => 'LINK',
        p_title => 'Link' );
    --
    store_display_group (
        p_name  => 'SUCCESS_MESSAGE',
        p_title => 'Success Message' );
    --
    store_display_group (
        p_name  => 'PARAMETER',
        p_title => 'Parameter' );
    --
    store_display_group (
        p_name  => 'MAP_XML',
        p_title => 'Map XML' );
    --
    store_display_group (
        p_name  => 'REFRESH',
        p_title => 'Refresh' );
    --
    store_display_group (
        p_name  => 'AUDIT_INFORMATION',
        p_title => 'Audit Information' );
    --
    store_display_group (
        p_name  => 'SORTING',
        p_title => 'Sorting' );
    --
    store_display_group (
        p_name  => 'EXPORT_PRINTING',
        p_title => 'Export / Printing' );
    --
    store_display_group (
        p_name  => 'BLOB',
        p_title => 'BLOB Attributes' );
    --
    store_display_group (
        p_name  => 'BREAK_FORMATTING',
        p_title => 'Break Formatting' );
    --
    store_display_group (
        p_name  => 'EXTERNAL_PROCESSING',
        p_title => 'External Processing' );
    --
    store_display_group (
        p_name  => 'MESSAGES',
        p_title => 'Messages' );
    --
    store_display_group (
        p_name  => 'HEADING',
        p_title => 'Heading' );
    --
    store_display_group (
        p_name  => 'UI_DEFAULTS_REFERENCE',
        p_title => 'UI Defaults Reference' );
    --
    store_display_group (
        p_name  => 'PRIMARY_KEY_SOURCE',
        p_title => 'Primary Key Source' );
    --
    store_display_group (
        p_name  => 'AUTOMATIC_REFRESH',
        p_title => 'Automatic Refresh' );
    --
    store_display_group (
        p_name  => 'CUSTOM_XML',
        p_title => 'Custom XML' );
    --
    store_display_group (
        p_name  => 'LEGEND',
        p_title => 'Legend' );
    --
    store_display_group (
        p_name  => 'MARGIN',
        p_title => 'Margin' );
    --
    store_display_group (
        p_name  => 'SERIES_COLOR',
        p_title => 'Series Color' );
    --
    store_display_group (
        p_name  => 'BACKGROUND_COLOR',
        p_title => 'Background Color' );
    --
    store_display_group (
        p_name  => 'X_AXIS',
        p_title => 'X Axis' );
    --
    store_display_group (
        p_name  => 'Y_AXIS',
        p_title => 'Y Axis' );
    --
    store_display_group (
        p_name  => 'GAUGE',
        p_title => 'Gauge' );
    --
    store_display_group (
        p_name  => 'VALUE',
        p_title => 'Value' );
    --
    store_display_group (
        p_name  => 'TOOLTIP',
        p_title => 'Tooltip' );
    --
    store_display_group (
        p_name  => 'TITLE',
        p_title => 'Title' );
    --
    store_display_group (
        p_name  => 'GANTT_ACTUAL',
        p_title => 'Actual Task State' );
    --
    store_display_group (
        p_name  => 'GANTT_PROGRESS',
        p_title => 'Task Progress' );
    --
    store_display_group (
        p_name  => 'GANTT_BASELINE',
        p_title => 'Planned Task State' );
    --
    store_display_group (
        p_name  => 'GANTT_TIMELINE',
        p_title => 'Timeline' );
    --
    store_display_group (
        p_name  => 'CHART',
        p_title => 'Chart' );
    --
    store_display_group (
        p_name  => 'DATAGRID',
        p_title => 'Datagrid' );
    --
    store_display_group (
        p_name  => 'MONTHLY_CALENDAR',
        p_title => 'Monthly Calendar' );
    --
    store_display_group (
        p_name  => 'WEEKLY_CALENDAR',
        p_title => 'Weekly Calendar' );
    --
    store_display_group (
        p_name  => 'DAILY_WEEKLY_CALENDAR',
        p_title => 'Daily & Weekly Calendar' );
    --
    store_display_group (
        p_name  => 'LIST_VIEW_CALENDAR',
        p_title => 'Agenda View Calendar' );
    --
    store_display_group (
        p_name  => 'COLORS',
        p_title => 'Colors' );
    --
    store_display_group (
        p_name  => 'DRAG_AND_DROP',
        p_title => 'Drag and Drop' );
    --
    store_display_group (
        p_name  => 'CALENDAR_STATE_ITEMS',
        p_title => 'Calendar State Items' );
    --
    store_display_group (
        p_name  => 'ENTRY',
        p_title => 'Entry' );
    --
    store_display_group (
        p_name  => 'MAP',
        p_title => 'Map' );
    --
    store_display_group (
        p_name  => 'CONTROLS',
        p_title => 'Controls' );
    --
    store_display_group (
        p_name  => 'DEFINED_MAP_REGION_COLOR',
        p_title => 'Defined Map Region Color' );
    --
    store_display_group (
        p_name  => 'UNDEFINED_MAP_REGION_COLOR',
        p_title => 'Undefined Map Region Color' );
    --
    store_display_group (
        p_name  => 'MAP_GRID_REGION_COLOR',
        p_title => 'Map Grid Region Color' );
    --
    store_display_group (
        p_name  => 'COLUMN_FILTER',
        p_title => 'Column Filter' );
    --
    store_display_group (
        p_name  => 'PRINTING',
        p_title => 'Printing' );
    --
    store_display_group (
        p_name  => 'PAGE',
        p_title => 'Page' );
    --
    store_display_group (
        p_name  => 'COLUMN_HEADINGS',
        p_title => 'Column Headings' );
    --
    store_display_group (
        p_name  => 'COLUMNS',
        p_title => 'Columns' );
    --
    store_display_group (
        p_name  => 'PAGE_HEADER',
        p_title => 'Page Header' );
    --
    store_display_group (
        p_name  => 'PAGE_FOOTER',
        p_title => 'Page Footer' );
    --
    store_display_group (
        p_name  => 'OUTPUT',
        p_title => 'Output' );
    --
    store_display_group (
        p_name  => 'EDIT',
        p_title => 'Edit' );
    --
    store_display_group (
            p_name  => 'EDIT_AUTH',
            p_title => 'Edit Authorization' );
    --
    store_display_group (
            p_name  => 'TOOLBAR',
            p_title => 'Toolbar' );
    --
    store_display_group (
            p_name  => 'PERFORMANCE',
            p_title => 'Performance' );
    --
    store_display_group (
        p_name  => 'OVERVIEW',
        p_title => 'Overview' );
    --
    store_display_group (
        p_name  => 'DATA_CURSOR',
        p_title => 'Data Cursor' );
    --
    store_display_group (
        p_name  => 'COLUMN_MAPPING',
        p_title => 'Column Mapping' );
    --
    store_display_group (
        p_name  => 'LINE',
        p_title => 'Line' );
    --
    store_display_group (
        p_name  => 'MARKER',
        p_title => 'Marker' );
    --
    store_display_group (
        p_name  => 'MAJOR_TICKS',
        p_title => 'Major Ticks' );
    --
    store_display_group (
        p_name  => 'MINOR_TICKS',
        p_title => 'Minor Ticks' );
    --
    store_display_group (
        p_name  => 'TICK_LABEL',
        p_title => 'Tick Label' );
    --
    store_display_group (
        p_name  => 'DUAL_Y_AXES',
        p_title => 'Dual Y Axes' );
    --
    store_display_group (
        p_name  => 'ANIMATION',
        p_title => 'Animation' );
    --
    store_display_group (
        p_name  => 'MASTER_DETAIL',
        p_title => 'Master Detail' );
    --
    store_display_group (
        p_name  => 'REMOTE_CACHE',
        p_title => 'Remote Cache' );
    --
    store_display_group (
        p_name  => 'ZOOM_SCALE',
        p_title => 'Zoom Scale' );
    --
    store_display_group (
        p_name  => 'TIME_SCALE',
        p_title => 'Time Scale' );        
    --
    store_display_group (
        p_name  => 'GANTT_START_DATE',
        p_title => 'Start Date' );
    --
    store_display_group (
        p_name  => 'GANTT_VIEWPORT',
        p_title => 'Viewport' );
    --
    store_display_group (
        p_name  => 'LOCAL_POST_PROCESSING',
        p_title => 'Local Post Processing' );
    --
    store_display_group (
        p_name  => 'MULTI_SERIES',
        p_title => 'Multi-Series Chart Data' );
    --
    --******************
    -- END DISPLAY GROUP
    --******************
    --
    ------------------------------------------------------------------------
    -- Properties
    ------------------------------------------------------------------------
    --
    l_property_id := 1;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'NAME',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a descriptive name for this component.~',
        p_comment_text       => q'~$$$ Note: Only true because name used by PAGE is defined as translatable in old metadata! Check.~' );
    --
    l_property_id := 2;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUILD_OPTION_STATUS',
        p_prompt             => 'Status',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PATCH_STATUS',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a build option status for this component.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Include',
        p_return_value  => 'INCLUDE',
        p_help_text     => q'~The &PRODUCT_NAME. engine considers this component as part of the application definition at runtime.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exclude',
        p_return_value  => 'EXCLUDE',
        p_help_text     => q'~The &PRODUCT_NAME. engine considers that this component does not exist.~' );
    --
    l_property_id := 3;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_ON_EXPORT',
        p_prompt             => 'Default on Export',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_ON_EXPORT',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the default build option applied to this component when exporting. This option can be over ridden by export options.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exclude',
        p_return_value  => 'EXCLUDE',
        p_help_text     => q'~Disabled and not a part of the application.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Include',
        p_return_value  => 'INCLUDE',
        p_help_text     => q'~Enabled and part of the application.~' );
    --
    l_property_id := 4;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMMENTS',
        p_prompt             => 'Comments',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'COMMENTS',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'COMMENTS',
        p_help_text          => q'~Enter any developer comments or notes here. These comments only display within App Builder and never display when running the application.~' );
    --
    l_property_id := 5;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTHORIZATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'SCHEME_TYPE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Select which authorization scheme is applied. The following authorization types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may have additional authorization type plug-ins available here.
These are displayed as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 6;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_MESSAGE',
        p_prompt             => 'Error Message',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ERROR_MESSAGE',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_examples           => '#LABEL# must have some value.',
        p_display_group_name => 'ERROR',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the text to be displayed in the event that the validation does not pass.</p>
<p>You can use <code>#LABEL#</code> as placeholder for the label of the associated page item or <code>#COLUMN_HEADER#</code> for the heading of the associated editable region column. The placeholders are not supported if error display location is set to On Error Page.</p>~' );
    --
    l_property_id := 7;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EVALUATION_POINT',
        p_prompt             => 'Evaluation Point',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CACHING',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Authorization schemes are evaluated on first use in a session.
Select the appropraite evaluation point to determine whether subsequent use of the given authorization obtains the result from memory or re-evaluates the authorization scheme.</p>
#LOV_VALUES#
<p>The default value <em>Once per session</em> is the most efficient.
You should choose another value if the authorization check depends on changing session state or other factors that are not consistent over an entire session.
The options <em>Once per component</em> and <em>Always (No Caching)</em> provide additional parameters that can be defined for use by the authorization scheme.
In authorization plugins, you can use the <em>component.type</em>, <em>component.id</em> and <em>component.name</em> attributes of the <em>t_authorization</em> parameter.
For the built-in <em>Exists SQL Query</em> and <em>PL/SQL Function</em> scheme types, equivalent bind variables <em>:APP_COMPONENT_TYPE</em>, <em>:APP_COMPONENT_ID</em> and <em>:APP_COMPONENT_NAME</em> are available.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once per Session',
        p_return_value  => 'BY_USER_BY_SESSION',
        p_help_text     => q'~Evaluates only once and then uses the result in memory.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once per Page View',
        p_return_value  => 'BY_USER_BY_PAGE_VIEW',
        p_help_text     => q'~Evaluates once for each request that is processed. Use the result in memory if the authorization scheme is referenced in more than one component on the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once per Component',
        p_return_value  => 'BY_COMPONENT',
        p_help_text     => q'~Evaluates once for each component that references the authorization scheme, but saves the result in the session. Further requests to render or process the scheme use the result in memory.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always (No Caching)',
        p_return_value  => 'NOCACHE',
        p_help_text     => q'~The authorization scheme is always evaluated.~' );
    --
    l_property_id := 8;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PAGE_ALIAS',
        p_prompt                => 'Page Alias',
        p_property_type         => 'TEXT',
        p_db_column             => 'ALIAS',
        p_display_length        => 30,
        p_max_length            => 30,
        p_text_case             => 'UPPER',
        p_restricted_characters => 'SAFE_COMPONENT_NAME',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Enter an alphanumeric alias for this page. You may use this alias to reference the page instead of the page number.
For example, if you were working on page 1 of application 100, you could create an alias called <code>home</code>.
You could then access this page from other pages using the following f?p syntax:
<pre>f?p=100:home</pre>~' );
    --
    l_property_id := 9;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PAGE_GROUP',
        p_prompt                => 'Page Group',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'GROUP_ID',
        p_display_group_name    => 'IDENTIFICATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_page_group,
        p_help_text             => q'~Specify the page group to associate with this page.
Page groups do not affect functionality, but help developers manage the pages within an application.~' );
    --
    l_property_id := 10;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_MODE',
        p_prompt             => 'Page Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGE_MODE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the page mode for this page.</p>
#LOV_VALUES#
<p>Note that options <em>Modal</em> and <em>Non-Modal Dialog</em> will only be available for selection where the current application theme contains a default <em>Dialog Page Template</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Normal',
        p_return_value  => 'NORMAL',
        p_help_text     => q'~The page is presented as a normal &PRODUCT_NAME. application page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Modal Dialog',
        p_return_value  => 'MODAL',
        p_help_text     => q'~The page is presented as a modal dialog.<br>
A modal dialog is an overlay window positioned within the viewport, which remains active and focused until the end user dismisses (closes) it.
The underlying page is grayed out and the end user is prevented from interacting with the rest of the page until the dialog is closed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Non-Modal Dialog',
        p_return_value  => 'NON_MODAL',
        p_help_text     => q'~The page is presented as a non-modal dialog.<br>
A non-modal dialog is an overlay window positioned within the viewport, where the end user can interact with the dialog, and content on the page that launched the dialog.
A non-modal dialog can be used when the requested information is not essential to continue, work can continue elsewhere while the window is still open.~' );
    --
    l_property_id := 11;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PAGE_TEMPLATE',
        p_prompt                   => 'Page Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'STEP_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a page template to define the appearance and layout of this page.</p>
        <p>Page templates are defined in the application theme.  
        When a page is created, the template is automatically set to <em>Theme Default</em> which will render the page using the default page template defined in the current theme.
        Making a selection here overrides the default page template.</p>
        <p>Many themes contain page templates with specific purposes, such as for displaying content with side columns, login page, dialog pages, and so forth.<br>
        Universal Theme provides the following page templates:
          <dl>
            <dt>Standard</dt>
              <dd>The default page template. Ideal for home pages, dashboards, large reports, and other layouts where maximum screen real-estate is desired.</dd>
            <dt>Left Side Column</dt>
              <dd>Provides a left display position that is useful for search and filter pages.</dd>
            <dt>Right Side Column</dt>
              <dd>Provides a collapsible right-side display position that is useful for displaying action-oriented controls such as buttons or lists.</dd>
            <dt>Left and Right Side Columns</dt>
              <dd>Provides both the left side column and collapsible right-side column that is well suited for very complex pages.</dd>
            <dt>Login</dt>
              <dd>Used exclusively for the application login page.</dd>
            <dt>Marquee</dt>
              <dd>Provides a collapsible right side column and a title-bar area which contains primary information. 
              This page template is well suited for displaying a single record which has several related reports or data.
              Marquee is commonly used for displaying Master-Detail relationships where a single master record is first selected from a report. </dd>
            <dt>Minimal (No Navigation)</dt>
              <dd>Useful for very simple pages, disclaimers, single page applications, or where navigation is not necessary.</dd>
          </dl>
          See Also: <a target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 12;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'STANDARD_TAB_SET',
        p_prompt                => 'Standard Tab Set',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'TAB_SET',
        p_display_group_name    => 'TABS',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_tab_set,
        p_help_text             => q'~Select a standard tab set used for this page. A standard tab set is associated with a specific page number. You can use standard tabs to link users to a specific page.~' );
    --
    l_property_id := 13;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TITLE',
        p_prompt             => 'Title',
        p_property_type      => 'TEXT',
        p_db_column          => 'TITLE',
        p_display_length     => 70,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the page title. The page title is displayed in the title bar of the browser window.~' );
    --
    l_property_id := 14;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CURSOR_FOCUS',
        p_prompt             => 'Cursor Focus',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FIRST_ITEM',
        p_supported_ui_types => 'DESKTOP',
        p_display_group_name => 'NAVIGATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether the cursor is focussed when first entering the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First item on page',
        p_return_value  => 'AUTO_FIRST_ITEM',
        p_help_text     => q'~The cursor focus is placed on the first field on the page using JavaScript, generated by the &PRODUCT_NAME. engine.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Do not focus cursor',
        p_return_value  => 'NO_FIRST_ITEM',
        p_help_text     => q'~The cursor is not focussed and no JavaScript is generated.<br>
Select this option if the generated JavaScript conflicts with custom JavaScript.~' );
    --
    l_property_id := 15;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_FILE_URLS',
        p_prompt             => 'File URLs',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'JAVASCRIPT_FILE_URLS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Standard file reference</dt>
<dd><pre>/myjs/main.js</pre></dd>
<dt>Standard file reference which loads the minified file <code>main.min.js</code> from <code>/myjs/minified/</code> for regular page views and <code>main.js</code> from <code>/myjs/</code> in debug mode or when running the application from App Builder.</dt>
<dd><pre>/myjs/#MIN_DIRECTORY#main#MIN#.js</pre></dd>
<dt>Use this syntax if the library is also used from a RequireJS require call. The define name must match what is used in the requirejs.config paths and the value must be the global symbol exposed by the library. Only applies when using RequireJS. This avoids RequireJS  loading that library a second time.</dt>
<dd><pre>[define hammerjs=Hammer]/myjs/hammer.js</pre></dd>
<dt>Use this syntax if the file has a dependency on RequireJS. This will automatically load RequireJS before this file.</dt>
<dd><pre>[require requirejs]/myjs/main.js</pre></dd>
<dt>Use this syntax if the file has a dependency on Oracle JET. This will automatically load RequireJS and the Oracle JET RequireJS configuration before this file.</dt>
<dd><pre>[require jet]/myjs/main.js</pre></dd>
<dt>File reference using a query string in the URL referencing the application version, such that when the application is upgraded (and the version is incremented), the browser is instructed to always load the new file and ignore any previously cached files.</dt>
<dd><pre>/myjs/main.js?version=#APP_VERSION#</pre></dd>
</dl>~',
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript file URLs for code loaded on this page. Each URL must be written on a new line.
If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an empty string if the page is viewed in debug mode or when running the application from App Builder.
You also have access to the substitution string <code>#APP_VERSION#</code> if you want to include the application's version in the file URL.</p>
<p>JavaScript file URLs you enter here replaces the <code>#PAGE_JAVASCRIPT#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>script</code> tags. Just specify the URL.</p>~' );
    --
    l_property_id := 16;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_FUNCTION_AND_GLOBAL_VARIABLE_DECLARATION',
        p_prompt             => 'Function and Global Variable Declaration',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'JAVASCRIPT_CODE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript code such as functions or global variable declarations referenced on this page.
To reference a shortcut, use <code>"SHORTCUTNAME"</code>.
If the same JavaScript is required on multiple pages, consider putting the code into an external JavaScript file to avoid duplication and to leverage browser caching of static files.</p>
<p>Code you enter here replaces the <code>#PAGE_JAVASCRIPT#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>script</code> tags. Just include the JavaScript code.</p>~' );
    --
    l_property_id := 17;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_EXECUTE_WHEN_PAGE_LOADS',
        p_prompt             => 'Execute when Page Loads',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'JAVASCRIPT_CODE_ONLOAD',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'JAVASCRIPT',
        p_help_text          => q'~<p>Enter JavaScript code to execute when the page loads.
The code is executed after the JavaScript code generated by Oracle &PRODUCT_NAME..</p>
<p>Code you enter here replaces the <code>#GENERATED_JAVASCRIPT#</code> substitution string in the page template.</p>
<p>Note: You do not need to add any opening or closing <code>script</code> tags, just the JavaScript code.</p>~' );
    --
    l_property_id := 18;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_STANDARD_JAVASCRIPT_AND_CSS',
        p_prompt             => 'Include Standard JavaScript and CSS',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_APEX_CSS_JS_YN',
        p_display_group_name => 'JAVASCRIPT',
        p_deprecated_values  => 'N',
        p_help_text          => q'~<p>Oracle &PRODUCT_NAME. typically requires specific JavaScript and CSS files.
For some applications, such as mobile applications, you may want to suppress the inclusion of these files on the page.</p>
<p>To Include the standard &PRODUCT_NAME. and JavaScript files select <strong>Yes</strong>. Selecting <strong>No</strong> suppresses the inclusion of these files in the HTML Header.</p>
<p>Suppressing inclusion of these files can have adverse effects on an application and may cause it to break.
Therefore, disabling this attribute is only recommended for advanced developers.</p>~' );
    --
    l_property_id := 19;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTML_HEADER',
        p_prompt             => 'HTML Header',
        p_property_type      => 'HTML',
        p_db_column          => 'HTML_PAGE_HEADER',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'HTML_HEADER',
        p_help_text          => q'~<p>Enter text to replace the <code>#HEAD#</code> substitution string in the page template header.
The values entered here are inserted after the HTML <code>&lt;head&gt;</code> tag. Use this page attribute to add page specific meta tags.
</p>
<p>Note: JavaScript code or Cascading Style Sheets should be added to the dedicated JavaScript and CSS attributes.</p>~' );
    --
    l_property_id := 20;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_HTML_BODY_ATTRIBUTE',
        p_prompt             => 'Page HTML Body Attribute',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'HTML_PAGE_ONLOAD',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HTML_HEADER',
        p_help_text          => q'~Enter text substituted in for your page template's <code>#ONLOAD#</code> substitution string.
To use this feature, your page template must include the <code>#ONLOAD#</code> substitution string.~' );
    --
    l_property_id := 21;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HEADER_TEXT',
        p_prompt             => 'Header Text',
        p_property_type      => 'HTML',
        p_db_column          => 'WELCOME_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HEADER_AND_FOOTER',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text or HTML you want to appear immediately following the page header and before the body content.~' );
    --
    l_property_id := 22;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BODY_HEADER',
        p_prompt             => 'Body Header',
        p_property_type      => 'HTML',
        p_db_column          => 'BOX_WELCOME_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HEADER_AND_FOOTER',
        p_is_translatable    => true,
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~Enter text or HTML you want to appear before regions that display on the running page.
Text you enter here appears before the page template <code>#BODY#</code> substitution string.~' );
    --
    l_property_id := 23;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FOOTER_TEXT',
        p_prompt             => 'Footer Text',
        p_property_type      => 'HTML',
        p_db_column          => 'FOOTER_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HEADER_AND_FOOTER',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text or HTML that appears before the page template footer.~' );
    --
    l_property_id := 24;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'AUTHORIZATION_SCHEME',
        p_prompt                => 'Authorization Scheme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'REQUIRED_ROLE',
        p_display_group_name    => 'SECURITY',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to control this component. The authorization must evaluate to TRUE in order for this component to be rendered or executed.~' );
    --
    l_property_id := 25;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_AUTHENTICATION',
        p_prompt             => 'Authentication',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGE_IS_PUBLIC_Y_N',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether this page is public or requires authentication.
If a page is identified as public, the page can be viewed by any user who accesses the page.
The application's page sentry function may access this page attribute to identify pages that do not require prior authentication to view.
The implementation of the authentication scheme's page sentry function determines whether this attribute has any effect.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Requires Authentication',
        p_return_value  => 'N' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Is Public',
        p_return_value  => 'Y' );
    --
    l_property_id := 26;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEEP_LINKING',
        p_prompt             => 'Deep Linking',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEEP_LINKING',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how external URL requests to this page are handled.
Page requests from within this application to this page, are not considered deep linking, and are not governed by this attribute's setting.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled',
        p_return_value  => 'Y',
        p_help_text     => q'~If this page is specified as the target page in a URL, it ultimately redirects to this page.<br>
If the user is not already authenticated and the page is not public, then the user is prompted to login.
After successfully logging into the application, the user is redirected to this page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'N',
        p_help_text     => q'~If the URL does not contain a valid session ID, &PRODUCT_NAME. starts a new session and redirects the user to the application home page, rather than to this page.~' );
    --
    l_property_id := 27;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_ACCESS_PROTECTION',
        p_prompt             => 'Page Access Protection',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PROTECTION_LEVEL',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select what type of session state protection is implemented for this page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unrestricted',
        p_return_value  => 'N',
        p_help_text     => q'~The page may be requested using a URL, with or without session state arguments, and without having to have a checksum.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Arguments Must Have Checksum',
        p_return_value  => 'C',
        p_help_text     => q'~If Request, Clear Cache, or Name/Value Pair arguments appear in the URL, a checksum must also be provided.<br>
The checksum type must be compatible with the most stringent <em>Session State Protection</em> attribute of all the items passed as arguments.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Arguments Supported',
        p_return_value  => 'U',
        p_help_text     => q'~A URL may be used to request the page, but the URL can not contain Request, Clear Cache, or Name/Value Pair arguments.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No URL Access',
        p_return_value  => 'D',
        p_help_text     => q'~The page may not be accessed using a URL.<br>
However, the page may be the target of a <em>Branch to Page</em> branch type, as this does not perform a URL redirect.~' );
    --
    l_property_id := 28;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_DUPLICATE_PAGE_SUBMISSIONS',
        p_prompt             => 'Enable duplicate page submissions',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ALLOW_DUPLICATE_SUBMISSIONS',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether the end user may submit the same page more than once.
Use this feature to avoid duplicate inserts into the same table.
This can happen when an end user clicks the browser's back button and then submits the page again, or if the end user clicks the browser's reload button.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No - Prevent page from being re-posted',
        p_return_value  => 'N' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes - Enable page to be re-posted',
        p_return_value  => 'Y' );
    --
    l_property_id := 29;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ON_DUPLICATE_PAGE_SUBMISSIONS_GO_TO_THIS_URL',
        p_prompt             => 'On duplicate page submissions go to this URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'ON_DUP_SUBMISSION_GOTO_URL',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter a URL target for when an end user attempts to perform a second page submission. &PRODUCT_NAME. displays an error message and a link to this URL to enable the user to continue.~' );
    --
    l_property_id := 30;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORM_AUTO_COMPLETE',
        p_prompt             => 'Form Auto Complete',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AUTOCOMPLETE_ON_OFF',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether auto-complete is disabled for this page. A value of <strong>On</strong> has no effect on this page. A value of <strong>Off</strong> generates the following HTML in the FORM tag:
<pre>
autocomplete="off"
</pre>
<p>Note: Different browsers may have different rules around when <code>autocomplete="off"</code> is respected or ignored. Therefore please bear this in mind specifically when setting this to <strong>Off</strong>, and test in your target browsers.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On',
        p_return_value  => 'ON' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Off',
        p_return_value  => 'OFF' );
    --
    l_property_id := 32;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CACHE_TIMEOUT',
        p_prompt             => 'Cache Timeout',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CACHE_TIMEOUT_SECONDS',
        p_display_group_name => 'SERVER_CACHE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how long a cached page is valid. Subsequent page requests do not utilize the cached page if the timeout expires.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '10 seconds',
        p_return_value  => '10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 minute',
        p_return_value  => '60',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '10 minutes',
        p_return_value  => '600' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '30 minutes',
        p_return_value  => '1800' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 hour',
        p_return_value  => '3600',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2 hours',
        p_return_value  => '7200' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3 hours',
        p_return_value  => '10800' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4 hours',
        p_return_value  => '14400' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '6 hours',
        p_return_value  => '21600' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '12 hours',
        p_return_value  => '43200' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 day',
        p_return_value  => '86400',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2 days',
        p_return_value  => '172800' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3 days',
        p_return_value  => '259200' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4 days',
        p_return_value  => '345600' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 week',
        p_return_value  => '604800' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2 weeks',
        p_return_value  => '1209600' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4 Weeks',
        p_return_value  => '2419200' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '10 Weeks',
        p_return_value  => '6048000' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1 Year',
        p_return_value  => '31536000' );
    --
    l_property_id := 33;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BROWSER_CACHE',
        p_prompt             => 'Browser Cache',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BROWSER_CACHE',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>If the cache is enabled, the browser can save the contents of your application's pages in its cache, both in memory and on disk.
If a user clicks the browser back button, the page typically loads from the cache, not from the server.
If the cache is disabled, the browser is instructed to not save page content and requests it anew from the server.</p>
<p>Oracle recommends, from a security perspective, that the cache is disabled, so the browser does not store sensitive data and always requests pages if the URL changes.
Otherwise, it may even be possible to go back in the browser history after a log out and see cached content of the former session.
Disabling the browser cache prevents subtle back button issues with pages that use partial page refresh, such as interactive reports.</p>
<p>If this attribute is set to <strong>Disabled</strong>, &PRODUCT_NAME. sends the HTTP header <em>cache-control: no-store</em> which instructs the Browser to not cache the page contents on disk or in memory.
If it is set to <strong>Application Default</strong>, the value at runtime is taken from the application's <em>Browser Cache</em> attribute.</p>
<p>Note: This feature requires modern browsers that support the HTTP header response variable <code>cache-control</code>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'N' );
    --
    l_property_id := 38;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'BUILD_OPTION',
        p_prompt                => 'Build Option',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'REQUIRED_PATCH',
        p_display_group_name    => 'CONFIGURATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_build_option,
        p_help_text             => q'~<p>Select a build option for this component.</p>
                                     <p>Build Options allow application components and functionality to be conditionally enabled or disabled when the application is installed, or at runtime via API (APEX_UTIL.SET_BUILD_OPTION_STATUS).<br>
									   Build Options can set this component to be Included or Excluded in the runtime application:</p>
									 <p><strong>Included</strong> - Enabled and are part of the application.</p>
									 <p><strong>Excluded</strong> - Disabled and are not a part of the application.</p>~',
        p_examples              => q'~<p>1. You are developing an application that will have many installations. 
                                        Additionally, each installation may choose to enable or disable certain application functionality.  
                                        With Build Options, you can develop one application and when installed, build options can be configured to include or exclude associated application functionality.  
                                        You may also use the API to expose this feature within the application.  
                                        This allows privileged end-users to selectively enable or disable application functionality.</p>
									  <p>2. You are developing functionality which is not yet complete, so you do not wish to expose to end-users. 
									    Using Build Options enables you to disable this functionality from the application when it is built into the test and production environments. 
									    The benefit of this approach is that the application can still be deployed without including incomplete functionality.</p>
									  <p>3. You are removing functionality you think is not needed by the application, but are unsure this is a safe operation. 
									    In this case, you can use Build Options to essentially "comment out" specific functionality.  
									    If on deployment, the removed functionality was deemed to be necessary, it can be re-instated.  
									    If this functionality was deemed to be unnecessary, then it can be safely removed from the application.</p>~' );
    --
    l_property_id := 39;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INLINE_ERROR_NOTIFICATION_TEXT',
        p_prompt             => 'In-line Error Notification Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ERROR_NOTIFICATION_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ERROR_HANDLING',
        p_help_text          => q'~Enter the error message displayed when an error occurs on this page. The error message is substituted for <code>#NOTIFICATION_MESSAGE#</code> in the page template.~' );
    --
    l_property_id := 40;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HELP_TEXT',
        p_prompt             => 'Help Text',
        p_property_type      => 'HTML',
        p_db_column          => 'HELP_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HELP',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Use this attribute to enter help text for the current page. Page level help supports shortcuts using the following syntax:</p>
<pre>"SHORTCUT_NAME"</pre>
<p>Page help text is not displayed by default. However, you can readily develop a help system that exposes this text.</p>~' );
    --
    l_property_id := 41;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_HANDLING_FUNCTION',
        p_prompt             => 'Error Handling Function',
        p_property_type      => 'TEXT',
        p_db_column          => 'ERROR_HANDLING_FUNCTION',
        p_display_length     => 78,
        p_max_length         => 255,
        p_display_group_name => 'ERROR_HANDLING',
        p_help_text          => q'~<p>Enter the name of the PL/SQL function called when an error occurs within the application.
You can use this function to act on various error codes including those emanating from the Oracle database, and log such errors in a custom table you define if necessary.
The function can include logic to modify the error message and display location, transforming Oracle database errors into user friendly messages.
For example, you can capture a unique key violation on <code>DEMO_CUSTOMERS</code> and replace the <code>ORA-00001</code> message with this text: Customer Name must be unique.
Installing the Sample Database Application, from Packaged Applications, creates the <code>SAMPLE_PKG</code> package, which includes the <code>demo_error_handling</code> function.
This sample error handling function includes extensive comments to make it easy for you to utilize as the basis for defining your own function.</p>
<p>The function name entered can reference a package function or stand alone function in the database. For example:
<pre>
log_apex_error
</pre>
</p>
<p>When referencing a database PL/SQL package or stand alone function, you can use the <code>#OWNER#</code> substitution string to reference the parsing schema of the current application. For example:
<pre>#OWNER#.log_apex_error</pre>
</p>
<p>If an error handling function is specified on a page then it is utilized, instead of this application level setting, for that page.</p>
<p>Error Handling Functions must implement the following interface:
<pre>
function &lt;name of function> (
    p_error in apex_error.t_error )
    return apex_error.t_error_result
</pre>
</p>
<p>See the API Reference manual for a description of the package <code>apex_error</code>.</p>~' );
    --
    l_property_id := 42;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_TRANSITION',
        p_prompt             => 'Page Transition',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGE_TRANSITION',
        p_supported_ui_types => 'JQM_SMARTPHONE',
        p_display_group_name => 'NAVIGATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specify the transition used when navigating to a new page or when the page is getting submitted.</p>
<p>Older browsers, that do not support 3D transforms, are not able to utilize most of the transitions.
By default, devices that lack 3D support (such as Android 2.x) fallback to fade for all transition types.
See jQuery Mobile documentation for additional details.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fade',
        p_return_value  => 'FADE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Flip',
        p_return_value  => 'FLIP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Flow',
        p_return_value  => 'FLOW' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pop',
        p_return_value  => 'POP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide',
        p_return_value  => 'SLIDE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide Down',
        p_return_value  => 'SLIDEDOWN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide Fade',
        p_return_value  => 'SLIDEFADE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide Up',
        p_return_value  => 'SLIDEUP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Turn',
        p_return_value  => 'TURN' );
    --
    l_property_id := 43;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POPUP_TRANSITION',
        p_prompt             => 'Popup Transition',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'POPUP_TRANSITION',
        p_supported_ui_types => 'JQM_SMARTPHONE',
        p_display_group_name => 'NAVIGATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specify the transition used when a popup is opened.</p>
<p>Older browsers, that do not support 3D transforms, are not able to utilize most of the transitions.
By default, devices that lack 3D support (such as Android 2.x) fallback to fade for all transition types.
See jQuery Mobile documentation for additional details.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fade',
        p_return_value  => 'FADE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Flip',
        p_return_value  => 'FLIP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Flow',
        p_return_value  => 'FLOW' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pop',
        p_return_value  => 'POP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide',
        p_return_value  => 'SLIDE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide Down',
        p_return_value  => 'SLIDEDOWN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide Fade',
        p_return_value  => 'SLIDEFADE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide Up',
        p_return_value  => 'SLIDEUP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Turn',
        p_return_value  => 'TURN' );
    --
    l_property_id := 44;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MEDIA_TYPE',
        p_prompt             => 'Media Type',
        p_property_type      => 'TEXT',
        p_db_column          => 'MEDIA_TYPE',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the Internet media type. An Internet media type is a two part identifier for file formats on the Internet.
A media type is composed of at least two parts: a type, a subtype, and one or more optional parameters.
This media type is used in the Content-Type HTTP header when rendering the page.</p>
<p>The page-level Media type overrides the application-level media type.
If both the page-level and application-level values for media type are <code>NULL</code>, the media type <code>text/html</code> is used.</p>~',
        p_comment_text       => q'~$$$ Should this property be deprecated???~' );
    --
    l_property_id := 45;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CSS_FILE_URLS',
        p_prompt             => 'File URLs',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'CSS_FILE_URLS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Standard file reference</dt>
<dd><pre>/mycss/main.css</pre></dd>
<dt>Standard file reference which loads the minified file main.min.css from /mycss/minified/ for regular page views and main.css from /mycss/ in debug mode or when running the application from App Builder.</dt>
<dd><pre>/mycss/#MIN_DIRECTORY#main#MIN#.css</pre></dd>
<dt>Conditional media query</dt>
<dd><pre>[media="only screen and (max-device-width: 480px)"]/mycss/smartphone.css</pre></dd>
<dt>File reference using a query string in the URL referencing the application version, such that when the application is upgraded (and the version is incremented), the browser is instructed to always load the new file and ignore any previously cached files.</dt>
<dd><pre>/mycss/main.css?version=#APP_VERSION#</pre></dd>
</dl>~',
        p_display_group_name => 'CSS',
        p_help_text          => q'~<p>Enter Cascading Style Sheet (CSS) file URLs loaded on this page. Each URL must be written on a new line.
If you provide a minified version of your file you can use the substitution string <code>#MIN#</code> to include <code>.min</code> or <code>#MIN_DIRECTORY#</code> to include <code>minified/</code> in your file URL for a regular page view and an empty string if the page is viewed in debug mode or when running the application from App Builder.
You also have access to the substitution string <code>#APP_VERSION#</code> if you want to include the application's version in the file URL.</p>
<p>File URLs you enter here replace the <code>#PAGE_CSS#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>link</code> tags. Just include the file URL.</p>~' );
    --
    l_property_id := 46;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INLINE_CSS',
        p_prompt             => 'Inline',
        p_property_type      => 'CSS',
        p_db_column          => 'INLINE_CSS',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_examples           => q'~<dl>
<dt>Sets the CSS class <code>display_only</code> to bold</dt>
<dd><pre>
.display_only {
  font-weight: bold;
}
</pre></dd>
</dl>~',
        p_display_group_name => 'CSS',
        p_help_text          => q'~<p>Enter Cascading Style Sheet (CSS) code used on this page.
If the same CSS is required on multiple pages, consider putting the code into an external file to avoid duplication and to leverage browser caching of static files.</p>
<p>Code you enter here replaces the <code>#PAGE_CSS#</code> substitution string in the page template.</p>
<p>Note: You do not need to include opening or closing <code>style</code> tags. Just include the cascading style sheet code.</p>~' );
    --
    l_property_id := 47;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_WIDTH',
        p_display_length     => 10,
        p_max_length         => 20,
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~<p>Enter the width of the dialog, in pixels or a percentage.
The substitution string <code>#DIALOG_WIDTH#</code> in the dialog initialization code of the page template is replaced with the value entered in this item.</p>
<p>For a page using a Desktop user interface, the value is set in pixels, such as <strong><em>500</em></strong>.
However, for a page using the jQuery Mobile Smartphone user interface, the value is set in percent, such as <strong><em>80%</em></strong>.</p>~' );
    --
    l_property_id := 48;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_MAX_WIDTH',
        p_prompt             => 'Maximum Width',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_MAX_WIDTH',
        p_display_length     => 10,
        p_max_length         => 20,
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~<p>Enter the maximum width of the dialog in pixels.
The substitution string <code>#DIALOG_MAX_WIDTH#</code> in the dialog initialization code of the page template is replaced with the value entered in this item.</p>
<p>For a page using the jQuery Mobile Smartphone user interface, the maximum width is <strong><em>500</em></strong>.</p>~' );
    --
    l_property_id := 49;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DIALOG_ATTRIBUTES',
        p_prompt                => 'Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ',',
        p_db_column             => 'DIALOG_ATTRIBUTES',
        p_display_length        => 100,
        p_max_length            => 255,
        p_display_group_name    => 'DIALOG',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~<p>Dialog support in &PRODUCT_NAME. varies depending on the user interface of the page.
A subset of dialog attributes are declaratively supported: <em>height, width, and maximum width</em>.
To define any additional attributes for the dialog, enter the name/value pairings in a comma separated list.</p>
<p>The substitution string <code>#DIALOG_ATTRIBUTES#</code> in the dialog initialization code defined at page template level, is replaced by any value(s) entered in this item.</p>
<p>For pages using Desktop user interface, the jQuery UI dialog widget is utilized.
For pages using jQuery Mobile Smartphone user interface, the jQuery Mobile dialog widget is utilized.</p>
<p>For example, a dialog page using a Desktop user interface could have the following attributes defined: <code>resizable:true, draggable:true</code></p>
<p>For further information on the attributes available, refer to the <a target="_blank" href="http://api.jqueryui.com/dialog/">jQuery UI dialog widget documentation</a> and <a target="_blank" href="http://api.jqueryui.com/dialog/">jQuery Mobile dialog widget documentation</a>.</p>~' );
    --
    l_property_id := 50;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DESCRIPTION',
        p_prompt             => 'Description',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DESCRIPTION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Enter a description.~' );
    --
    l_property_id := 51;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'COMPUTATION_ITEM_NAME',
        p_prompt                   => 'Item Name',
        p_property_type            => 'ITEM',
        p_db_column                => 'COMPUTATION_ITEM',
        p_display_length           => 50,
        p_max_length               => 255,
        p_display_group_name       => 'IDENTIFICATION',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the page or application item populated by this computation. You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 52;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COMPUTATION_TYPE',
        p_display_group_name => 'COMPUTATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a computation type from the following list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC_ASSIGNMENT',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM_VALUE',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'QUERY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return colon separated value)',
        p_return_value  => 'QUERY_COLON',
        p_help_text     => q'~Set to a single colon separated value, which concatenates each row value, returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Expression',
        p_return_value  => 'SQL_EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>SQL Expression</em> entered.~'  );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'PLSQL_EXPRESSION',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value that results from executing the <em>PL/SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'SET_ITEM_EQUAL_THIS_PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    l_property_id := 53;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_STATIC_VALUE',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'COMPUTATION',
        p_help_text          => q'~Enter the text that is used to populate the computation item.~' );
    --
    l_property_id := 54;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'COMPUTATION_SQL_STATEMENT',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'COMPUTATION',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'COMPUTATION',
        p_help_text            => q'~Enter a SQL query that provides a value used to populate the computation item. If the result contains multiple rows then only the value from the first row is returned.~' );
    --
    l_property_id := 55;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_SQL_EXPRESSION',
        p_prompt             => 'SQL Expression',
        p_property_type      => 'SQL EXPRESSION',
        p_db_column          => 'COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'COMPUTATION',
        p_help_text          => q'~Enter a SQL Expression that produces a value used to populate the computation item.~' );
    --
    l_property_id := 56;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_PLSQL_EXPRESSION',
        p_prompt             => 'PL/SQL Expression',
        p_property_type      => 'PLSQL EXPRESSION VARCHAR2',
        p_db_column          => 'COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'COMPUTATION',
        p_help_text          => q'~Enter a PL/SQL expression that produces a value used to populate the computation item.~' );
    --
    l_property_id := 57;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_PLSQL_FUNCTION_BODY',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'COMPUTATION',
        p_help_text          => q'~Enter a PL/SQL function body that returns a value used to populate the computation item.~' );
    --
    l_property_id := 58;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'COMPUTATION_ITEM_VALUE',
        p_prompt                   => 'Item Name',
        p_property_type            => 'ITEM',
        p_db_column                => 'COMPUTATION',
        p_display_length           => 80,
        p_max_length               => 4000,
        p_display_group_name       => 'COMPUTATION',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the item whose value is used to populate the computation item. You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 59;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_PREFERENCE_VALUE',
        p_prompt             => 'Preference',
        p_property_type      => 'TEXT',
        p_db_column          => 'COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'COMPUTATION',
        p_help_text          => q'~Enter a User Preference that has a value used to populate the computation item.~' );
    --
    l_property_id := 60;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTION_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SEQUENCE',
        p_display_length     => 10,
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_help_text          => q'~<p>Specify the sequence for this component. The sequence determines the order of execution.</p>
<p>Note: If two components have the same sequence value, then they may be executed in a different order when the application is exported and imported into another environment.</p>~' );
    --
    l_property_id := 61;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTATION_POINT',
        p_prompt             => 'Point',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COMPUTATION_POINT',
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select at what point in page rendering or processing this computation is executed.
The most typical computation point is <strong>After Submit</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'New Session',
        p_return_value  => 'ON_NEW_INSTANCE',
        p_help_text     => q'~Executes when a new session is generated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Header',
        p_return_value  => 'BEFORE_HEADER',
        p_help_text     => q'~Rendering: Executes before the page renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Header',
        p_return_value  => 'AFTER_HEADER',
        p_help_text     => q'~Rendering: Executes after the header renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Regions',
        p_return_value  => 'BEFORE_BOX_BODY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Rendering: Executes before regions render.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Regions',
        p_return_value  => 'AFTER_BOX_BODY',
        p_help_text     => q'~Rendering: Executes after regions render.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Footer',
        p_return_value  => 'BEFORE_FOOTER',
        p_help_text     => q'~Rendering: Executes before footer renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Footer',
        p_return_value  => 'AFTER_FOOTER',
        p_help_text     => q'~Rendering: Executes after footer renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Submit',
        p_return_value  => 'AFTER_SUBMIT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Processing: Executes after the page is submitted, but before page processing.~' );
    --
    l_property_id := 62;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EVENT',
        p_prompt             => 'Event',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'BIND_EVENT_TYPE',
        p_display_group_name => 'WHEN',
        p_lov_type           => 'EVENTS',
        p_help_text          => q'~<p>Specify the event that causes the dynamic action to fire.
For information about specific events, please see the relevant section in the <em>App Builder User's Guide</em>.</p>
Events are categrorized into the following types:
<dl>
  <dt>Browser Events</dt>
    <dd>Standard browser events.</dd>
  <dt>Framework Events</dt>
    <dd>Framework events are triggered from within the Application Express framework.</dd>
  <dt>Component Events</dt>
    <dd>Only available when there is a component available to your application that triggers a custom event. These events are triggered from either native components or plug-in components you have installed in your application.</dd>
  <dt>Custom Event</dt>
    <dd>Any custom event triggered from your application.</dd>
</dl>
<p>Note: The events displayed differ based on page's current User Interface type.
If you wish to select an event that corresponds to a different type, then you have the option of selecting <strong>Show unsupported</strong>,
which displays all events including those that do not correspond to the current type.</p>~' );
    --
    l_property_id := 63;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_EVENT',
        p_prompt             => 'Custom Event',
        p_property_type      => 'TEXT',
        p_db_column          => 'BIND_EVENT_TYPE_CUSTOM',
        p_display_length     => 50,
        p_max_length         => 130,
        p_display_group_name => 'WHEN',
        p_help_text          => q'~Specify a custom JavaScript event name if the declarative events provided are not sufficient.~' );
    --
    l_property_id := 64;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_TYPE',
        p_prompt             => 'Selection Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRIGGERING_ELEMENT_TYPE',
        p_display_group_name => 'WHEN',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of page element or construct to be used to trigger the event. For examples of using a specific selection type, see Help on the associated attribute.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item(s)',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Triggered by one or more page items.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button',
        p_return_value  => 'BUTTON',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Triggered by a button.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Triggered by a region.~' );
	--
  	store_property_lov_values (
        p_property_id   => l_property_id,
		p_display_value => 'Column(s)',
		p_return_value  => 'COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Triggered by one or more columns.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DOM Object',
        p_return_value  => 'DOM_OBJECT',
        p_is_deprecated => 'Y',
        p_help_text     => q'~<p>Triggered by the DOM object (<code>document</code>, <code>window</code>) or the <em>id</em> of a DOM object (<code>myElementID</code>).</p>
        <p>Note: <em>DOM Object</em> is deprecated and should be replaced by <em>JavaScript Expression</em> or <em>jQuery Selector</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'jQuery Selector',
        p_return_value  => 'JQUERY_SELECTOR',
        p_help_text     => q'~Triggered by one or more page elements returned by the jQuery Selector.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript Expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION',
        p_help_text     => q'~Triggered by the page elements returned by the JavaScript expression.~' );
    --
    l_property_id := 65;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_REGION',
        p_prompt                   => 'Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TRIGGERING_REGION_ID',
        p_display_group_name       => 'WHEN',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Select the name of the region that triggers the dynamic action.
For example this could be an 'Interactive Report' region, used in conjunction with an 'After Refresh' event, to define a dynamic action that fire whenever the report refreshes.</p>
<p>Having region trigger a dynamic action can be useful when you want to define similar behavior for multiple page items in a region. However, this is only possible for certain events that are raised by items within that region.
For a list of events that support this type of definition and an example of how they could be utilized, see item Help for the <em>Affected Elements</em> &gt; <em>Selection Type</em> of Event Scope on the Action page.</p>~' );
    --
    l_property_id := 66;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_BUTTON',
        p_prompt                   => 'Button',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TRIGGERING_BUTTON_ID',
        p_display_group_name       => 'WHEN',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the button to trigger the dynamic action.~' );
    --
    l_property_id := 67;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_ITEMS',
        p_prompt                   => 'Item(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'TRIGGERING_ELEMENT',
        p_display_length           => 60,
        p_max_length               => 4000,
        p_display_group_name       => 'WHEN',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Enter page or application items to trigger the dynamic action.
For multiple items, separate each item name with a comma.
You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, a comma is placed at the end of the existing text, followed by the item name returned from the list.~' );
    --
    l_property_id := 68;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_DOM_OBJECT',
        p_prompt             => 'DOM Object',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRIGGERING_ELEMENT',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'WHEN',
        p_help_text          => q'~<p>Enter either a DOM object (<code>document</code>, <code>window</code>) or the <em>id</em> of a DOM object (<code>myElementID</code>) as the element to trigger the dynamic action.</p>
<p>Note: <em>DOM Object</em> is deprecated and should be replaced by <em>JavaScript Expression</em> or <em>jQuery Selector</em>.</p>~' );
    --
    l_property_id := 69;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_JQUERY_SELECTOR',
        p_prompt             => 'jQuery Selector',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRIGGERING_ELEMENT',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>To select a page element with an DOM id of <code>my_id</code></dt>
<dd><pre>#my_id</pre></dd>
<dt>To select all the page elements with a class of <code>my_class</code></dt>
<dd><pre>.my_class</pre></dd>
<dt>To select all the page elements that are inputs</dt>
<dd><pre>input</pre></dd>
</dl>~',
        p_display_group_name => 'WHEN',
        p_help_text          => q'~<p>Enter jQuery Selector syntax to return one or more page element to trigger the dynamic action. The jQuery library offers a very powerful selector syntax which provides a way to easily access one or more elements from a page.</p>
<p>Please see the official documentation available from the <a target="_blank" href="http://docs.jquery.com">jQuery homepage</a> for further information about the selector syntax.</p>~' );
    --
    l_property_id := 70;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_CONDITION',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRIGGERING_CONDITION_TYPE',
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify a client-side condition to control whether True or False actions fire. If the condition
                                  evaluates to True, then True actions fire, if the condition evaluates to False, then False actions fire.
                                  If no condition is specified, only True actions fire.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item = Value',
        p_return_value  => 'EQUALS',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item != Value',
        p_return_value  => 'NOT_EQUALS',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is not equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item > Value',
        p_return_value  => 'GREATER_THAN',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is greater than the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item >= Value',
        p_return_value  => 'GREATER_THAN_OR_EQUAL',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is greater than or equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item < Value',
        p_return_value  => 'LESS_THAN',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is less than the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item <= Value',
        p_return_value  => 'LESS_THAN_OR_EQUAL',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is less than or equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item is null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the selected <em>Item</em> is empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item is not null',
        p_return_value  => 'NOT_NULL',
        p_help_text     => q'~Checks if the selected <em>Item</em> is not empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item is in list',
        p_return_value  => 'IN_LIST',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item is not in list',
        p_return_value  => 'NOT_IN_LIST',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> is not in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION',
        p_help_text     => q'~Evaluates the JavaScript Expression specified.~' );
    --
    l_property_id := 80;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EVENT_SCOPE',
        p_prompt             => 'Event Scope',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BIND_TYPE',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the scope of the event, which determines when the event is evaluated a second or successive time.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static',
        p_return_value  => 'bind',
        p_help_text     => q'~Binds the event handler to the triggering element(s) for the lifetime of the current page, but is no longer bound if a triggering element is updated via Partial Page Refresh (PPR).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dynamic',
        p_return_value  => 'live',
        p_help_text     => q'~Binds the event handler to the triggering element(s) for the lifetime of the current page, irrespective of any triggering elements being recreated via Partial Page Refresh (PPR).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once',
        p_return_value  => 'one',
        p_help_text     => q'~Binds the event handler to the triggering element(s) only once. The dynamic action is not triggered again until after the page has been fully refeshed.~' );
    --
    l_property_id := 81;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STATIC_CONTAINER_JQUERY',
        p_prompt             => 'Static Container (jQuery Selector)',
        p_property_type      => 'TEXT',
        p_db_column          => 'BIND_DELEGATE_TO_SELECTOR',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter the static container, of a jQuery Selector, for use by this dynamic action.
You can improve the performance of dynamic actions that have an event scope of <strong>Dynamic</strong>.
This must be an element on the page that itself does not get recreated, but contains the triggering elements that are recreated using Partial Page Refresh (PPR).
This element reference needs to be defined as a jQuery selector.~' );
    --
    l_property_id := 82;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DA_ACTION_TYPE',
        p_prompt             => 'Action',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'ACTION',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify which action you want to perform. The following actions are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional dynamic action plug-ins available here.
These are displayed as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 83;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIRE_WHEN_EVENT_RESULT_IS',
        p_prompt             => 'Fire When Event Result Is',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'EVENT_RESULT',
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Specify whether this action fires when the triggering element condition is met by selecting <strong>True</strong> (True Action), or when it is not met by selecting <strong>False</strong> (False Action).</p>
<p>Note: if there is no condition specified, only <strong>True</strong> actions fire.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'True',
        p_return_value  => 'TRUE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'False',
        p_return_value  => 'FALSE' );
    --
    l_property_id := 84;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIRE_ON_PAGE_LOAD',
        p_prompt             => 'Fire on Initialization',
        p_property_type      => 'YES NO',
        p_db_column          => 'EXECUTE_ON_PAGE_INIT',
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_help_text          => q'~<p>Specify if the action fires on initialization.</p>
        							<p>Initialization has a slightly different meaning depending on how the Dynamic Action is defined. For Dynamic
        							Actions defined to fire on Interactive Grid columns, this specifies if the action fires when the Interactive
        							Grid row is activated for editing. For all other Dynamic Actions, this specifies if the action fires when the
        							page loads.</p>~' );
    --
    l_property_id := 85;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFFECTED_TYPE',
        p_prompt             => 'Selection Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AFFECTED_ELEMENTS_TYPE',
        p_display_group_name => 'AFFECTED_ELEMENTS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to define the page components to be affected when this action is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item(s)',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The action affects the one or more page items you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Button',
        p_return_value  => 'BUTTON',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The action affects the button you select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The action affects the region you select.~' );
    --
	store_property_lov_values (
		p_property_id   => l_property_id,
		p_display_value => 'Column(s)',
		p_return_value  => 'COLUMN',
        p_is_quick_pick => 'Y',
		p_help_text     => q'~The action affects the one or more columns you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DOM Object',
        p_return_value  => 'DOM_OBJECT',
        p_is_deprecated => 'Y',
        p_help_text     => q'~The action affects the page element idenitifed by the DOM Object or DOM ID you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'jQuery Selector',
        p_return_value  => 'JQUERY_SELECTOR',
        p_help_text     => q'~The action affects the page element(s) returned using the jQuery selector syntax you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript Expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION',
        p_help_text     => q'~The action affects the page element(s) returned using the JavaScript Expression you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Triggering Element',
        p_return_value  => 'TRIGGERING_ELEMENT',
        p_help_text     => q'~The action affects the page element or component that triggered the dynamic action.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Event Source',
        p_return_value  => 'EVENT_SOURCE',
        p_help_text     => q'~<p>The action affects the page element where the event originated, which could be different to the "Triggering Element" in some cases.</p>
<p>In this advanced configuration, the triggering element specified is generally a container element (such as a region) which handles events raised by all of it's sub-elements (such as page items in that region).
This selection type can then be used to act upon the sub-element that triggered the event, rather than the container element.
For example, if you have a dynamic action that defines a <strong>'Change'</strong> event on a region on your page, the action affects the actual item in the region that has changed.</p>
<p>Utilizing <em>'Event Source'</em> can be a more efficient way of defining common behaviors that affect many page elements.
The ability of container elements to catch events raised by sub-elements is determined by the event type.
The following event types support this:</p>
<ul>
  <li><strong>After Refresh</strong> (apexafterrefresh)</li>
  <li><strong>Before Refresh</strong> (apexbeforerefresh)</li>
  <li><strong>Change</strong> (change)</li>
  <li><strong>Click</strong> (click)</li>
  <li><strong>Double Click</strong> (dblclick)</li>
  <li><strong>Get Focus</strong> (focus)</li>
  <li><strong>Key Down</strong> (keydown)</li>
  <li><strong>Key Press</strong> (keypress)</li>
  <li><strong>Key Release</strong> (keyup)</li>
  <li><strong>Lose Focus</strong> (blur)</li>
  <li><strong>Mouse Button Press</strong> (mousedown)</li>
  <li><strong>Mouse Button Release</strong> (mouseup)</li>
  <li><strong>Mouse Move</strong> (mousemove)</li>
</ul>~' );
    --
    l_property_id := 86;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AFFECTED_REGION',
        p_prompt                   => 'Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'AFFECTED_REGION_ID',
        p_display_group_name       => 'AFFECTED_ELEMENTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the region to be affected by this action.~' );
    --
    l_property_id := 87;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AFFECTED_BUTTON',
        p_prompt                   => 'Button',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'AFFECTED_BUTTON_ID',
        p_display_group_name       => 'AFFECTED_ELEMENTS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the button to be affected by this action.~' );
    --
    l_property_id := 88;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AFFECTED_ITEMS',
        p_prompt                   => 'Item(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'AFFECTED_ELEMENTS',
        p_display_length           => 100,
        p_max_length               => 4000,
        p_display_group_name       => 'AFFECTED_ELEMENTS',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Enter one or more page items to be affected by this action.
For multiple items, separate each item name with a comma.
<p>You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.~' );
    --
    l_property_id := 89;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFFECTED_DOM_OBJECT',
        p_prompt             => 'DOM Object',
        p_property_type      => 'TEXT',
        p_db_column          => 'AFFECTED_ELEMENTS',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'AFFECTED_ELEMENTS',
        p_help_text          => q'~<p>Enter either a DOM object (<code>document</code>, <code>window</code>) or the <em>id</em> of a DOM object (<code>myElementID</code>) as the element to be affected by this action.</p>
<p>Note: <em>DOM Object</em> is deprecated and should be replaced by <em>JavaScript Expression</em> or <em>jQuery Selector</em>.</p>~' );
    --
    l_property_id := 90;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFFECTED_JQUERY_SELECTOR',
        p_prompt             => 'jQuery Selector',
        p_property_type      => 'TEXT',
        p_db_column          => 'AFFECTED_ELEMENTS',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>To select a page element with an DOM id of <code>my_id</code></dt>
<dd><pre>#my_id</pre></dd>
<dt>To select all the page elements with a class of <code>my_class</code></dt>
<dd><pre>.my_class</pre></dd>
<dt>To select all the page elements that are inputs</dt>
<dd><pre>input</pre></dd>
</dl>~',
        p_display_group_name => 'AFFECTED_ELEMENTS',
        p_help_text          => q'~<p>Enter jQuery Selector syntax to return one or more page elements to be affected by this action. The jQuery library offers a very powerful selector syntax which provides a way to easily access one or more elements from a page.</p>
<p>Please see the official documentation available from the <a target="_blank" href="http://docs.jquery.com">jQuery homepage</a> for further information about the selector syntax.</p>~' );
    --
    l_property_id := 91;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STOP_EXECUTION_ON_ERROR',
        p_prompt             => 'Stop Execution On Error',
        p_property_type      => 'YES NO',
        p_db_column          => 'STOP_EXECUTION_ON_ERROR',
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_help_text          => q'~<p>Specify whether processing of all other pending actions is stopped when an error occurs while executing the current action.</p>
<p>Note: The order of execution of specific actions is determined by the sequence specified for each action. To ensure that actions are run in the same order, Oracle recommends that the sequence numbers be unique for all True Actions and all False Actions.</p>~' );
    --
    l_property_id := 92;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WAIT_FOR_RESULT',
        p_prompt             => 'Wait For Result',
        p_property_type      => 'YES NO',
        p_db_column          => 'WAIT_FOR_RESULT',
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_help_text          => q'~<p>Specify whether all pending actions wait for the result of the current action.
Set this attribute to <strong>Yes</strong> if pending actions are dependent on the result of this action,
or to <strong>No</strong> if there is no dependency and they can execute asynchronously, without waiting.</p>
<p>Note: The order of execution of specific actions is determined by the sequence specified for each action.
To ensure that actions are run in the same order, Oracle recommends that the sequence numbers be unique for all True Actions and all False Actions.</p>~' );
    --
    l_property_id := 93;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'DISPLAY_AS',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify how this item is rendered. The following item types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional item type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins install into this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 94;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'PLUG_SOURCE_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify how this region is rendered. The following region types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional region type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 95;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROCESS_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'PROCESS_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Specify which process type is executed. The following process types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional process type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed within this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 96;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ITEM_NAME',
        p_prompt                => 'Name',
        p_property_type         => 'TEXT',
        p_db_column             => 'NAME',
        p_display_length        => 50,
        p_max_length            => 255,
        p_text_case             => 'UPPER',
        p_restricted_characters => 'SAFE_COMPONENT_NAME',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Enter the name of this item. Item names must be valid Oracle identifiers. It is recommended that item names be no longer then 30 bytes so they can be used as bind variables in SQL Queries.~' );
    --
    l_property_id := 97;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DISPLAY_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SEQUENCE',
        p_display_length     => 6,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~<p>Enter the display sequence for this item. The sequence and other layout settings determine where this item is displayed in relation to other items within the region.</p>
<p>Note: If two items, within the same region, have the same sequence value then they may be displayed in a different order when the application is exported and imported into another environment, such as a test or production environment. To ensure consistency, Oracle recommends you specify unique sequence numbers for every item, or at least for those within the same region.</p>~' );
    --
    l_property_id := 98;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REGION',
        p_prompt                   => 'Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'REGION_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the region in which this item is associated. If the item is displayed then it is displayed within the specified region and relative to other items within this region.~' );
    --
    l_property_id := 99;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LABEL',
        p_prompt             => 'Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'PROMPT',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'LABEL',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the field label for the page item.
The label displays on the page only if the item displays.
Depending on the label alignment and the display, the label displays either in its own HTML table cell or in the same cell.</p>
<p>Item labels can include shortcuts using <code>"SHORTCUT_NAME"</code> syntax.</p>~' );
    --
    l_property_id := 100;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LABEL_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LABEL_ALIGNMENT',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the label alignment. Labels can display above, below, or to the left of the item.
When the label displays next to a form element, it occupies its own HTML table cell.
By changing this label alignment, you can control the label's position within that table cell.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Above ',
        p_return_value  => 'ABOVE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Below',
        p_return_value  => 'BELOW' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center',
        p_return_value  => 'CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center bottom',
        p_return_value  => 'CENTER-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center center',
        p_return_value  => 'CENTER-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center top',
        p_return_value  => 'CENTER-TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left',
        p_return_value  => 'LEFT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left bottom',
        p_return_value  => 'LEFT-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left center',
        p_return_value  => 'LEFT-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left top',
        p_return_value  => 'LEFT-TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right',
        p_return_value  => 'RIGHT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right bottom',
        p_return_value  => 'RIGHT-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right center',
        p_return_value  => 'RIGHT-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right top',
        p_return_value  => 'RIGHT-TOP' );
    --
    l_property_id := 101;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'FIELD_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ITEM_FIELD_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_field_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a label template to define the appearance and layout of this item label.</p>
        <p>Label templates are defined in the application theme.  
        When an item is created, the template is automatically set to the default item template defined in the current theme.</p>
        <p>Many themes contain label templates for displaying required, optional, and hidden labels.<br>
        Universal Theme provides the following label templates:
          <dl>
            <dt>Hidden</dt>
              <dd>Use this when the label should not be displayed on screen. Note that Assistive Technology will still be able to read the label.</dd>
            <dt>Optional</dt>
              <dd>Use this for form items that are optional. The label will be displayed to the side of the item.</dd>
            <dt>Optional - Above</dt>
              <dd>Use this for form items that are optional. The label will be displayed above the item.</dd>
            <dt>Optional - Floating</dt>
              <dd>Use this for form items that are optional. The label will be displayed inside of the input item, and will automatically shrink once the input field has a value.</dd>
            <dt>Required</dt>
              <dd>This label template displays a red asterisk next to the label, and is used for form items where user input is required.  The label will be displayed to the side of the item.</dd>
            <dt>Required - Above</dt>
              <dd>This label template displays a red asterisk next to the label, and is used for form items where user input is required.  The label will be displayed above the item. Item templates enable you to define the user interface attributes as part of a theme and share that definition among many page items.</dd>
            <dt>Required - Floating</dt>
              <dd>This label template displays a red asterisk next to the label, and is used for form items where user input is required.  The label will be displayed inside of the input item, and will automatically shrink once the input field has a value. Item templates enable you to define the user interface attributes as part of a theme and share that definition among many page items.</dd>
          </dl>
          See Also: <a target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 102;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'FIELD_TABLE_CELL_ATTRIBUTES',
        p_prompt                => 'Table Cell Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'CATTRIBUTES',
        p_display_length        => 60,
        p_max_length            => 255,
        p_display_group_name    => 'LABEL',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter any additional attributes used in the HTML table cell that contains this label.~' );
    --
    l_property_id := 103;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_REQUIRED',
        p_prompt             => 'Value Required',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_REQUIRED',
        p_display_group_name => 'VALIDATION',
        p_help_text          => q'~<p>If set to <strong>Yes</strong> and the page item is visible, &PRODUCT_NAME. automatically performs a NOT NULL validation when the page is submitted.</p>
<p>By defining a message called <strong>APEX.PAGE_ITEM_IS_REQUIRED</strong> in Shared Components > Text Messages, the predefined error text can be replaced by an application specific error message.</p>
<p>The display location of the message is defined by the application level setting <strong>Default error display location</strong>.</p>~' );
    --
    l_property_id := 104;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_NEW_GRID',
        p_prompt             => 'Start New Layout',
        p_property_type      => 'YES NO',
        p_db_column          => 'GRID_NEW_GRID',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Specify whether this component displays in a new layout, or in the same layout as the previous component.~' );
    --
    l_property_id := 105;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_NEW_ROW',
        p_prompt             => 'Start New Row',
        p_property_type      => 'YES NO',
        p_db_column          => 'GRID_NEW_ROW',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Specify whether this component displays on the next row after the previous component, or on the same row.~' );
    --
    l_property_id := 106;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_COLUMN',
        p_prompt             => 'Column',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GRID_COLUMN',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'GRID_COLUMNS',
        p_help_text          => q'~Select a specific layout column. Use <strong>Automatic</strong> to automatically determine the next available layout column where the component displays.~' );
    --
    l_property_id := 107;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_NEW_COLUMN',
        p_prompt             => 'New Column',
        p_property_type      => 'YES NO',
        p_db_column          => 'GRID_NEW_COLUMN',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Specify whether this component displays in the next column or in the same column as the previous component.~' );
    --
    l_property_id := 108;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_COLUMN_SPAN',
        p_prompt             => 'Column Span',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GRID_COLUMN_SPAN',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'GRID_COLUMNS',
        p_help_text          => q'~Select how many layout columns this component occupies. Use <strong>Automatic</strong> to balance the available layout columns across all components in the same row.~' );
    --
    l_property_id := 109;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_ROW_SPAN',
        p_prompt             => 'Row Span',
        p_property_type      => 'NUMBER',
        p_db_column          => 'GRID_ROW_SPAN',
        p_display_length     => 2,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Enter how many rows within the HTML table this component occupies. Components are laid out in HTML tables. This attribute determines the value to be used for the <em>ROWSPAN</em> attribute in the table cell for this component.~' );
    --
    l_property_id := 110;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'GRID_COLUMN_ATTRIBUTES',
        p_prompt                => 'Column Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GRID_COLUMN_ATTRIBUTES',
        p_display_length        => 40,
        p_max_length            => 255,
        p_display_group_name    => 'LAYOUT',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter additional attributes set for the layout column. This value replaces the <code>#ATTRIBUTES#</code> substitution placeholder in the layout column template.~' );
    --
    l_property_id := 111;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORMAT_MASK',
        p_prompt             => 'Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'ALL_FORMAT_MASKS',
        p_help_text          => q'~<p>Enter a format mask to apply to this component.
   You can type in the format mask or pick from the list of predefined format masks, based on a sample representation of how that format mask is displayed.</p>
   <p>It is important that number format masks are only applied to components that contain numbers and date format masks are only applied to components that contain dates.
    Otherwise, a runtime error is raised when the component contains a value that can not be converted using the specified format mask.</p>~' );
    --
    l_property_id := 112;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORMAT_MASK_DATE',
        p_prompt             => 'Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'DATE_FORMAT_MASKS',
        p_help_text          => q'~Enter a date format mask to apply to this component.
You can type in the format mask or pick from the list of predefined format masks, based on a sample representation of how that format mask displays.
You can also use substitution syntax to reference a dynamic format mask from an application or page item.~' );
    --
    l_property_id := 113;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FORMAT_MASK_NUMBER',
        p_prompt             => 'Format Mask',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'FORMAT_MASK',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'NUMBER_FORMAT_MASKS',
        p_help_text          => q'~Enter a number format mask to apply to this component.
You can type in the format mask or pick from the list of predefined format masks, based on a sample representation of how that format mask displays.
You can also use substitution syntax to reference a format mask from an application or page item.~' );
    --
    l_property_id := 114;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'NAMED_LOV',
        p_prompt                => 'List of Values',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'NAMED_LOV_ID',
        p_display_group_name    => 'LIST_OF_VALUES',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_lov,
        p_help_text             => q'~Select the name of an exisiting list of values.~' );
    --
    l_property_id := 115;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'DISPLAY_EXTRA_VALUES',
        p_prompt                     => 'Display Extra Values',
        p_property_type              => 'YES NO',
        p_db_column                  => 'LOV_DISPLAY_EXTRA',
        p_display_group_name         => 'LIST_OF_VALUES',
        p_help_text                  => q'~An item may have a session state value which does not occur in the given list of values definition.
Select whether this list of values displays this extra session state value.
If you choose to not display this extra session state value and there is no matching value in the list of values definition, the first value in the list of values is the selected and displayed value.~' );
    --
    l_property_id := 116;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'DISPLAY_NULL_VALUE',
        p_prompt                     => 'Display Null Value',
        p_property_type              => 'YES NO',
        p_db_column                  => 'LOV_DISPLAY_NULL',
        p_display_group_name         => 'LIST_OF_VALUES',
        p_help_text                  => q'~Specify whether the list of values used for this item displays a NULL value at the top of the list.~' );
    --
    l_property_id := 117;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NULL_DISPLAY_VALUE',
        p_prompt             => 'Null Display Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOV_NULL_TEXT',
        p_display_length     => 20,
        p_max_length         => 255,
        p_display_group_name => 'LIST_OF_VALUES',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text to be displayed within the list NULL option at the top of this list. This value also displays when rendering the item if the value is null. If you do not enter any text, it is displayed as a blank line in the list and a blank item when rendered.~' );
    --
    l_property_id := 118;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NULL_RETURN_VALUE',
        p_prompt             => 'Null Return Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOV_NULL_VALUE',
        p_display_length     => 20,
        p_max_length         => 255,
        p_display_group_name => 'LIST_OF_VALUES',
        p_help_text          => q'~Enter the value to be returned if the NULL value is selected in this list of values. If you do not provide a value, the item value is left as null when the NULL option is selected from this list.~' );
    --
    l_property_id := 119;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CASCADING_LOV_PARENT_ITEMS',
        p_prompt                   => 'Cascading LOV Parent Item(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'LOV_CASCADE_PARENT_ITEMS',
        p_display_length           => 50,
        p_max_length               => 255,
        p_display_group_name       => 'LIST_OF_VALUES',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Enter page or application items that trigger the refresh of this list of values.
For multiple items, separate each item name with a comma.
You can type in the name or pick from the list of available items.
If you pick from the list, and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.</p>
<p>This list of values is refreshed whenever the value of any of the specified items are changed on this page.</p>
<p>You should use the page item(s) specified in this attribute within the <em>where clause</em> of this list of values SQL Query to restrict the values returned.</p>
<p>For example, if you have page items for Car Make and Model, you could specify Car Make as the Cascading LOV Parent Item within the List of Values definition for Model, and use Car Make within the where clause for that list of values.
Then whenever Car Make is changed, the LOV for Model is refreshed, and the list only displays values for the currently selected Car Make.</p>~' );
    --
    l_property_id := 120;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LOV_PAGE_ITEMS_TO_SUBMIT',
        p_prompt                   => 'Items to Submit',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'AJAX_ITEMS_TO_SUBMIT',
        p_display_length           => 50,
        p_max_length               => 255,
        p_display_group_name       => 'LIST_OF_VALUES',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Enter column, page or application items to set into session state when the value of any of the specified Cascading LOV Parent Item(s) change on this page.
For multiple items, separate each item name with a comma.
You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.</p>
<p>You should use the page item(s) specified in this attribute within the <em>where clause</em> of this list of values SQL Query to restrict the values returned.</p>
<p>Note: The page items defined in <em>Cascading LOV Parent Item(s)</em> are automatically transmitted and do not need to be entered into this attribute.</p>~' );
    --
    l_property_id := 121;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OPTIMIZE_REFRESH',
        p_prompt             => 'Optimize Refresh',
        p_property_type      => 'YES NO',
        p_db_column          => 'AJAX_OPTIMIZE_REFRESH',
        p_display_group_name => 'LIST_OF_VALUES',
        p_help_text          => q'~<p>Specify under what conditions this list of values is refreshed using Ajax.</p>
<p>If set to <strong>Yes</strong> the Ajax call to get new values performs only when all <em>Cascading LOV Parent Item(s)</em> are not null.
If one item is null, it is assumed that the LOV Query does not return any rows.
In such cases, the select list entries are simply cleared in the browser, without doing an Ajax call.</p>
<p>If set to <strong>No</strong>, the Ajax call always performs.
This option is only used if you specifically handle nullable <em>Cascading LOV Parent Item(s)</em> in the <em>where clause</em> of this list of values SQL Query.
If nullable page items are not properly handled, unnecessary Ajax calls are executed that never return any rows.</p>~' );
    --
    l_property_id := 122;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'LOV_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'LOV',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 2,
        p_sql_max_column_count => 2,
        p_display_group_name   => 'LIST_OF_VALUES',
        p_examples             => q'~<dl>
<dt>Display department name, set department number</dt>
<dd><pre>
select dname  as d,
       deptno as r
  from dept
 order by 1
</pre></dd>
</dl>~',
        p_help_text            => q'~<p>Enter the SQL query definition to populate this list of values. Generally list of value queries are of the form:</p>
<pre>
select [displayValue],
       [returnValue]
  from ...
 where ...
 order by ...
</pre>
<p>Each column selected must have a unique name or alias. Oracle recommends using an alias on any column that includes an SQL expression.</p>~' );
    --
    l_property_id := 123;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_FIELD_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FIELD_ALIGNMENT',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the alignment of the item within the HTML table cell that surrounds it.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center',
        p_return_value  => 'CENTER',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center bottom',
        p_return_value  => 'CENTER-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center center',
        p_return_value  => 'CENTER-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center top',
        p_return_value  => 'CENTER-TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left',
        p_return_value  => 'LEFT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left bottom',
        p_return_value  => 'LEFT-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left center',
        p_return_value  => 'LEFT-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left top',
        p_return_value  => 'LEFT-TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right',
        p_return_value  => 'RIGHT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right bottom',
        p_return_value  => 'RIGHT-BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right center',
        p_return_value  => 'RIGHT-CENTER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right top',
        p_return_value  => 'RIGHT-TOP' );
    --
    l_property_id := 124;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'NUMBER',
        p_db_column          => 'CSIZE',
        p_display_length     => 3,
        p_unit               => c_unit_chars,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Enter the width of the form element to be used to display this item.~' );
    --
    l_property_id := 125;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_MAX_CHARACTERS',
        p_prompt             => 'Maximum Length',
        p_property_type      => 'NUMBER',
        p_db_column          => 'CMAXLENGTH',
        p_display_length     => 4,
        p_unit               => c_unit_chars,
        p_display_group_name => 'VALIDATION',
        p_help_text          => q'~Enter the maximum number of characters users can type into this item.~' );
    --
    l_property_id := 126;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'NUMBER',
        p_db_column          => 'CHEIGHT',
        p_display_length     => 3,
        p_unit               => c_unit_lines,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Enter the height (approximate number of rows) for textareas, shuttles, multi select lists, and any plug-in Item types that support the Has Height Attribute attribute.~' );
    --
    l_property_id := 127;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_VALUE_PLACEHOLDER',
        p_prompt             => 'Value Placeholder',
        p_property_type      => 'TEXT',
        p_db_column          => 'PLACEHOLDER',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter hint text displayed in this item when no value for that item is entered. Once any text is entered into the item, the hint is removed.</p>
<p>This placeholder attribute specifies a short hint that can be used to describe the expected value of a page item.
Such hints are useful for providing a sample value, or an example of the expected format, or instructions such as: Search on title, description, and tag.
For accessibility reasons, this attribute should not be used as an alternative to a well defined, meaningful label.</p>
<p><strong>Attention:</strong> This is a HTML5 feature and only works in modern browsers! Older browsers do not display the text entered into this attribute.</p>~' );
    --
    l_property_id := 128;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ADVANCED_CSS_CLASSES',
        p_prompt                => 'CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'CSS_CLASSES',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Add the CSS classes <code>articlenumber</code> and <code>highlight</code> to the HTML tag of the component</dt>
<dd><pre>articlenumber highlight</pre></dd>
</dl>~',
        p_display_group_name    => 'ADVANCED',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter additional space delimited CSS classes to be included in the component.~' );
    --
    l_property_id := 129;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'CUSTOM_ATTRIBUTES',
        p_prompt                => 'Custom Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'HTML_ATTRIBUTES',
        p_display_length        => 50,
        p_max_length            => 2000,
        p_display_group_name    => 'ADVANCED',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter additional space delimited attributes to be included in the item tag.
For the HTML CLASS attribute, Oracle recommends using the dedicated CSS Classes attribute.~' );
    --
    l_property_id := 130;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ELEMENT_OPTION_HTML_ATTRIBUTES',
        p_prompt                => 'Option HTML Attributes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'TAG_ATTRIBUTES2',
        p_display_length        => 50,
        p_max_length            => 255,
        p_display_group_name    => 'ADVANCED',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter additional space-delimited attributes for the HTML table cell used to display each individual option in a radio group or set of check boxes.~' );
    --
    l_property_id := 131;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_PRE_TEXT',
        p_prompt             => 'Pre Text',
        p_property_type      => 'HTML',
        p_db_column          => 'PRE_ELEMENT_TEXT',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter additional attributes displayed before the HTML table cell that displays each individual option in a radio group or set of check boxes.
You can include HTML, JavaScript, and shortcuts.</p>
<p>You can reference the following substitution strings:</p>
<dl>
  <dt><code>#CURRENT_FORM_ELEMENT#</code></dt>
  <dd>Obtains the name of the HTML form element that this page item is associated with.</dd>
  <dt><code>#CURRENT_ITEM_NAME#</code></dt>
  <dd>Obtains the name of the current page item.</dd>
</dl>~' );
    --
    l_property_id := 132;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ELEMENT_POST_TEXT',
        p_prompt             => 'Post Text ',
        p_property_type      => 'HTML',
        p_db_column          => 'POST_ELEMENT_TEXT',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter additional attributes displayed after the HTML table cell that displays each individual option in a radio group or set of check boxes.
You can include HTML, JavaScript, and shortcuts.</p>
<p>You can reference the following substitution strings:</p>
<dl>
  <dt><code>#CURRENT_FORM_ELEMENT#</code></dt>
  <dd>Obtains the name of the HTML form element that this page item is associated with.</dd>
  <dt><code>#CURRENT_ITEM_NAME#</code></dt>
  <dd>Obtains the name of the current page item.</dd>
</dl>~' );
    --
    l_property_id := 133;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_USED',
        p_prompt             => 'Used',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'USE_CACHE_BEFORE_DEFAULT',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select which value takes precedence, the value from session state or the item source value.</p>
<p>For items with the source type <strong>Database Column</strong>, select <strong>Always, replacing any existing value in session state</strong> unless you do not want the associated row fetch operation to populate the item if the page branches back to itself.
For other source types you must decide, based on how the page is used, whether the previously sourced value is displayed, or if the source type is applied anew for each page view.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always, replacing any existing value in session state',
        p_return_value  => 'NO' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Only when current value in session state is null',
        p_return_value  => 'YES' );
    --
    l_property_id := 134;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SOURCE_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the source type the value of this item is based on.</p>
<p>Note: If <strong>Source: Used</strong> is set to <em>Only when current value in session state is null</em>, the source will not be utilized if a value has been set into session state for this item.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>Database Column</em>, that is retrieved from a built-in fetch row process.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return colon separated value)',
        p_return_value  => 'QUERY_COLON',
        p_help_text     => q'~Set to a single colon separated value, which concatenates each row value, returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'FUNCTION',
        p_help_text     => q'~Set to the value that results from executing the <em>PL/SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'ALWAYS_NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to null as no value specified.~' );
    --
    l_property_id := 135;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_STATIC_VALUE',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the static value used as the source for this item value.~' );
    --
    l_property_id := 136;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SOURCE_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'SOURCE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter the SQL Query used as the source for this item value. If more than one row is returned then the value of the first row is used.~' );
    --
    l_property_id := 137;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SOURCE_QUERY_COLON',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'SOURCE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter the SQL Query that returns one or more rows to be used as the source for this item value. If the result contains multiple rows then the value from each row is formed into a single colon delimited value.~' );
    --
    l_property_id := 138;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SOURCE_ITEM',
        p_prompt                   => 'Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'SOURCE',
        p_display_length           => 80,
        p_max_length               => 255,
        p_display_group_name       => 'SOURCE',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the page or application item used as the source for this item value.
You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 139;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_PLSQL_EXPRESSION',
        p_prompt             => 'PL/SQL Expression',
        p_property_type      => 'PLSQL EXPRESSION VARCHAR2',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter a PL/SQL expression that produces a value used as the source for this item value.~' );
    --
    l_property_id := 140;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_PLSQL_FUNCTION_BODY',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter a PL/SQL function body that returns a value used as the source for this item value.~' );
    --
    l_property_id := 141;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_DB_COLUMN',
        p_prompt             => 'Database Column',
        p_property_type      => 'TEXT',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 128,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Enter the case sensitive database column name used as the source for this item value.</p>
<p>This column must exist in the table specified within the built-in fetch row process defined on this page.
An error is raised, and the page is not loaded, if the database column name does not exist in the referenced table.
Similarly, if there is no built-in fetch row process defined and there is an item with a source type of <strong>Database Column</strong>, then an error is raised, and the page is not loaded when trying to render the page.</p>~' );
    --
    l_property_id := 142;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_PREFERENCE',
        p_prompt             => 'Preference',
        p_property_type      => 'TEXT',
        p_db_column          => 'SOURCE',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the User Preference to be used as the source for this item value.~' );
    --
    l_property_id := 143;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_CALCULATION_COMPUTATION',
        p_prompt             => 'Post Calculation Computation',
        p_property_type      => 'PLSQL EXPRESSION VARCHAR2',
        p_db_column          => 'SOURCE_POST_COMPUTATION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Enter a PL/SQL expression to refine the value of the item.</p>
<p>For example, if this item is named <code>P1_X</code>, you could use post calculation expressions such as <code>UPPER(:P1_X)</code>, <code>INITCAP(:P2_Y)</code>, <code>MIN(:P1_X, :P2_Y - 200)</code>, <code>NVL(:P1_X, :P2_Y)</code>, or a function call such as <code>my_func(:P1_X)</code> to set the final value of the item.
Note that these examples demonstrate that the expressions can reference the current item, or they may reference any other item in session state.</p>~' );
    --
    l_property_id := 144;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAINTAIN_SESSION_STATE',
        p_prompt             => 'Maintain Session State',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'IS_PERSISTENT',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how session state is maintained.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Per Session',
        p_return_value  => 'Y',
        p_help_text     => q'~Maintain for each session only.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Per User',
        p_return_value  => 'U',
        p_help_text     => q'~Maintain for a user across sessions.~' );
    --
    l_property_id := 145;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ITEM_DEFAULT_TYPE',
        p_display_group_name => 'DEFAULT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a default value type for this item.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC_TEXT_WITH_SUBSTITUTIONS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'PLSQL_EXPRESSION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'PLSQL_FUNCTION_BODY' );
    --
    l_property_id := 146;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_STATIC_TEXT',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ITEM_DEFAULT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Specify a default value for this item. The default value is used when the item's value is not derived from session state and when the source value is null.~' );
    --
    l_property_id := 147;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_PLSQL_FUNC_BODY',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'ITEM_DEFAULT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the PL/SQL function body which returns the value for this item.~' );
    --
    l_property_id := 148;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_PLSQL_EXPRESSION',
        p_prompt             => 'PL/SQL Expression',
        p_property_type      => 'PLSQL EXPRESSION VARCHAR2',
        p_db_column          => 'ITEM_DEFAULT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the PL/SQL expression that produces the value for this item.~' );
    --
    l_property_id := 149;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_QUICK_PICKS',
        p_prompt             => 'Show Quick Picks',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_QUICK_PICKS',
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~<p>Specify whether quick picks display for this page item.
Quick picks enable users to select predefined values with just one click, rather than typing in text or selecting from a list of available options.</p>
<p>You should specify quick picks when there is a relatively small, discrete set of <em>common</em> input values.
There is a maximum of ten quick picks that can be defined for an item.
Such user aids are especially useful when defined for an item that has a lengthy select list of available values.</p>~' );
    --
    l_property_id := 150;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LINK_ATTRIBUTES',
        p_prompt             => 'Link Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LINK_ATTR',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter HTML attributes that are associated with the display of each <strong>Quick Pick</strong> link.~' );
    --
    l_property_id := 151;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_01',
        p_prompt             => 'Label 1',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_01',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the first <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 152;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_01',
        p_prompt             => 'Value 1',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_01',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the first <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 153;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_02',
        p_prompt             => 'Label 2',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_02',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the second <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 154;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_02',
        p_prompt             => 'Value 2',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_02',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the second <strong>Quick Pick</strong>. This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 155;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_03',
        p_prompt             => 'Label 3',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_03',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the third <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 156;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_03',
        p_prompt             => 'Value 3',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_03',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the third <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 157;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_04',
        p_prompt             => 'Label 4',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_04',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the forth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 158;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_04',
        p_prompt             => 'Value 4',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_04',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the forth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 159;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_05',
        p_prompt             => 'Label 5',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_05',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the fifth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 160;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_05',
        p_prompt             => 'Value 5',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_05',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the fifth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 161;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_06',
        p_prompt             => 'Label 6',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_06',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the sixth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 162;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_06',
        p_prompt             => 'Value 6',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_06',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the sixth <strong>Quick Pick</strong>. This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 163;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_07',
        p_prompt             => 'Label 7',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_07',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the seventh <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 164;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_07',
        p_prompt             => 'Value 7',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_07',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the seventh <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 165;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_08',
        p_prompt             => 'Label 8',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_08',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the eighth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 166;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_08',
        p_prompt             => 'Value 8',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_08',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the eighth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 167;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_09',
        p_prompt             => 'Label 9',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_09',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the ninth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 168;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_09',
        p_prompt             => 'Value 9',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_09',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the ninth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 169;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_LABEL_10',
        p_prompt             => 'Label 10',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_LABEL_10',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the tenth <strong>Quick Pick</strong>. This label is the text the end user of the application sees.~' );
    --
    l_property_id := 170;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUICK_PICK_VALUE_10',
        p_prompt             => 'Value 10',
        p_property_type      => 'TEXT',
        p_db_column          => 'QUICK_PICK_VALUE_10',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'QUICK_PICKS',
        p_help_text          => q'~Enter the value associated with the tenth <strong>Quick Pick</strong>.  This value replaces the existing item value when the user clicks this quick pick.~' );
    --
    l_property_id := 171;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'READ_ONLY_HTML_ATTRIBUTES',
        p_prompt             => 'Read Only HTML Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'READ_ONLY_DISP_ATTR',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>bgcolor="#FF0000"</pre>~',
        p_display_group_name => 'READ_ONLY',
        p_help_text          => q'~Enter attributes included in the item HTML table cell tag, <code>&lt;td&gt;</code>, when displayed in read only mode.~' );
    --
    l_property_id := 172;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SESSION_STATE_PROTECTION',
        p_prompt             => 'Session State Protection',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PROTECTION_LEVEL',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a Session State Protection level.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unrestricted',
        p_return_value  => 'N',
        p_help_text     => q'~The item can be set by passing the item in a URL or in a form. No checksum is required in the URL.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Checksum Required - Application Level',
        p_return_value  => 'B',
        p_help_text     => q'~The item can be set by passing the item in a URL that includes a checksum specific to the the workspace and application.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Checksum Required - User Level',
        p_return_value  => 'P',
        p_help_text     => q'~The item can be set by passing the item in a URL that includes a checksum specific to the the workspace, application and user.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Checksum Required - Session Level',
        p_return_value  => 'S',
        p_help_text     => q'~The item can be set by passing the item in a URL that includes a checksum specific to the the session.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Restricted - May not be set from browser',
        p_return_value  => 'I',
        p_help_text     => q'~The item can not be altered using the URL or POSTDATA.
Select this option to restrict what can set the item value to internal processes, computations, and so on.
This attribute only applies to items that are not used as data entry items and is always observed, even if Session State Protection is disabled.
Use this attribute for page or application items that have the following <strong>Display As</strong> types:
<ul>
  <li>Display Only (Save State=No)</li>
  <li>Text Field (Disabled, does not save state)</li>
</ul>~' );
    --
    l_property_id := 173;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENCRYPT_SESSION_STATE',
        p_prompt             => 'Store value encrypted in session state',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENCRYPT_SESSION_STATE_YN',
        p_display_group_name => 'SECURITY',
        p_help_text          => q'~<p>Specify whether to encrypt this item when stored in session state.
If the contents of an item contain sensitive data, then you should encrypt the value when it is stored in the &PRODUCT_NAME. session state management tables.
Otherwise, anyone with rights to read the &PRODUCT_NAME. meta data tables could potentially write a query to extract this sensitive data.</p>
<p>Note: Only values up to 4000 bytes in length can be encrypted.
Attempts to encrypt values longer than 4000 bytes produce an error message.</p>~' );
    --
    l_property_id := 174;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ESCAPE_SPECIAL_CHARACTERS',
        p_prompt             => 'Escape special characters',
        p_property_type      => 'YES NO',
        p_db_column          => 'ESCAPE_ON_HTTP_OUTPUT',
        p_display_group_name => 'SECURITY',
        p_help_text          => q'~To prevent Cross-Site Scripting (XSS) attacks, always set this attribute to <strong>Yes</strong>.
If you need to render HTML tags stored in the page item or in the entries of a list of values, you can set this flag to <strong>No</strong>.
In such cases, you should take additional precautions to ensure any user input to such fields are properly escaped when entered and before saving.~' );
    --
    l_property_id := 175;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RESTRICTED_CHARACTERS',
        p_prompt             => 'Restricted Characters',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RESTRICTED_CHARACTERS',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select how to restrict the characters that can be saved in session state.
&PRODUCT_NAME. displays an error message if a user tries to save data that does not conform to the selected character restriction.</p>
<p>Restricting the characters hardens application security and is a possible counter measure to cross-site scripting (XSS) attacks.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Whitelist for a-Z, 0-9 and space',
        p_return_value  => 'US_ONLY',
        p_help_text     => q'~Only characters a-z, A-Z, 0-9 and space can be saved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Blacklist HTML command characters (<>")',
        p_return_value  => 'WEB_SAFE',
        p_help_text     => q'~Reserved HTML characters can NOT be saved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Blacklist &<>"/;,*|=% and --',
        p_return_value  => 'NO_SPECIAL_CHAR',
        p_help_text     => q'~The following characters: &amp;, &lt;, &gt;, ", /, ;, ",", *, |, =, % and "--" (PL/SQL comment) can NOT be saved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Blacklist &<>"/;,*|=% or -- and new line',
        p_return_value  => 'NO_SPECIAL_CHAR_NL',
        p_help_text     => q'~The following characters: &amp;, &lt;, &gt;, ", /, ;, ",", *, |, =, %, "--", and new line characters can NOT be saved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Workspace Schema',
        p_return_value  => 'WORKSPACE_SCHEMA',
        p_is_internal   => 'Y' );
    --
    l_property_id := 176;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'BUTTON_NAME',
        p_prompt                => 'Button Name',
        p_property_type         => 'TEXT',
        p_db_column             => 'BUTTON_NAME',
        p_display_length        => 60,
        p_max_length            => 255,
        p_restricted_characters => 'SAFE_COMPONENT_NAME',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~<p>Enter the name used to identify this button within susbsequent page processing.
When the page is submitted, by pressing this button, the REQUEST value is set to the name entered.</p>
<p>Button name does not have to be unique, for buttons on the same page or in the same region.
You can define multiple buttons with the same button name, which sets the same REQUEST value when pressed.
This is useful for defining buttons with different <strong>Button Labels</strong> or conditions, that need to execute the same page processing, by simply evaluating the common REQUEST value.</p>
<p>If you name the button <code>FLOW_RESET_BUTTON</code> then the button resets the current page without doing a page submit.</p>~' );
    --
    l_property_id := 177;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_LABEL',
        p_prompt             => 'Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'BUTTON_IMAGE_ALT',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_translatable    => true,
        p_help_text          => q'~If the button is text, enter the text to be displayed on the button. If the button is an image, then this text becomes the ALT text for the image.~' );
    --
    l_property_id := 178;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_POSITION',
        p_prompt             => 'Button Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BUTTON_POSITION',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'BUTTON_POSITIONS',
        p_help_text          => q'~<p>Select the position to display this button.
The available template default positions identify the display position within the page template.
Using REGION_TEMPLATE button positions enables you to define a button position within a region template.
Buttons using REGION_TEMPLATE positions only be display if:</p>
<ol>
<li>The region template contains the position. For example <code>#EDIT#</code> is required to show a button in the REGION_TEMPLATE_EDIT position. </li>
<li>The button is part of a region.</li>
</ol>
<p>Buttons using REGION_TEMPLATE positions take precedence over static region template defined links.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left of Page Title',
        p_return_value  => 'LEFT_OF_TITLE',
        p_comment_text  => '$$$ Add John''s suggested improvement, to only show this when template has either PAGE_TITLE or TITLE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right of Page Title',
        p_return_value  => 'RIGHT_OF_TITLE',
        p_comment_text  => '$$$ Add John''s suggested improvement, to only show this when template has either PAGE_TITLE or TITLE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Above Region',
        p_return_value  => 'ABOVE_BOX' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top of Region',
        p_return_value  => 'TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom of Region',
        p_return_value  => 'BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top and Bottom of Region',
        p_return_value  => 'TOP_AND_BOTTOM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Below Region',
        p_return_value  => 'BELOW_BOX' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right of Interactive Report Search Bar',
        p_return_value  => 'RIGHT_OF_IR_SEARCH_BAR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Items',
        p_return_value  => 'BODY' );
    --
    l_property_id := 179;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HORIZONTAL_ALIGNMENT',
        p_prompt             => 'Horizontal Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'HORIZONTAL_ALIGNMENT',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the horizontal alignment for this button within the specified template position.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 180;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STATIC_ID',
        p_prompt             => 'Static ID',
        p_property_type      => 'TEXT',
        p_db_column          => 'STATIC_ID',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter the static ID for this component. If defined, this ID can be useful if developing custom JavaScript behavior for the component.</p>~' );
    --
    l_property_id := 182;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BUTTON_TEMPLATE',
        p_prompt                   => 'Button Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'BUTTON_TEMPLATE_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Select a button template to define the appearance of this button.~' );
    --
    l_property_id := 183;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_IS_HOT',
        p_prompt             => 'Hot',
        p_property_type      => 'YES NO',
        p_db_column          => 'BUTTON_IS_HOT',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Select whether to use the <strong>Normal</strong> or <strong>Hot</strong> button template when rendering this button.~' );
    --
    l_property_id := 187;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_TARGET',
        p_prompt             => 'Target',
        p_property_type      => 'LINK',
        p_db_column          => 'BUTTON_REDIRECT_URL',
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Click the Target to invoke a modal dialog. You can enter the target to be called when this button is clicked. Only enter a target for buttons that should not invoke page processing when clicked (for example, a Cancel button).~' );
    --
    l_property_id := 188;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_EXECUTE_VALIDATIONS',
        p_prompt             => 'Execute Validations',
        p_property_type      => 'YES NO',
        p_db_column          => 'BUTTON_EXECUTE_VALIDATIONS',
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~<p>If the page is submitted and this attribute is set to <strong>Yes</strong>, all validations defined for the page and also the built-in validations are executed (such as required, valid number or valid date) on the server-side.
In addition, if <em>Compatibility Mode</em> of the application is set to <strong>5.1</strong> or above, &PRODUCT_NAME. will also perform client-side validations, such as item required. Please see "Compatibility Mode" in the Release Notes for further details.
The page will not be submitted until all issues are fixed.</p>
<p>If set to <strong>No</strong>, none of the defined validations nor the built-in validations are executed.
If you want a specific validation to execute independent of this setting, modify the validation and set the validation attribute <strong>Always Execute</strong> to <strong>Yes</strong>.</p>
<p>This attribute is particularly useful for buttons such as Delete or Cancel where the majority of validations should not be executed.
Users should generally not be stopped from performing such actions if an item is null or of the wrong type.
However, if actions, such as Delete, should only be performed by authorized users it is important to set the corresponding validation attribute <strong>Always Execute</strong> to <strong>Yes</strong>, or ensure there is an appropriate condition defined on the button itself so that the button is only displayed to authorized users.</p>~' );
    --
    l_property_id := 189;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_DATABASE_ACTION',
        p_prompt             => 'Database Action',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATABASE_ACTION',
        p_display_group_name => 'BEHAVIOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of SQL operation that clicking this button performs.
This selection is used to trigger the specified database action within built-in Automatic Row Processing (DML).
If you do not select a type, database processing executes based on the REQUEST value, which is set based on the <strong>Button Name</strong> defined for this button.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL INSERT action',
        p_return_value  => 'INSERT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL UPDATE action',
        p_return_value  => 'UPDATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL DELETE action',
        p_return_value  => 'DELETE' );
    --
    l_property_id := 190;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PARENT_REGION',
        p_prompt                   => 'Parent Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PARENT_REGION_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the parent region to which this region belongs. If a parent region is selected then this region is rendered completely inside the parent region.~' );
    --
    l_property_id := 191;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_DISPLAY_POINT',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'REGION_POSITIONS',
        p_help_text          => q'~Select the template position used to display this region. The selections available are derived from the appropriate template positions defined within the current theme, for the page's user interface.~' );
    --
    l_property_id := 192;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PROCESS_POINT',
        p_prompt             => 'Point',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PROCESS_POINT',
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select at what point in page rendering or processing this process is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'New Session',
        p_return_value  => 'ON_NEW_INSTANCE',
        p_help_text     => q'~Executes when a new session is generated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Header',
        p_return_value  => 'BEFORE_HEADER',
        p_help_text     => q'~Rendering: Executes before the page renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Header',
        p_return_value  => 'AFTER_HEADER',
        p_help_text     => q'~Rendering: Executes after the header renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Regions',
        p_return_value  => 'BEFORE_BOX_BODY',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Rendering: Executes before the regions render.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Regions',
        p_return_value  => 'AFTER_BOX_BODY',
        p_help_text     => q'~Rendering: Executes after the regions render.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Footer',
        p_return_value  => 'BEFORE_FOOTER',
        p_help_text     => q'~Rendering: Executes before the footer renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Footer',
        p_return_value  => 'AFTER_FOOTER',
        p_help_text     => q'~Rendering: Executes after the page renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Submit',
        p_return_value  => 'ON_SUBMIT_BEFORE_COMPUTATION',
        p_help_text     => q'~Processing: Executes after the page is submitted, but before computations, validations, and page processes performed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Processing',
        p_return_value  => 'AFTER_SUBMIT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Processing: Executes after validations and computations performed, when page processing performed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ajax Callback',
        p_return_value  => 'ON_DEMAND',
        p_help_text     => q'~Executes when called by apex.server JavaScipt APIs.~' );
    --
    l_property_id := 193;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'REGION_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter the SQL source for this component.~' );
    --
    l_property_id := 194;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_PLAIN',
        p_prompt             => 'Text',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PLUG_SOURCE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the text source for this component.~' );
    --
    l_property_id := 195;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'TEXT',
        p_db_column          => 'DIALOG_HEIGHT',
        p_display_length     => 10,
        p_max_length         => 20,
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~Enter the height of the dialog, in pixels, for example, <strong><em>500</em></strong>.
The substitution string <code>#DIALOG_HEIGHT#</code> in the dialog initialization code of the page template is replaced with the value entered.~' );
    --
    l_property_id := 196;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTHENTICATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SUPPORTED UI',
        p_db_column          => 'SCHEME_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'PLUGINS',
        p_help_text          => q'~<p>Select which authentication scheme is applied. The following authentication types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may have additional authentication type plug-ins available here.
These are displayed as <em>&lt;My Plugin&gt; [Plug-in]</em>.
The following plug-ins are installed in this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    l_property_id := 197;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUBSCRIBED_FROM',
        p_prompt             => 'Subscribed From',
        p_property_type      => 'SUBSCRIPTION',
        p_db_column          => 'REFERENCE_ID',
        p_display_group_name => 'SUBSCRIPTION',
        p_help_text          => q'~Select an application whose authentication scheme you want this scheme to subscribe to.~' );
    --
    l_property_id := 198;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLSQL_CODE',
        p_prompt             => 'PL/SQL Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'PLSQL_CODE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the PL/SQL source utilized within this authentication scheme.~' );
    --
    l_property_id := 199;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VERIFY_FUNCTION_NAME',
        p_prompt             => 'Verify Function Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'VERIFICATION_FUNCTION',
        p_display_length     => 60,
        p_max_length         => 255,
        p_examples           => q'~<dl>
<dt>Restrict the use of an application to specific business hours</dt>
<dd><pre>
function check_business_hours return boolean
is
begin
    return to_char(to_char(sysdate, 'hh24:mi')) between '08:00' and '17:00';
end check_business_hours;
</pre></dd>
</dl>~',
        p_display_group_name => 'SESSION_NOT_VALID',
        p_help_text          => q'~Enter the name of a function that is called after the session sentry has returned successfully.
The function can either be defined in the "PL/SQL Code" attribute or in the database.
The result must be boolean, with "True" representing the user is verified, and "False" representing the user has failed verification.~' );
    --
    l_property_id := 200;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INVALID_SESSION_TYPE',
        p_prompt             => 'Invalid Session Redirection',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'INVALID_SESSION_TYPE',
        p_display_group_name => 'SESSION_NOT_VALID',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select where &PRODUCT_NAME. redirects to if the session is not valid.
This happens if the <strong>Sentry Function</strong> or the <strong>Verify Function</strong> returns FALSE on normal page requests, but not on Ajax requests.</p>
<p>Note: If using the <strong>'Custom'</strong> Authentication Scheme Type, the <strong>'Sentry Function'</strong> attribute in the Authentication Scheme can also be utilized.
For plug-in Authentication Scheme Types this is defined by the plug-in developer in the <strong>'Session Sentry Function Name'</strong> callback.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Login Page',
        p_return_value  => 'LOGIN',
        p_help_text     => q'~Redirect to the Login URL defined in the application attributes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Built-In Login Page',
        p_return_value  => 'BUILTIN_LOGIN',
        p_help_text     => q'~Redirect to the URL defined in <code>wwv_flow_custom_auth_std.login_page</code>, provided by &PRODUCT_NAME..~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL',
        p_return_value  => 'URL',
        p_help_text     => q'~Redirect to the URL you enter, such as <code>f?p=&amp;APP_ID.:101:&amp;SESSION</code>.~' );
    --
    l_property_id := 201;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INVALID_SESSION_URL',
        p_prompt             => 'Invalid Session URL',
        p_property_type      => 'LINK',
        p_db_column          => 'INVALID_SESSION_URL',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'SESSION_NOT_VALID',
        p_help_text          => q'~Enter a URL that &PRODUCT_NAME. redirects to if the session sentry function returns FALSE. This would normally be a URL to a login page or single sign-on portal. For example, f?p=&amp;APP_ID.:101:&amp;SESSION~' );
    --
    l_property_id := 202;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRE_AUTHENTICATION_PROCEDURE_NAME',
        p_prompt             => 'Pre-Authentication Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRE_AUTH_PROCESS',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'LOGIN_PROCESSING',
        p_help_text          => q'~<p>Enter the name of a procedure to be executed after the login page is submitted and just before credentials verification is performed.
The procedure can be defined in the "PL/SQL Code" attribute or within the database.</p>
<p>Authentication schemes, where user credential checking is done outside of &PRODUCT_NAME., typically do not execute the Pre-Authentiation procedure.
Examples include <em>HTTP Header Variable</em>, <em>Oracle Application Server Single Sign-On</em> and custom authentication schemes that use <code>apex_authentication.post_login</code> instead of <code>apex_authentication.login</code>.</p>~' );
    --
    l_property_id := 203;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_AUTHENTICATION_PROCEDURE_NAME',
        p_prompt             => 'Post-Authentication Procedure Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'POST_AUTH_PROCESS',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'LOGIN_PROCESSING',
        p_help_text          => q'~Enter the name of a procedure to be executed by the &PRODUCT_NAME. login procedure (login API) after the authentication step (login credentials verification).
The login procedure executes this code after performing normal login procedure duties, which include setting a cookie and registering the session, but before it redirects to the desired application page.
The procedure can be defined in the "PL/SQL Code" attribute or in the database.~' );
    --
    l_property_id := 204;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOGOUT_TYPE',
        p_prompt             => 'Logout Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOGOUT_TYPE',
        p_is_query_only      => true,
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'POST_LOGOUT_URL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Enter where &PRODUCT_NAME. redirects to after logout.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Home Page',
        p_return_value  => 'HOME',
        p_help_text     => q'~Redirect to the Home Link value specified in the application attributes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL',
        p_return_value  => 'URL',
        p_help_text     => q'~Redirect to the URL you enter, such as <code>f?p=&amp;APP_ID.:101:&amp;SESSION</code>.~' );
    --
    l_property_id := 205;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_LOGOUT_URL',
        p_prompt             => 'Post-Logout URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOGOUT_URL',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'POST_LOGOUT_URL',
        p_help_text          => q'~Enter the URL where your application is redirected after &PRODUCT_NAME. has cleaned up the user session.~' );
    --
    l_property_id := 206;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COOKIE_NAME',
        p_prompt             => 'Cookie Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'COOKIE_NAME',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'SESSION_COOKIE_ATTRIBUTES',
        p_help_text          => q'~<p>Enter the name for the session cookie, which is required to identify a &PRODUCT_NAME. session, together with the session id in the URL.
If you do not specify a session cookie name, &PRODUCT_NAME. utilizes a default value.</p>
<p>By entering the same cookie name in multiple applications, each of the applications can utilize the same session cookie.
Therefore, a URL call from a &PRODUCT_NAME. application to another &PRODUCT_NAME. application, with the same cookie name, does not require the user to re-authenticate, because the new application can utilize the existing session cookie.</p>~' );
    --
    l_property_id := 207;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COOKIE_PATH',
        p_prompt             => 'Cookie Path',
        p_property_type      => 'TEXT',
        p_db_column          => 'COOKIE_PATH',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'SESSION_COOKIE_ATTRIBUTES',
        p_help_text          => q'~<p>Enter the URL path attribute for the session cookie.
If the start of the request URL does not match the path specified, the cookie is not sent to the browser.
The default value is the path of the request URL.</p>
<p>Use this attribute to specify a less restrictive path, when you wish to share session cookies between applications that have initially conforming URL paths.</p>~' );
    --
    l_property_id := 208;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COOKIE_DOMAIN',
        p_prompt             => 'Cookie Domain',
        p_property_type      => 'TEXT',
        p_db_column          => 'COOKIE_DOMAIN',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'SESSION_COOKIE_ATTRIBUTES',
        p_help_text          => q'~<p>Enter the URL domain attribute for the session cookie.
If the tail comparison of the request URL does not match the domain specified, the cookie is not sent to the browser.
The default value is the host name of the request URL.</p>
<p>Use this attribute to specify a less restrictive domain, when you wish to share session cookies between applications that have common domains.
For example, <code>my.yahoo.com</code>, <code>sport.yahoo.com</code>, and <code>finance.yahoo.com</code> could all access the same cookie if a domain of <code>yahoo.com</code> is entered.</p>~' );
    --
    l_property_id := 209;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SECURE',
        p_prompt             => 'Secure',
        p_property_type      => 'YES NO',
        p_db_column          => 'USE_SECURE_COOKIE_YN',
        p_display_group_name => 'SESSION_COOKIE_ATTRIBUTES',
        p_help_text          => q'~<p>Specify <strong>Yes</strong> to enable the session management cookie to be sent from the browser only when the protocol is HTTPS.
Select <strong>No</strong> to enable the session management cookie to be sent from the browser when the protocol is HTTP or HTTPS.</p>
<p>If SSL is configured on your web server, you should select <strong>Yes</strong> to strengthen your application's security by preventing unencrypted HTTP traffic.</p>~' );
    --
    l_property_id := 210;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RAS_MODE',
        p_prompt             => 'RAS Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RAS_MODE',
        p_display_group_name => 'REAL_APPLICATION_SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select how Oracle Real Application Security (RAS) is used in this application.</p>
<p>If you enable RAS Mode, make sure that the users have privileges to access the application's schema objects.
For example, with <strong>External Users</strong> you can grant database privileges to a <em>RAS Dynamic Application Role</em> and configure it in this authentication scheme as a <em>Dynamic Role</em>.
You can also enable roles via a call to <em>apex_authorization.enable_dynamic_groups</em>, such as within a Post-Authentication procedure.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => '0',
        p_help_text     => q'~Real Application Security is not used in the application.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'External Users',
        p_return_value  => '1',
        p_help_text     => q'~&PRODUCT_NAME. assumes that all users are internal and passes <em>false</em> via the <em>is_external</em> parameter to <em>sys.dbms_xs_sessions.assign_user</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Internal Users',
        p_return_value  => '2',
        p_help_text     => q'~&PRODUCT_NAME. passes <em>true</em> via the <em>is_external</em> parameter to <em>sys.dbms_xs_sessions.assign_user</em>.~' );
    --
    l_property_id := 211;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RAS_DYNAMIC_ROLES',
        p_prompt             => 'Dynamic Roles',
        p_property_type      => 'TEXT',
        p_db_column          => 'RAS_DYNAMIC_ROLES',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'REAL_APPLICATION_SECURITY',
        p_help_text          => q'~<p>Enter a colon separated list of Real Application Security Dynamic Roles, such as:
<pre>
DB_EMP:DB_DEPT
</pre></p>
<p>&PRODUCT_NAME. enables these roles on login, by passing them via the <em>enable_dynamic_roles</em> parameter of <em>sys.dbms_xs_sessions.assign_user</em>.</p>~' );
    --
    l_property_id := 212;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RAS_NAMESPACES',
        p_prompt             => 'Namespaces',
        p_property_type      => 'TEXT',
        p_db_column          => 'RAS_NAMESPACES',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'REAL_APPLICATION_SECURITY',
        p_help_text          => q'~<p>Enter a colon separated list of Real Application Security Namespace Templates, such as:
<pre>
NS1:NS2
</pre></p>
<p>&PRODUCT_NAME. enables these namespaces on login, by passing them via the <em>namespaces</em> parameter of <em>sys.dbms_xs_sessions.assign_user</em>.</p>~' );
    --
    l_property_id := 213;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXCLUDE_TITLE_FROM_TRANSLATION',
        p_prompt             => 'Exclude Title from Translation',
        p_property_type      => 'YES NO',
        p_db_column          => 'EXCLUDE_TITLE_FROM_TRANSLATION',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Specify whether you want to exclude this title from translation. This attribute has no effect, except when translating the application into another language.~' );
    --
    l_property_id := 214;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_HTML_CODE',
        p_prompt             => 'HTML Code',
        p_property_type      => 'HTML',
        p_db_column          => 'PLUG_SOURCE',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'SOURCE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the region source or content, depending on the <em>Region Type</em> selected.~' );
    --
    l_property_id := 215;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'SOURCE_PAGE_ITEMS_TO_SUBMIT',
        p_prompt                   => 'Page Items to Submit',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'AJAX_ITEMS_TO_SUBMIT',
        p_display_length           => 50,
        p_max_length               => 255,
        p_display_group_name       => 'SOURCE',
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~<p>Enter page or application items to be set into session state when the region is refreshed by a partial page refresh.
For multiple items, separate each item name with a comma.
You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.</p>
<p>The region can be refreshed with partial page refresh either during pagination, if <em>Enable Partial Page Refresh</em> is set to <strong>Yes</strong>), or with the Refresh action within a Dynamic Action.</p>
These page items can then be used in the <em>where condition</em> of the Region Source SQL Query to restrict the query result.</p>~' );
    --
    l_property_id := 216;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SCHEMA_OVERRIDE_ITEM',
        p_prompt             => 'Schema Override Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'PLUG_QUERY_PARSE_OVERRIDE',
        p_display_length     => 45,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_internal        => true,
        p_help_text          => q'~Enter the page or application item to be used as the overriding parsing schema.  This is for internal applications only.~' );
    --
    l_property_id := 217;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REGION_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PLUG_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a region template to define the appearance and layout of this region.</p>
        <p>Region templates are defined in the application theme.  
        When a region is created, the template is automatically set to the default region template defined in the current theme.</p>
        <p>Many themes contain region templates for displaying reports, forms, alerts, buttons, collapsible (hide / show) content, login forms, and so forth.<br>
        Universal Theme provides the following region templates:
          <dl>
            <dt>Alert</dt>
            <dt>Blank with Attributes</dt>
            <dt>Buttons Container</dt>
            <dt>Carousel Container</dt>
            <dt>Collapsible</dt>
            <dt>Content Block</dt>
            <dt>Hero</dt>
            <dt>Inline Dialog</dt>
            <dt>Interactive Report</dt>
            <dt>Login</dt>
            <dt>Standard</dt>
            <dt>Tabs Container</dt>
            <dt>Title Bar</dt>
            <dt>Wizard Container</dt>
          </dl>
          See Also: <a target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 218;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_DISPLAY_POSITION',
        p_prompt             => 'Item Display Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_ITEM_DISPLAY_POINT',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where page items display in relation to the main region content.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Above Content',
        p_return_value  => 'ABOVE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Below Content',
        p_return_value  => 'BELOW' );
    --
    l_property_id := 219;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_DISPLAY_SELECTOR',
        p_prompt             => 'Region Display Selector',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_IN_REG_DISP_SEL_YN',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify <strong>Yes</strong> if you want this region included in the Region Display Selector.
This attribute is only utilized if a region type of <em>Region Display Selector</em> is defined and viewable on the page.</p>
<p>When a user clicks on a region name, included in the Region Display Selector, only the selected region shows and all other listed regions are hidden.
The first entry within the Region Display Selector is <em>Show All</em>, which enables the user to show all of the available regions rather than only the previously selected region.</p>
<p>If a region is not displayable, based on the region conditions, then it is not included in the lists of regions within the Region Display Selector.</p>~' );
    --
    l_property_id := 220;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REGION_IMAGE',
        p_prompt             => 'Region Image',
        p_property_type      => 'TEXT',
        p_db_column          => 'REGION_IMAGE',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter a reference to an image that displays in the upper left of the region. There is no control over the table tag used to display this image.~' );
    --
    l_property_id := 221;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IMAGE_TAG_ATTRIBUTES',
        p_prompt             => 'Image Tag Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'REGION_IMAGE_ATTR',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Enter image tag attributes included in the image HTML. This can be used for attributes such as height, width or image ALT text (if the image is non-decorative).</p>
<p>Note: If no ALT is defined in the image tag attributes, &PRODUCT_NAME. defaults to rendering the image as a decorative image, for example with an empty ALT tag.</p>~' );
    --
    l_property_id := 222;
    --
    -- region and page caching
    --
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CACHE_MODE',
        p_prompt             => 'Caching',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CACHE_MODE',
        p_display_group_name => 'SERVER_CACHE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the &PRODUCT_NAME. engine can cache HTML text on the server side. If caching can be used, it emits the cached result instead of computing it again. This cuts down on expensive computation time on the server. This feature is unrelated to the browser's caching capabilities.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'NOCACHE',
        p_help_text     => q'~Content is not cached and computed for each request.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled',
        p_return_value  => 'CACHE',
        p_help_text     => q'~Content is cached and utilized by all users.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cache By User',
        p_return_value  => 'USER',
        p_help_text     => q'~Content is cached specifically for each user.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cache By Session',
        p_return_value  => 'SESSION',
        p_help_text     => q'~Content is cached specifically for each session.~' );
    --
    l_property_id := 223;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOMIZABLE',
        p_prompt             => 'Customizable',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_CUSTOMIZED',
        p_display_group_name => 'CUSTOMIZATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether display attributes in this region can be customized by the user.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Not Customizable By End Users',
        p_return_value  => '0' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Customizable and Shown By Default',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Customizable and Not Shown By Default',
        p_return_value  => '2' );
    --
    l_property_id := 224;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOMIZED_OPTION_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'PLUG_CUSTOMIZED_NAME',
        p_display_length     => 70,
        p_max_length         => 255,
        p_display_group_name => 'CUSTOMIZATION',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the label for the link that displays under this region, which provides access to the region customization page.
This label only displays for regions that are customizable.~' );
    --
    l_property_id := 225;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'REGION_FUNCTION_RETURNING_SQL',
        p_prompt               => 'PL/SQL Function Body returning SQL Query',
        p_property_type        => 'PLSQL FUNCTION BODY SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter a PL/SQL Function that returns a SQL query that is used as the basis for this region.~' );
    --
    l_property_id := 226;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BRANCH_TYPE',
        p_display_group_name => 'BEHAVIOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the type of page branch to perform.</p>
<dl>
<dt>Redirect branches</dt>
<dd>&PRODUCT_NAME. returns the new page or URL to the browser, which performs a new request before showing the resultant page.
The major advantage is that the end users can refresh the page without losing context, as the browser address contains the full page URL.
The disadvantage is that the browser performs an additional request to show the page.</dd>
<dt>Show Only branches</dt>
<dd>&PRODUCT_NAME. immediately renders the new page as part of the current page processing, without performing another request.
This has the advantage that the browser does not have to perform an additional request.
The major disadvantage is that the browser address will be <code>wwv_flow.accept</code>.
If the end users refreshes the page the browser will ask to resend the data, as the browser address is not a full page URL.</dd>
</dl>
<p>Oracle recommends that you select one of the redirect branch types to provide a better end user experience.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page or URL (Redirect)',
        p_return_value  => 'REDIRECT_URL',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'URL Identified by Item (Redirect)',
        p_return_value  => 'BRANCH_TO_URL_IDENT_BY_ITEM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Returning a URL (Redirect)',
        p_return_value  => 'BRANCH_TO_FUNCTION_RETURNING_URL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page (Show only)',
        p_return_value  => 'BRANCH_TO_STEP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Identified by Item (Show only)',
        p_return_value  => 'BRANCH_TO_PAGE_IDENT_BY_ITEM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Function Returning a Page (Show only)',
        p_return_value  => 'BRANCH_TO_FUNCTION_RETURNING_PAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Procedure',
        p_return_value  => 'PLSQL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page Processing {not common}',
        p_return_value  => 'BRANCH_TO_PAGE_ACCEPT' );
    --
    l_property_id := 227;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_POINT',
        p_prompt             => 'Point',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BRANCH_POINT',
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select at what point in page rendering or processing this branch is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Header',
        p_return_value  => 'BEFORE_HEADER',
        p_help_text     => q'~Rendering: Branches before the page renders.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Submit',
        p_return_value  => 'BEFORE_COMPUTATION',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Processing: Branches after submitting the page and before computation, validations and processes are executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Validating',
        p_return_value  => 'BEFORE_VALIDATION',
        p_help_text     => q'~Processing: Branches before validations performed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Processing',
        p_return_value  => 'BEFORE_PROCESSING',
        p_help_text     => q'~Processing: Branches before processing performed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Processing',
        p_return_value  => 'AFTER_PROCESSING',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Processing: Branches after processing performed.~' );
    --
    l_property_id := 228;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TARGET',
        p_prompt             => 'Target',
        p_property_type      => 'LINK',
        p_db_column          => 'TARGET',
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Click the Target to invoke a modal dialog. You can enter the target that is called when this branch is invoked.~',
        p_comment_text       => q'~$$$ can't we merge that with BUTTON_TARGET?~' );
    --
    l_property_id := 229;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_PAGE_NUMBER',
        p_prompt             => 'Page Number',
        p_property_type      => 'PAGE',
        p_db_column          => 'BRANCH_PAGE_NUMBER',
        p_display_length     => 5,
        p_max_length         => 20,
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Enter the page to which this branch is redirected.~' );
    --
    l_property_id := 230;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BRANCH_ITEM',
        p_prompt                   => 'Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'BRANCH_ITEM',
        p_display_length           => 30,
        p_max_length               => 255,
        p_display_group_name       => 'BEHAVIOR',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the page or application item containing a page number or URL to redirect to.
This item can be set by the calling page, or by a process when the page first loads.
Specifying an item provides an easy way to dynamically set the branch for pages that are called from many other pages.~' );
    --
    l_property_id := 231;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_PLSQL_FUNCTION_BODY',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'BRANCH_PLSQL_FUNCTION_BODY',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Enter a PL/SQL Function that returns a page number or URL to redirect to.~' );
    --
    l_property_id := 232;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_PLSQL',
        p_prompt             => 'PL/SQL Code',
        p_property_type      => 'PLSQL',
        p_db_column          => 'BRANCH_PLSQL',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Enter the PL/SQL code executed by the branch. This PL/SQL procedure is responsible for invoking the necessary URL.~' );
    --
    l_property_id := 233;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SAVE_STATE_BEFORE_BRANCH',
        p_prompt             => 'Save State before Branching',
        p_property_type      => 'YES NO',
        p_db_column          => 'SAVE_STATE_BEFORE_BRANCH_YN',
        p_display_group_name => 'BEHAVIOR',
        p_deprecated_values  => 'Y',
        p_help_text          => q'~Specify whether values in session state are saved to the database before the branch executes.
It is important to set this attribute to <strong>Yes</strong> if you are navigating to a different application that needs to access the session state values from this application.~' );
    --
    l_property_id := 234;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_BUTTON_PRESSED',
        p_prompt                   => 'When Button Pressed',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'WHEN_BUTTON_ID',
        p_display_group_name       => 'SERVER_SIDE_CONDITION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_button,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~If you want this page processing component to execute only when the specified button is clicked, select a button from the list. You can incorporate this button condition with other conditions to further refine when this page processing component executes.~' );
    --
    l_property_id := 245;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALWAYS_EXECUTE',
        p_prompt             => 'Always Execute',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALWAYS_EXECUTE',
        p_display_group_name => 'VALIDATION',
        p_help_text          => q'~<p>Specify whether this validation is always executed.
If set to <strong>Yes</strong>, this validation is always evaluated, irrespective of the <em>Execute Validations</em> setting defined against the button that submitted the page.
If set to <strong>No</strong>, this validation is only evaluated if the triggering button has an <em>Execute Validations</em> setting of <strong>Yes</strong>.</p>
<p>Note: This validation must also comply with the conditions specified before being evaluated.</p>~' );
    --
    l_property_id := 246;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ERROR_MESSAGE_DISPLAY_LOCATION',
        p_prompt             => 'Display Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ERROR_DISPLAY_LOCATION',
        p_display_group_name => 'ERROR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where the error message displays for this validation.
Validation error messages display on a separate error page, or inline with the existing page.
Inline error messages display underneath the <em>Associated Item</em> label and/or in a Notification area, defined as part of the page template.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline with Field and in Notification',
        p_return_value  => 'INLINE_WITH_FIELD_AND_NOTIFICATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline with Field',
        p_return_value  => 'INLINE_WITH_FIELD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline in Notification',
        p_return_value  => 'INLINE_IN_NOTIFICATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On Error Page',
        p_return_value  => 'ON_ERROR_PAGE' );
    --
    l_property_id := 247;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'ASSOCIATED_ITEM',
        p_prompt                   => 'Associated Item',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'ASSOCIATED_ITEM',
        p_display_group_name       => 'ERROR',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_item,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
        p_help_text                => q'~Select the item where this validation error message displays.
If you select an item and the <em>Error message display location</em> includes "Inline with Field", the error message displays underneath the label of the specified item.
If the <em>Error message display location</em> does not include "Inline with Field", this attribute has no impact on the display of the error message.~' );
    --
    l_property_id := 248;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ASSOCIATED_COLUMN',
        p_prompt             => 'Associated Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ASSOCIATED_COLUMN',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'ERROR',
        p_help_text          => q'~Select the column associated with this page processing component.~' );
    --
    l_property_id := 249;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTION_SCOPE',
        p_prompt             => 'Execution Scope',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ONLY_FOR_CHANGED_ROWS',
        p_display_group_name => 'SERVER_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the execution scope for this editable region validation.
Select <strong>For Created and Modified Rows</strong>, if you want this validation to be evaluated for new and updated rows in your editable region.
If you want your validation to be evaluated for every submitted row, select <strong>All Submitted Rows</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Created and Modified Rows',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'All Submitted Rows',
        p_return_value  => 'N' );
    --
    l_property_id := 250;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTE_CONDITION',
        p_prompt             => 'Execute Condition',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'EXEC_COND_FOR_EACH_ROW',
        p_display_group_name => 'SERVER_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how many times this editable region validation is executed.
If you refer to <em>Columns</em> in your condition, you must specify <strong>For Each Row</strong> in order for the condition to be evaluated for each row of the editable region.
Otherwise, set to <strong>Once</strong> to evaluate the validations one time for the region.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Each Row',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once',
        p_return_value  => 'N' );
    --
    l_property_id := 251;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'VALIDATION_REGION',
        p_prompt                   => 'Editable Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TABULAR_FORM_REGION_ID',
        p_display_group_name       => 'VALIDATION',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the associated region for this validation.~' );
    --
    l_property_id := 252;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_ACTION',
        p_prompt             => 'Action',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BUTTON_ACTION',
        p_display_group_name => 'BEHAVIOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the action to be performed when this button is clicked.~',
        p_comment_text       => q'~$$$ Missing ability to create "Download Printable Report Query" button, which would create a submit button with corresponding branch to invoke a report query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Submit Page',
        p_return_value  => 'SUBMIT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Submit the current page with a REQUEST value equal to the Button Name.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in this Application',
        p_return_value  => 'REDIRECT_PAGE',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Redirect to a page in the current application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in a different Application',
        p_return_value  => 'REDIRECT_APP',
        p_help_text     => q'~<p>Redirect to a page in a different application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.</p>
<p>Note: Redirecting to a page in different application relies on deep linking being enabled in the target application. To enable deep linking, go to the application's <em>Security</em> attributes and enable <em>Deep Linking</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to URL',
        p_return_value  => 'REDIRECT_URL',
        p_help_text     => q'~Redirect to the target URL you specify.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Defined by Dynamic Action',
        p_return_value  => 'DEFINED_BY_DA',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Does not submit the page or redirect to another page. Instead the button's behavior is defined by a Dynamic Action.~' );
    --
    /*
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Download Printable Report Query',
        p_return_value  => 'REPORT',
        p_comment_text  => q'~Download the report query.~' );
    */
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Reset Page',
        p_return_value  => 'RESET',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Reset the page by performing a complete page refresh, not a Partial Page Refresh (PPR).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Next Page',
        p_return_value  => 'NEXT_PAGE',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Redirect to the next page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Previous Page',
        p_return_value  => 'PREVIOUS_PAGE',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Redirect to the previous page.~' );
    --
    l_property_id := 253;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'USER_INTERFACE',
        p_prompt                => 'User Interface',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'USER_INTERFACE_ID',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_user_interface,
        p_help_text             => q'~Shows the user interface for this page.~' );
    --
    l_property_id := 254;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DIALOG_TEMPLATE',
        p_prompt                   => 'Dialog Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'STEP_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a dialog template to define the appearance and layout of this page.</p>
        <p>Dialog templates are defined in the application theme.  
        When a dialog page is created, the template is automatically set to <em>Theme Default</em> which will render the page using the default page template defined in the current theme.
        Making a selection here overrides the default dialog template.</p>
        <p>Universal Theme provides the following dialog templates:
          <dl>
            <dt>Modal Dialog</dt>
              <dd>Useful for most dialog use cases.</dd>
            <dt>Wizard Modal Dialog</dt>
              <dd>Provides a streamlined user interface and is well suited for modal dialog wizards, alerts, notifications, or small forms.</dd>
          </dl>
          See Also: <a target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 255;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OVERWRITE_NAVIGATION_LIST',
        p_prompt             => 'Override User Interface Level',
        p_property_type      => 'YES NO',
        p_db_column          => 'OVERWRITE_NAVIGATION_LIST',
        p_display_group_name => 'NAVIGATION_MENU',
        p_help_text  		 => q'~Specify whether the default User Interface level navigation is overwritten. This can be used to either have no navigation for the current page, or choose alternative navigation for the current page (for example to provide different navigation around a sub-section of your app).~' );
    --
    l_property_id := 256;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'NAVIGATION_LIST',
        p_prompt                => 'List',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'NAVIGATION_LIST_ID',
        p_display_group_name    => 'NAVIGATION_MENU',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_list,
        p_help_text             => q'~Select the navigation menu list utilized for navigation on this page.~' );
    --
    l_property_id := 257;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'NAVIGATION_LIST_TEMPLATE',
        p_prompt                   => 'List Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'NAVIGATION_LIST_TEMPLATE_ID',
        p_display_group_name       => 'NAVIGATION_MENU',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Select the navigation menu list template utilized with the navigation menu list on this page.~' );
    --
    l_property_id := 258;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USER_INTERFACE_TYPE',
        p_prompt             => 'User Interface Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'UI_TYPE_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a user interface type for this page. Select <strong>Desktop</strong> for pages primarily designed for desktop use. For other interfaces, such as smartphones or tablets, select the corresponding user interface.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Desktop',
        p_return_value  => 'DESKTOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'jQuery Mobile Smartphone',
        p_return_value  => 'JQM_SMARTPHONE' );
    --
    l_property_id := 259;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTO_DETECT',
        p_prompt             => 'Auto Detect',
        p_property_type      => 'YES NO',
        p_db_column          => 'USE_AUTO_DETECT',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Select whether the appropriate user interface is automatically detected.
If auto-detection is <strong>Enabled</strong>, the user is automatically redirected to the most appropriate login page or home page, based on the size of the device in use.
Media Queries are utilized to determine the corresponding user interface to display.~' );
    --
    l_property_id := 260;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT',
        p_prompt             => 'Default',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_DEFAULT',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Specify whether or not the user interface is the default application interface.~' );
    --
    l_property_id := 261;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HOME_URL',
        p_prompt             => 'Home URL',
        p_property_type      => 'LINK',
        p_db_column          => 'HOME_URL',
        p_display_length     => 60,
        p_max_length         => 2000,
        p_display_group_name => 'NAVIGATION',
        p_help_text          => q'~Specify the application home page for the user interface.~' );
    --
    l_property_id := 262;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOGIN_URL',
        p_prompt             => 'Login URL',
        p_property_type      => 'LINK',
        p_db_column          => 'LOGIN_URL',
        p_display_length     => 60,
        p_max_length         => 2000,
        p_display_group_name => 'NAVIGATION',
        p_help_text          => q'~Specify the application login page for the user interface.~' );
    --
    l_property_id := 263;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'THEME',
        p_prompt                => 'Theme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'THEME_ID',
        p_display_group_name    => 'ATTRIBUTES',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_theme,
        p_help_text             => q'~Select the theme to associate with the current user interface.~' );
    --
    l_property_id := 264;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GLOBAL_PAGE',
        p_prompt             => 'Global Page',
        p_property_type      => 'PAGE',
        p_db_column          => 'GLOBAL_PAGE_ID',
        p_display_group_name => 'ATTRIBUTES',
        p_help_text          => q'~Select the global page for the current user interface, if one is not defined.~' );
    --
    l_property_id := 265;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_CATEGORY',
        p_prompt             => 'Category',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CATEGORY',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select under which category the plug-in is displayed in the user interface.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Component',
        p_return_value  => 'COMPONENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Effect',
        p_return_value  => 'EFFECT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Execute',
        p_return_value  => 'EXECUTE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Initialize',
        p_return_value  => 'INIT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Miscellaneous',
        p_return_value  => 'MISC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Navigation',
        p_return_value  => 'NAVIGATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Notification',
        p_return_value  => 'NOTIFICATION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Style',
        p_return_value  => 'STYLE' );
    --
    l_property_id := 266;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_SEARCH_BAR',
        p_prompt             => 'Include Search Bar',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SEARCH_BAR',
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~<p>A search bar is displayed above the report.  If you include the search bar, you can also fully customize which functions to display.</p>
The search bar can include the following components:
<dl>
  <dt>Search Field</dt>
    <dd>Displays a text field in the search bar used to enter search criteria.</dd>
  <dt>Finder Drop Down</dt>
    <dd>Embedded within the <em>Search Field</em>, displays a drop down list of displayed columns. If a column is selected then the search is only performed against the values in the selected column.</dd>
  <dt>Reports Select List</dt>
    <dd>Displays a list of all available reports for the user, including primary, alternate, public and private reports. This list is only displayed if a report, other than the primary report, is accessible to the user.</dd>
  <dt>Rows Per Page Selector</dt>
    <dd>Displays a select list used to select the number of rows to display per page.</dd>
  <dt>Actions Menu</dt>
    <dd>Displays the Actions menu button, which generally includes a comprehensive set of options. These options enables the end user to customize the report based upon the functions you make available.</dd>
</dl>~' );
    --
    l_property_id := 267;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_NAME',
        p_prompt             => 'Column Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'DB_COLUMN_NAME',
        p_display_length     => 128,
        p_max_length         => 128,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Enter the column name for this report column.~' );
    --
    l_property_id := 268;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'COLUMN_TYPE',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Enter the data type for the report column.~' );
    --
    l_property_id := 269;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IR_COLUMN_GROUP',
        p_prompt                   => 'Group',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'GROUP_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ir_column_group,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select the group for this column. Groups are used to display columns in logical groups in the Single Row View.~' );
    --
    l_property_id := 270;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_BY_DEFAULT',
        p_prompt             => 'Show by Default',
        p_property_type      => 'YES NO',
        p_db_column          => 'DISPLAY_IN_DEFAULT_RPT',
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Specify whether or not this column displays in the report by default.~' );
    --
    l_property_id := 271;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_COLUMN_DISPLAY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DISPLAY_TEXT_AS',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the relevant column display type to define how column values are displayed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text',
        p_return_value  => 'PLAIN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Displays the column value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text (based on List of Values)',
        p_return_value  => 'PLAIN_LOV',
        p_help_text     => q'~Displays the value returned from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link',
        p_return_value  => 'LINK',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Displays the column as a link.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Display Image',
        p_return_value  => 'IMAGE',
        p_help_text     => q'~Displays the column as an image.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Download BLOB',
        p_return_value  => 'DOWNLOAD',
        p_help_text     => q'~Displays the column as a link to download the file.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent Graph',
        p_return_value  => 'PCT_GRAPH',
        p_help_text     => q'~Displays the column as a percentage graph. The value retrieved must be between 0 and 100.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Remove HTML',
        p_return_value  => 'STRIP_HTML',
        p_help_text     => q'~Displayes the column value, after removing HTML tags and escaping special characters.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hidden Column',
        p_return_value  => 'HIDDEN_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Does not display the column, but it is referenceable.~' );
    --
    l_property_id := 272;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_HEADING',
        p_prompt             => 'Heading',
        p_property_type      => 'TEXT',
        p_db_column          => 'REPORT_LABEL',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'HEADING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the report column heading text.~' );
    --
    l_property_id := 273;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SYNC_FORM_LABEL',
        p_prompt             => 'Use Column Heading',
        p_property_type      => 'YES NO',
        p_db_column          => 'SYNC_FORM_LABEL',
        p_display_group_name => 'SINGLE_ROW_VIEW',
        p_help_text          => q'~Specify this attribute if you want to use the column heading text as the label in the Detail View.~' );
    --
    l_property_id := 274;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SINGLE_ROW_VIEW_LABEL',
        p_prompt             => 'Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'COLUMN_LABEL',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'SINGLE_ROW_VIEW',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the column label to use in the Single Row View.~' );
    --
    l_property_id := 275;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HEADING_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'HEADING_ALIGNMENT',
        p_display_group_name => 'HEADING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the heading alignment. Note that your alignment selection must be supported by the selected report template.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'start',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'center',
        p_return_value  => 'CENTER',
        p_icon          => 'icon-align-center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'end',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 276;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_ALIGNMENT',
        p_prompt             => 'Column Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'COLUMN_ALIGNMENT',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the column display alignment. Note that your alignment selection must be supported by the selected report template.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'start',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'center',
        p_return_value  => 'CENTER',
        p_icon          => 'icon-align-center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'end',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 277;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_HIDE',
        p_prompt             => 'Hide',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_HIDE',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can hide this column.~' );
    --
    l_property_id := 278;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_SORT',
        p_prompt             => 'Sort',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_SORTING',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can sort this column.~' );
    --
    l_property_id := 279;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_FILTER',
        p_prompt             => 'Filter',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_FILTERING',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can filter this column.~' );
    --
    l_property_id := 280;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_HIGHLIGHT',
        p_prompt             => 'Highlight',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_HIGHLIGHTING',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can highlight this column.~' );
    --
    l_property_id := 281;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_CONTROL_BREAK',
        p_prompt             => 'Control Break',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_CTRL_BREAKS',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can utilize this column in a control break.~' );
    --
    l_property_id := 282;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_AGGREGATE',
        p_prompt             => 'Aggregate',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_AGGREGATIONS',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can aggregate this column.~' );
    --
    l_property_id := 283;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_COMPUTE',
        p_prompt             => 'Compute',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_COMPUTATIONS',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can utilize this column in a computational column they define.~' );
    --
    l_property_id := 284;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_CHART',
        p_prompt             => 'Chart',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_CHARTING',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can use this column within a chart.~' );
    --
    l_property_id := 285;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_GROUP_BY',
        p_prompt             => 'Group By',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_GROUP_BY',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can group by this column.~' );
    --
    l_property_id := 286;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_COLUMN_FILTER_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RPT_SHOW_FILTER_LOV',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to derive the filters provided in the report column drop down list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N',
        p_help_text     => q'~There is no column filter provided for this report.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default Based on Column Type',
        p_return_value  => 'D',
        p_help_text     => q'~STRING and NUMBER columns derive the list of values from distinct column values. DATE columns derive the list of values from predefined date ranges.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Defined List of Values to Filter Exact Match',
        p_return_value  => 'S',
        p_help_text     => q'~Derive the list of values from a defined list of values SQL query to create an equal match filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Defined List of Values to Filter Word Contains',
        p_return_value  => 'C',
        p_help_text     => q'~Derive the list of values from a defined list of values SQL query to create a contains filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Named List of Values to Filter Exact Match',
        p_return_value  => '1',
        p_help_text     => q'~Derive the list of values from the named list of values to create an equal filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Named List of Values to Filter Word Contains',
        p_return_value  => '2',
        p_help_text     => q'~Derive the list of values from the named list of values to create a contains filter.~' );
    --
    l_property_id := 288;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_FILTER_DATE_RANGES',
        p_prompt             => 'Date Ranges',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RPT_FILTER_DATE_RANGES',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the list of values date restrictions.
For date columns, the list of values can display past time, future time, or both in the filter for the report column drop down list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'All',
        p_return_value  => 'ALL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Past',
        p_return_value  => 'PAST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Future',
        p_return_value  => 'FUTURE' );
    --
    l_property_id := 289;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HTML_EXPRESSION',
        p_prompt             => 'HTML Expression',
        p_property_type      => 'HTML',
        p_db_column          => 'COLUMN_HTML_EXPRESSION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
  <dt>Change the background and text colors</dt>
    <dd><pre>&lt;span style="background-color:yellow; color:red;">#EMPLOYEE_STATUS#&lt;/span></pre></dd>
  <dt>Use Heading 2</dt>
    <dd><pre>&lt;h2>#EMPLOYEE_NAME#&lt;/h2></pre></dd>
  <dt>Use a dynamic class from the SQL query</dt>
    <dd><pre>&lt;span class="#COLUMN_CLASS#">#EMPLOYEE_STATUS#&lt;/span></pre><br>
    The <code>#COLUMN_CLASS#</code> and <code>#EMPLOYEE_STATUS#</code> substitutions in this example are columns selected in the report SQL query.</dd>
  <dt>Show an image, and a tooltip on hover</dt>
    <dd><pre>&lt;img src="#IMAGE_NAME#" title="#EMPLOYEE_NAME#"&gt;</pre></dd>
</dl>~',
        p_display_group_name => 'COLUMN_FORMATTING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter HTML expressions to be shown in this column. Use <code>#COLUMN#</code> syntax to show column values in HTML.~' );
    --
    l_property_id := 290;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_TEXT',
        p_prompt             => 'Link Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'COLUMN_LINKTEXT',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'LINK',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the HTML text to be shown as a link. Use an image tag to display images, or pick from the list of default images.~' );
    --
    l_property_id := 291;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_ATTRIBUTES',
        p_prompt             => 'Link Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'COLUMN_LINK_ATTR',
        p_display_length     => 62,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Open the link in a new window</dt>
<dd><pre>target="_blank"</pre></dd>
<dt>Show a tooltip on hover</dt>
<dd><pre>title="Click to edit"</pre></dd>
</dl>~',
        p_display_group_name => 'LINK',
        p_help_text          => q'~Enter additional column link attributes to be included in the <code>&lt;a href=...&gt;</code> tag, including link target, classes or styles.~' );
    --
    l_property_id := 292;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_PAGINATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGINATION_TYPE',
        p_display_group_name => 'PAGINATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the pagination type for this report. Often only a certain number of rows of a report display on a page.
In order to include additional rows, the application end user must to navigate to the next page of the report.</p>
<p>Pagination provides the end user with information about the number of rows and the current position within the result set.</p>
<p>Pagination can be shown above or below the report (or both) and can be positioned on the left or right.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y of Z',
        p_return_value  => 'ROWS_X_TO_Y_OF_Z' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y',
        p_return_value  => 'ROWS_X_TO_Y' );
    --
    l_property_id := 293;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGINATION_DISPLAY_POSITION',
        p_prompt             => 'Display Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGINATION_DISPLAY_POSITION',
        p_display_group_name => 'PAGINATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where the report pagination displays.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom - Left',
        p_return_value  => 'BOTTOM_LEFT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom - Right',
        p_return_value  => 'BOTTOM_RIGHT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top - Left',
        p_return_value  => 'TOP_LEFT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top - Right',
        p_return_value  => 'TOP_RIGHT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top and Bottom - Left',
        p_return_value  => 'TOP_AND_BOTTOM_LEFT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top and Bottom - Right',
        p_return_value  => 'TOP_AND_BOTTOM_RIGHT',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 294;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_NULL_VALUES_AS',
        p_prompt             => 'Show Null Values as',
        p_property_type      => 'TEXT',
        p_db_column          => 'SHOW_NULLS_AS',
        p_display_length     => 16,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Enter the text you want to display for null columns.~' );
    --
    l_property_id := 295;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_ROW_COUNT',
        p_prompt             => 'Maximum Rows to Process',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX_ROW_COUNT',
        p_min_value          => 1,
        p_display_group_name => 'PERFORMANCE',
        p_help_text          => q'~<p>Enter the maximum number of rows which can be processed by the query. If the maximum number of rows to be processed exceedes the limit, then an error message will be displayed instead of data. 
A custom message can be defined by specifying a message in <strong>More Data Found</stron>.</p>
<p>This attribute is to safeguard against end users performing actions, such as sorts or aggregations, on all the records in very large tables or views, which might not be performant.
Instead, the number of records being processed must first be reduced by adding additional filters.</p>~' );
    --
    l_property_id := 297;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_prompt             => 'When No Data Found',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'NO_DATA_FOUND_MESSAGE',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGES',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a text message to display if the query does not return any rows.~' );
    --
    l_property_id := 302;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SAVE_PUBLIC_REPORT_AUTHORIZATION',
        p_prompt                => 'Save Public Report Authorization',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'SAVE_RPT_PUBLIC_AUTH_SCHEME',
        p_display_group_name    => 'ACTIONS_MENU',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to restrict who can save public report definitions.
To enable an end user to save a public report, this authorization scheme must evaluate to TRUE.
If no authorization scheme is provided then reports may be saved by any user.~',
        p_comment_text          => q'~$$$ should we put it into display group SECURITY?~' );
    --
    l_property_id := 306;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SEARCH_BUTTON_LABEL',
        p_prompt             => 'Search Button Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'SEARCH_BUTTON_LABEL',
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'SEARCH_BAR',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text for the search button label.~' );
    --
    l_property_id := 307;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAXIMUM_ROWS_PER_PAGE',
        p_prompt             => 'Maximum Rows Per Page',
        p_property_type      => 'TEXT',
        p_db_column          => 'MAX_ROWS_PER_PAGE',
        p_display_length     => 7,
        p_max_length         => 4000,
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~Enter the maximum number to display in the Rows Per Page selector.~',
        p_comment_text       => q'~$$$ should be number, but is a string in the data model~' );
    --
    l_property_id := 308;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOWNLOAD_FORMATS',
        p_prompt             => 'Download Formats',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'DOWNLOAD_FORMATS',
        p_display_group_name => 'DOWNLOAD',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Check which download formats users can utilize to download the currently displayed columns.</p>
<p>Email is only available for authenticated users and requires an administrator configure SMTP configuration within &PRODUCT_NAME. Administration Services application (Administration Services).</p>
<p>In order for users to utilize the following formats, an administrator must configure Report Printing in Administration Services:</p>
<ul>
  <li>Microsoft Excel (XLS format)</li>
  <li>PDF</li>
  <li>Microsoft Word (RTF format)</li>
</ul>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CSV',
        p_return_value  => 'CSV' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTML' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Email',
        p_return_value  => 'EMAIL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XLS',
        p_return_value  => 'XLS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PDF',
        p_return_value  => 'PDF' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'RTF',
        p_return_value  => 'RTF' );
    --
    l_property_id := 309;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CSV_SEPARATOR',
        p_prompt             => 'CSV Separator',
        p_property_type      => 'TEXT',
        p_db_column          => 'CSV_OUTPUT_SEPARATOR',
        p_display_length     => 1,
        p_max_length         => 1,
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~Enter a column separator. If no value is entered, a comma or semicolon is used depending on your current NLS settings.~' );
    --
    l_property_id := 310;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CSV_ENCLOSED_BY',
        p_prompt             => 'CSV Enclosed By',
        p_property_type      => 'TEXT',
        p_db_column          => 'CSV_OUTPUT_ENCLOSED_BY',
        p_display_length     => 1,
        p_max_length         => 1,
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~Enter a delimiter character to delineate the starting and ending boundary of a data value. The default delimiter is double quotation marks.</p>~' );
    --
    l_property_id := 311;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOWNLOAD_FILENAME',
        p_prompt             => 'Filename',
        p_property_type      => 'TEXT',
        p_db_column          => 'DOWNLOAD_FILENAME',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~Enter the filename for the document when downloaded. Do not specify a file extension. The extension is added automatically. If you leave this attribute blank, the region name is used as the file name.~' );
    --
    l_property_id := 312;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_LINK_COLUMN',
        p_prompt             => 'Link Column',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SHOW_DETAIL_LINK',
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the link column type for this report.
If you select the link column, it always displays as the first column in the report and cannot be hidden by the user.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link to Single Row View',
        p_return_value  => 'Y',
        p_help_text     => q'~The end user is directed to a page which shows the column values for the specified row. What and how columns display is governed by various report and column attributes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link to Custom Target',
        p_return_value  => 'C',
        p_help_text     => q'~The end user is directed to another page based on the target URL you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Exclude Link Column',
        p_return_value  => 'N',
        p_help_text     => q'~The link column is not displayed.~' );
    --
    l_property_id := 313;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_EXCLUDE_NULL_VALUES',
        p_prompt             => 'Exclude Null Values',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_EXCLUDE_NULL_VALUES',
        p_display_group_name => 'SINGLE_ROW_VIEW',
        p_help_text          => q'~Specify whether null columns are hidden on the Single Record View.~' );
    --
    l_property_id := 314;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_HIDE_EXTRA_COLUMNS',
        p_prompt             => 'Only Displayed Columns',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_HIDE_EXTRA_COLUMNS',
        p_display_group_name => 'SINGLE_ROW_VIEW',
        p_help_text          => q'~Specify whether only those columns currently displayed are displayed in the Single Record View. If you specify <strong>No</strong> then non displayed report columns may also be shown on the Single Record View.~' );
    --
    l_property_id := 315;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNIQUELY_IDENTIFY_ROWS_BY',
        p_prompt             => 'Uniquely Identify Rows by',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'UNIQUELY_IDENTIFY_ROWS_BY',
        p_is_query_only      => true,
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of column used to identify the current row when utilizing the link column.
By default, <strong>ROWID</strong> is used to uniquely identify rows in a report. However, you can also utilize another column by selecting <strong>Unique Column</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'ROWID',
        p_return_value  => 'ROWID' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Unique Column',
        p_return_value  => 'COLUMN' );
    --
    l_property_id := 316;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNIQUE_COLUMN',
        p_prompt             => 'Unique Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BASE_PK1',
        p_column_data_types  => 'VARCHAR2:ROWID',
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>Select the first column used to uniquely identify rows for this component.</p>
<p><strong>ROWID</strong> is also included in the list of available columns for backward compatability.</p>
<p>Note: For an interactive report with the <em>Link Column</em> attribute set to <strong>Link to Single Row View</strong>, only a single unique column can be selected. Other components support the selection of up to three columns.</p>~' );
    --
    l_property_id := 317;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNIQUE_COLUMN_2',
        p_prompt             => 'Unique Column 2',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BASE_PK2',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>Select the second column to be used to uniquely identify rows for this component. Use this attribute when your table has a two-part primary key.</p>
<p><strong>ROWID</strong> is also included in the list of available columns for backward compatability.</p>~' );
    --
    l_property_id := 318;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNIQUE_COLUMN_3',
        p_prompt             => 'Unique Column 3',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BASE_PK3',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>Select the third column to be used to uniquely identify rows for this component. Use this attribute when your table has a three-part primary key.</p>
<p><strong>ROWID</strong> is also included in the list of available columns for backward compatability.</p>
<p>Note: If your table's primary key has more than three columns, then you need to uniquely identify rows by <strong>ROWID</strong>.~' );
    --
    l_property_id := 319;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_ICON',
        p_prompt             => 'Link Icon',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'DETAIL_LINK_TEXT',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'LINK',
        p_help_text          => q'~Enter the HTML to be used for the link. Use an image tag to display images, or pick from the list of default images.  If not defined, <code>#IMAGE_PREFIX#ws/small_page.gif</code> is used.~' );
    --
    l_property_id := 320;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'LINK_AUTHORIZATION_SCHEME',
        p_prompt                => 'Authorization Scheme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'DETAIL_LINK_AUTH_SCHEME',
        p_display_group_name    => 'LINK',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to associate with the Link Column. This authorization scheme must evaluate to TRUE in order for the Link Column to be rendered in the report.~' );
    --
    l_property_id := 321;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_ALIAS',
        p_prompt             => 'Region Alias',
        p_property_type      => 'TEXT',
        p_db_column          => 'ALIAS',
        p_display_length     => 32,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter an alphanumeric alias for this interactive report region.
The alias must be unique within the application.
You can use an alias to reference an interactive report region in your custom API call.
For example, you can write a function to return the <code>INTERACTIVE_REPORT_ID</code> by querying the <code>ALIAS</code> column in the <code>APEX_APPLICATION_PAGE_IR</code> view.
Since the <code>INTERACTIVE_REPORT_ID</code> value can change when you export or import the application to different instances, referencing interactive report regions using an alias may be preferable.~' );
    --
    l_property_id := 322;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REPORT_ID_ITEM',
        p_prompt                   => 'Report ID Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'REPORT_ID_ITEM',
        p_display_length           => 32,
        p_max_length               => 255,
        p_display_group_name       => 'ADVANCED',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Select a page or application item whose value stores the saved report ID.
Interactive report uses this item value to link to a saved report.
For example, you can define list of saved reports with links with defined item name and saved report ID as its value to link to a saved default reports, public or private reports.
The saved report IDs can be retrieved from the <code>APEX_APPLICATION_PAGE_IR_RPT</code> view.~' );
    --
    l_property_id := 323;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EMAIL_FROM_ADDRESS',
        p_prompt             => 'Email From Address',
        p_property_type      => 'TEXT',
        p_db_column          => 'EMAIL_FROM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_examples           => q'~<ul>
<li><code>john.doe@abc.com</code></li>
<li><code>&amp;MY_APP_EMAIL_FROM.</code></li>
</ul>~',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Enter a valid email address to use as the <em>From</em> address when sending email from this report. Emails are sent from this report for Downloads of type Email and for Subscriptions.</p>
<p>The value can be a literal string containing a valid email address or a static substitution reference defined in the application using substitution syntax.
Using a page or application item substitution is NOT recommended because it only works in email download and causes any subscription emails to fail since these items can not be accessed outside of a valid session.
Subscriptions are sent directly from the &PRODUCT_NAME. engine and not from a user session.</p>~',
        p_comment_text       => q'~$$$ should we have a type EMAIL? -> used in a few places, otherwise we have to use a PL/SQL validation or do not verify it at all~' );
    --
    l_property_id := 324;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ENABLED',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'ICON_VIEW_ENABLED_YN',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Specify whether the Icon View is enabled. Selecting <strong>Yes</strong> adds a View Icons icon to the Search bar for interactive reports, or to the interactive grid View button, enabling users to access this view.~' );
    --
    l_property_id := 325;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USE_CUSTOM_ICON_VIEW',
        p_prompt             => 'Custom',
        p_property_type      => 'YES NO',
        p_db_column          => 'ICON_VIEW_USE_CUSTOM',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Specify whether you wish to define a custom link for the Icon View. This option provides greater flexibility in defining the content of the Icon View, including the ability to utilize more than one column.~' );
    --
    l_property_id := 326;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMNS_PER_ROW',
        p_prompt             => 'Columns Per Row',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ICON_VIEW_COLUMNS_PER_ROW',
        p_display_group_name => 'ICON_VIEW',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the number of icons to display per row in Icon View. A value of 5 displays 5 icons per row of the report.~',
        p_comment_text       => q'~$$$ should this really be a LOV, why not a one digit INTEGER?~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '5',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '6',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '7',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '8',
        p_return_value  => '8' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '9',
        p_return_value  => '9' );
    --
    l_property_id := 327;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_LINK_COLUMN',
        p_prompt             => 'Link Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'ICON_VIEW_LINK_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_examples           => q'~<dl>
<dt>Examine the <code>LINK</code> column</dt>
<dd><pre>
select ename,
       job,
       'F?P=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       '#IMAGE_PREFIX#menu/user_red_64.gif' as image
  from emp
</pre></dd>
</dl>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the report column that returns the link target of the icon.~' );
    --
    l_property_id := 328;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_IMAGE_SOURCE_COLUMN',
        p_prompt             => 'Image Source Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'ICON_VIEW_IMG_SRC_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_examples           => q'~<dl>
<dt>Examine the <code>IMAGE</code> column</dt>
<dd><pre>
select ename,
       job,
       'F?P=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       '#IMAGE_PREFIX#menu/user_red_64.gif' as image
  from emp
</pre></dd>
</dl>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the report column that returns the image source.~' );
    --
    l_property_id := 329;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_LABEL_COLUMN',
        p_prompt             => 'Label Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'ICON_VIEW_LABEL_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_examples           => q'~<dl>
<dt>Examine the <code>ENAME</code> column</dt>
<dd><pre>
select ename,
       job,
       'F?P=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       '#IMAGE_PREFIX#menu/user_red_64.gif' as image
  from emp
</pre></dd>
</dl>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the report column that returns the image label.~' );
    --
    l_property_id := 330;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_IMAGE_ATTRIBUTES',
        p_prompt             => 'Image Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_IMG_ATTR_TEXT',
        p_display_length     => 30,
        p_max_length         => 512,
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Enter the image attributes used for the HTML IMG tag.~' );
    --
    l_property_id := 331;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_HTML_ALT_TEXT',
        p_prompt             => 'HTML ALT Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_ALT_TEXT',
        p_display_length     => 30,
        p_max_length         => 512,
        p_display_group_name => 'ICON_VIEW',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the HTML ALT text for the image.~' );
    --
    l_property_id := 332;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_HTML_TITLE_TEXT',
        p_prompt             => 'HTML TITLE Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_TITLE_TEXT',
        p_display_length     => 30,
        p_max_length         => 512,
        p_display_group_name => 'ICON_VIEW',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the HTML TITLE tag for the image.~' );
    --
    l_property_id := 333;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_CUSTOM_LINK',
        p_prompt             => 'Custom Link',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ICON_VIEW_CUSTOM_LINK',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;a href="#EMP_LINK#"&gt;&lt;img src="#EMP_IMG#" title="#ENAME#" alt="#ENAME#"&gt;&lt;br&gt;#ENAME#&lt;/a&gt;
</pre>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Enter the column link for the Icon View. Use <code>#COLUMN_NAME#</code> substitution strings for column names as required.~' );
    --
    l_property_id := 334;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DETAIL_VIEW_ENABLED',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'DETAIL_VIEW_ENABLED_YN',
        p_display_group_name => 'DETAIL_VIEW',
        p_help_text          => q'~Specify whether the Detail View is enabled. Selecting <strong>Yes</strong> adds a View Details icon to the Search bar for interactive reports, or to the interactive grid View button, enabling users to access this view.~' );
    --
    l_property_id := 335;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DETAIL_VIEW_BEFORE_ROWS',
        p_prompt             => 'Before Rows',
        p_property_type      => 'HTML',
        p_db_column          => 'DETAIL_VIEW_BEFORE_ROWS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;table&gt;
</pre>~',
        p_display_group_name => 'DETAIL_VIEW',
        p_help_text          => q'~Enter the HTML to be displayed before report rows.~' );
    --
    l_property_id := 336;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DETAIL_VIEW_FOR_EACH_ROW',
        p_prompt             => 'For Each Row',
        p_property_type      => 'HTML',
        p_db_column          => 'DETAIL_VIEW_FOR_EACH_ROW',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;tr&gt;&lt;td align="right"&gt;#ENAME_LABEL#:&lt;/td&gt;&lt;td&gt;#ENAME#&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td align="right"&gt;#JOB_LABEL#:&lt;/td&gt;&lt;td&gt;#JOB#&lt;/td&gt;&lt;/tr&gt;
</pre>~',
        p_display_group_name => 'DETAIL_VIEW',
        p_help_text          => q'~Enter the body for report rows in the Detail View. Use <code>#COLUMN_NAME#</code> substitution strings for column names and column labels.~' );
    --
    l_property_id := 337;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DETAIL_VIEW_AFTER_ROWS',
        p_prompt             => 'After Rows',
        p_property_type      => 'HTML',
        p_db_column          => 'DETAIL_VIEW_AFTER_ROWS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;/table&gt;
</pre>~',
        p_display_group_name => 'DETAIL_VIEW',
        p_help_text          => q'~Enter the HTML to be displayed after report rows.~' );
    --
    l_property_id := 338;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_FILTER',
        p_prompt             => 'Filter',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_FILTER',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define filters on this report.~' );
    --
    l_property_id := 339;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SELECT_COLUMNS',
        p_prompt             => 'Select Columns',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SELECT_COLUMNS',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can use <strong>Select Columns</strong> in the Actions menu to change the columns displayed in this report. User can select (or show), deselect (or hide) and reorder multiple columns using this option.~' );
    --
    l_property_id := 340;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_ROWS_PER_PAGE',
        p_prompt             => 'Rows Per Page',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_ROWS_PER_PAGE',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can change the number of rows displayed for this report.~' );
    --
    l_property_id := 341;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SORT',
        p_prompt             => 'Sort',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SORT',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define sort columns for this report.~' );
    --
    l_property_id := 342;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_CONTROL_BREAK',
        p_prompt             => 'Control Break',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_CONTROL_BREAK',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define control breaks for this report.~' );
    --
    l_property_id := 343;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_HIGHLIGHT',
        p_prompt             => 'Highlight',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_HIGHLIGHT',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define highlights for this report.~' );
    --
    l_property_id := 344;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_COMPUTATION',
        p_prompt             => 'Compute',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_COMPUTATION',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define computational columns for this report.~' );
    --
    l_property_id := 345;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_AGGREGATE',
        p_prompt             => 'Aggregate',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_AGGREGATE',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define aggregates for this report.~' );
    --
    l_property_id := 346;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_CHART',
        p_prompt             => 'Chart',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_CHART',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define charts for this report.~' );
    --
    l_property_id := 347;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_NOTIFY',
        p_prompt             => 'Subscription',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_NOTIFY',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define subscription settings for this report.~' );
    --
    l_property_id := 348;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_GROUP_BY',
        p_prompt             => 'Group By',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_GROUP_BY',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end,users can define group by break-downs for this report.~' );
    --
    l_property_id := 349;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_PIVOT',
        p_prompt             => 'Pivot',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_PIVOT',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can define pivot break-downs for this report.~' );
    --
    l_property_id := 350;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_FLASHBACK',
        p_prompt             => 'Flashback',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_FLASHBACK',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can utilize flashback queries for this report.</p>
<p>Flashback queries utilize the Oracle Flashback Technology and Database Point-in-Time Recovery to view data as it existed at a previous point in time. Users can only query this data, but can not rewind any data changes. How far back in time they can successfully perform a flashback query is determined by when the redo log files were last switched within the Oracle database, as this technology utilizes the RMAN backup.~' );
    --
    l_property_id := 351;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_RESET',
        p_prompt             => 'Reset',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_RESET',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can reset their reports from the Actions menu.</p>
<p>Reseting the report reverts all customizations made by the user, or specified by the calling URL, and displays the Primary Report.</p>~' );
    --
    l_property_id := 352;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_DOWNLOAD',
        p_prompt             => 'Download',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_DOWNLOAD',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can download the report to one of the download formats specified.~' );
    --
    l_property_id := 353;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_HELP',
        p_prompt             => 'Help',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_HELP',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can invoke the built-in help modal dialog for interactive reports.</p>
<p>The help dialog only outlines those options available to the current user.</p>~' );
    --
    l_property_id := 354;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_SAVE_REPORTS',
        p_prompt             => 'Save Report',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_REPORT_SAVING',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can save their current report definition as a <em>Private</em> report.</p>
<p>Private reports are displayed in a select list of available reports in the Search Bar, and are only displayed to the user who saved the report, providing they are authenticated.
The option on the Actions menu is only available to authenticated users.</p>~' );
    --
    l_property_id := 355;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_SAVE_PUBLIC_REPORT',
        p_prompt             => 'Save Public Report',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_SAVE_RPT_PUBLIC',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~<p>Specify whether end users can save their current report definition as a <em>Public</em> report.</p>
<p>Public reports are displayed in a select list of available reports in the Search Bar, and are displayed to everyone.
The option on the Actions menu is only available to authenticated users and is further restricted if you also populate the <strong>Save Public Report Authorization</strong>.</p>~' );
    --
    l_property_id := 356;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_SAVE_REPORT_CATEGORIES',
        p_prompt             => 'Save Report Categories',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_REPORT_CATEGORIES',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether end users can save report categories.~',
        p_comment_text       => q'~$$$ what does this property do?~' );
    --
    l_property_id := 357;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_FINDER_DROP_DOWN',
        p_prompt             => 'Finder Drop Down',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_FINDER_DROP_DOWN',
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~Specify whether the Finder drop down is included at the beginning of the Search field within the search bar.
The Finder drop down is a list of columns that enables users to limit their search to a specific column.~' );
    --
    l_property_id := 358;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_DISPLAY_ROW_COUNT',
        p_prompt             => 'Rows Per Page Selector',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_DISPLAY_ROW_COUNT',
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~Specify whether a separate drop down row selector is included within the search bar.
You should not select both this attribute and <strong>Rows Per Page</strong>.~' );
    --
    l_property_id := 360;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SEARCH_TEXTBOX',
        p_prompt             => 'Search Field',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SEARCH_TEXTBOX',
        p_display_group_name => 'SEARCH_BAR',
        p_help_text          => q'~Specify whether the search field is included within the search bar.~' );
    --
    l_property_id := 361;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_ACTIONS_MENU',
        p_prompt             => 'Include Actions Menu',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_ACTIONS_MENU',
        p_display_group_name => 'ACTIONS_MENU',
        p_help_text          => q'~Specify whether the <em>Actions</em> menu is included within the Search Bar.~' );
    --
    l_property_id := 362;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'SHOW_REPORTS_SELECT_LIST',
        p_prompt                     => 'Reports Select List',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'TABS',
        p_prop_type_yesno_override_n => 'NONE',
        p_db_column                  => 'REPORT_LIST_MODE',
        p_display_group_name         => 'SEARCH_BAR',
        p_help_text                  => q'~<p>Specify whether the Reports select list displays in the search bar.</p>
<p>The Reports select list only displays if a report, other than the primary report, is accessible to the user.</p>~' );
    --
    l_property_id := 363;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_TARGET',
        p_prompt             => 'Target',
        p_property_type      => 'LINK',
        p_db_column          => 'DETAIL_LINK',
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>Click the Target to invoke a modal dialog. You can enter a custom target to be called when the Link Column is clicked.</p>
        <p>Select the appropriate type in Link Builder - Target based on your requirements:
        <dl>
        <dt>Page in this application</dt>
        <dd>Enter the following:
        <ul>
        <li>Page - enter the page number or page alias to navigate to. You can also select the page number from the select list.</li>
        <li>Set Items: Name - enter or select page items (<code>P3_ID</code>), application items (<code>LAST_PAGE</code>) or interactive report filters (<code>IR_EMPNO</code>) to be set into session state.</li>
        <li>Set Items: Value - enter or select a report column (<code>#ID#</code>), enter an application or page item (<code>&P2_EMPNO.</code>), or enter a static value (<code>2</code>).</li>
        <li>Clear Cache - enter a comma-delimited list of page numbers (<code>2,3</code>), items (<code>P3_EMPNO,LAST_PAGE</code>), and report settings to be cleared. To reset pagination for a report enter <code>RP</code>. To clear or reset interactive report settings enter <code>CIR</code> or <code>RIR</code>.</li>
        <li>Reset Pagination - select Yes to reset pagination, back to the first set of records, for reports on the target page. This has the same affect as passing <code>RP</code> in Clear Cache.</li>
        <li>Advanced: Request - enter the request to be used.</li>
        </ul>
        </dd>
        <dt>Page in a different application</dt>
        <dd>Enter the same attributes as listed for Page in this application, with the addition that you need to enter the application ID or application alias for Application.</dd>
        <dt>URL</dt>
        <dd>Enter the URL</dd>
        </dl></p>~' );
    --
    l_property_id := 364;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IR_SAVED_VISIBILITY',
        p_prompt             => 'Visibility',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VISIBILITY',
        p_is_query_only      => true,
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~View the saved report category, which dictates where this report displays within the Reports select List. This attribute is view only and cannot be updated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Primary Default',
        p_return_value  => 'PRIMARY_DEFAULT',
        p_help_text     => q'~Report saved by developers, that is displayed by default.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Alternative Default',
        p_return_value  => 'ALTERNATIVE_DEFAULT',
        p_help_text     => q'~Subsequent report layouts saved by developers, that end users can select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Public',
        p_return_value  => 'PUBLIC',
        p_help_text     => q'~Report layouts saved by end users, that all other end users can select.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Private',
        p_return_value  => 'PRIVATE',
        p_help_text     => q'~Report layouts saved by end users, that only the end user who saved it can select.~' );
    --
    l_property_id := 365;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'IR_SAVED_REPORT_ALIAS',
        p_prompt                => 'Alias',
        p_property_type         => 'TEXT',
        p_db_column             => 'REPORT_ALIAS',
        p_restricted_characters => 'US_ONLY_UNDERSCORE_NO_SPACE',
        p_display_group_name    => 'IDENTIFICATION',
        p_help_text             => q'~Enter an alias for this saved report. Use this alias to define a more meaningful URL link to this specific saved report. This link can be used to link directly from elsewhere in the application.~' );
    --
    l_property_id := 366;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_EXAMPLE',
        p_prompt             => 'Link Example',
        p_property_type      => 'TEXTAREA',
        p_db_column          => 'LINK_EXAMPLE',
        p_is_query_only      => true,
        p_display_group_name => 'LINK',
        p_help_text          => q'~<p>View the URL link for this saved report. This attribute is view only and cannot be updated.</p>
<p>This attribute enables you to quickly copy the displayed URL. This URL can be used to link directly to this particular saved report from anywhere else in the application.</p>~' );
    --
    l_property_id := 367;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RUN_PROCESS',
        p_prompt             => 'Run Process',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PROCESS_IS_STATEFUL_Y_N',
        p_display_group_name => 'EXECUTION_OPTIONS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the frequency that this process is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once Per Session or When Reset',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once Per Page Visit (default)',
        p_return_value  => 'N' );
    --
    l_property_id := 368;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUCCESS_MESSAGE',
        p_prompt             => 'Success Message',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PROCESS_SUCCESS_MESSAGE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'SUCCESS_MESSAGE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text to be displayed in the "Notification" area (defined as part of the page template), when this process completes successfully.~' );
    --
    l_property_id := 369;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PROCESS_ERROR_DISPLAY_LOCATION',
        p_prompt             => 'Display Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ERROR_DISPLAY_LOCATION',
        p_display_group_name => 'ERROR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where this process error message displays, when the process fails to complete successfully.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline in Notification',
        p_return_value  => 'INLINE_IN_NOTIFICATION',
        p_help_text     => q'~The process error message is displayed in the "Notification" area (defined as part of the page template)~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On Error Page',
        p_return_value  => 'ON_ERROR_PAGE',
        p_help_text     => q'~The Process error message is displayed on the error page.~' );
    --
    l_property_id := 370;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'PROCESS_REGION',
        p_prompt                   => 'Editable Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'REGION_ID',
        p_display_group_name       => 'EXECUTION_OPTIONS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the region to associate with this process.~',
        p_comment_text             => q'~$$$ could this be merged with VALIDATION_REGION by putting the property into the display group Execution Options?
p_lov_component_type_scope = PAGE -> should only include tabular forms~' );
    --
    l_property_id := 371;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DA_EVENT',
        p_prompt                   => 'Event',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'EVENT_ID',
        p_display_group_name       => 'EXECUTION_OPTIONS',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_da_event,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Select the appropriate dynamic action event from the available list.~' );
    --
    l_property_id := 372;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'IR_COLUMN_FILTER_LOV_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'RPT_LOV',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'COLUMN_FILTER',
        p_examples             => q'~<dl>
<dt>To return the department name:</dt>
<dd><pre>select dname from dept order by 1</pre></dd>
</dl>~',
        p_help_text            => q'~<p>Enter a SQL query which needs to return one column. If the query returns multiple columns, only the first column is used in the list of values.</p>
<p>Entering a SQL query can improve performance in some reports, or be used to limit the values displayed.</p>~' );
    --
    l_property_id := 373;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOV_TYPE',
        p_display_group_name => 'LIST_OF_VALUES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the list of values type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Shared Component',
        p_return_value  => 'SHARED',
        p_help_text     => q'~The list of values is based on a predefined list of values, defined in Shared Components.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~The Dynamic list of values is based on the SQL Query you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Values',
        p_return_value  => 'STATIC',
        p_help_text     => q'~The Static list of values is based on the text value you enter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body returning SQL Query',
        p_return_value  => 'PLSQL_FUNCTION_BODY',
        p_help_text     => q'~The Dynamic list of values is based on the SQL Query returned by the entered PL/SQL Function Body you enter.~' );
    --
    l_property_id := 374;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_STATIC_VALUES',
        p_prompt             => 'Static Values',
        p_property_type      => 'STATIC LOV',
        p_db_column          => 'LOV',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'LIST_OF_VALUES',
        p_help_text          => q'~Enter the values for this static list of values.~' );
    --
    l_property_id := 375;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TZ_DEPENDENT',
        p_prompt             => 'Timezone Aware',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'TZ_DEPENDENT',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Indicates whether or not this column is timezone aware.~' );
    --
    l_property_id := 376;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROC_WS_PARM_ITEM',
        p_prompt             => 'Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'PARAMETER_VALUE',
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Enter the page or application item used as the source for this parameter. You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 377;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROC_WS_PARM_SOURCE',
        p_prompt             => 'Source',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MAP_TYPE',
        p_display_group_name => 'PARAMETER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source for the parameter from the available list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'FUNCTION',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
    --
    l_property_id := 379;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROC_WS_PARM_VALUE',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'PARAMETER_VALUE',
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Enter the value for this parameter.~' );
    --
    l_property_id := 380;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_TITLE',
        p_prompt             => 'Title',
        p_property_type      => 'TEXT',
        p_db_column          => 'CHART_TITLE',
        p_display_length     => 65,
        p_max_length         => 255,
        p_display_group_name => 'TITLE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a title to display at the top of the chart.  For gantt charts, this value is only used to define the accessible chart title.~' );
    --
    l_property_id := 381;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHANGED_BY',
        p_prompt             => 'Changed By',
        p_property_type      => 'TEXT',
        p_db_column          => 'LAST_UPDATED_BY',
        p_is_query_only      => true,
        p_display_length     => 30,
        p_display_group_name => 'AUDIT_INFORMATION',
        p_is_searchable      => false,
        p_help_text          => q'~Displays the user credentials of the developer who last updated this attribute.~' );
    --
    l_property_id := 382;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHANGED_ON',
        p_prompt             => 'Changed On',
        p_property_type      => 'TEXT',
        p_db_column          => 'LAST_UPDATED_ON',
        p_is_query_only      => true,
        p_display_length     => 30,
        p_display_group_name => 'AUDIT_INFORMATION',
        p_is_searchable      => false,
        p_help_text          => q'~Displays when this attribute was last updated.~' );
    --
    l_property_id := 383;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALLOW_USERS_TO_PIVOT',
        p_prompt             => 'Pivot',
        p_property_type      => 'YES NO',
        p_db_column          => 'ALLOW_PIVOT',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end user can define a pivot break-down within this report.~' );
    --
    l_property_id := 384;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_LIST',
        p_prompt                => 'List',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'LIST_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_list,
        p_help_text             => q'~Select the source for this list.~' );
    --
    l_property_id := 385;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_BREADCRUMB',
        p_prompt                => 'Breadcrumb',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'BREADCRUMB_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_breadcrumb,
        p_help_text             => q'~Select the breadcrumb list associated with this page.~' );
    --
    l_property_id := 386;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'LIST_TEMPLATE',
        p_prompt                   => 'List Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'LIST_TEMPLATE_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_list_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a template to define the appearance and layout of this list.</p>
        <p>List templates are defined in the application theme.  
        When a list region is created, the template is automatically set to the default list template defined in the current theme.</p>
        <p>Universal Theme provides the following list templates:
          <dl>
            <dt>Badge List</dt>
            <dt>Cards</dt>
            <dt>Links List</dt>
            <dt>Media List</dt>
            <dt>Menu Bar</dt>
            <dt>Menu Popup</dt>
            <dt>Navigation Bar</dt>
            <dt>Side Navigation Menu</dt>
            <dt>Tabs</dt>
            <dt>Top Navigation Menu</dt>
            <dt>Wizard Progress</dt>
          </dl>
          See Also: <a target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 387;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'BREADCRUMB_TEMPLATE',
        p_prompt                   => 'Breadcrumb Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'MENU_TEMPLATE_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_bc_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Select the breadcrumb template utilized with this breadcrumb.~' );
    --
    l_property_id := 388;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'APP_ITEM_SCOPE',
        p_prompt             => 'Scope',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SCOPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the scope of this application item. Select <strong>Global</strong> if the &PRODUCT_NAME. session is shared by more than one application and the item's value should be the same for all applications.
Otherwise, select <strong>Application</strong>, which is the default scope.</p>
<p>Applications can share the same session, if their authentications have the same <em>Session Cookie Attributes</em>.
The scope attribute, of application items, has to be the same across these applications as well.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Application',
        p_return_value  => 'APP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Global',
        p_return_value  => 'GLOBAL' );
    --
    l_property_id := 389;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOV_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'LOV_NAME',
        p_display_length     => 50,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Enter the name of this list of values.~' );
    --
    l_property_id := 390;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'HAS_GENERIC_COLUMNS',
        p_prompt                     => 'Use Generic Column Names',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'GENERIC_REPORT_COLUMNS',
        p_prop_type_yesno_override_n => 'DERIVED_REPORT_COLUMNS',
        p_db_column                  => 'PLUG_QUERY_OPTIONS',
        p_display_group_name         => 'SOURCE',
        p_help_text                  => q'~Select whether column definitions are derived from the SQL query.
Doing this requires &PRODUCT_NAME. to parse the query.
If you do not want the query parsed at this time, use generic column names, which produces placeholder column definitions.~' );
    --
    l_property_id := 391;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GENERIC_COLUMN_COUNT',
        p_prompt             => 'Generic Column Count',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PLUG_QUERY_MAX_COLUMNS',
        p_display_length     => 3,
        p_max_length         => 3,
        p_min_value          => 1,
        p_max_value          => 999,
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Enter the maximum number of generic report columns.
Reports that use generic column names are parsed at runtime only, so the number of columns is not known when editing the report.</p>
<p>The maximum number of report columns should match the expected number of report columns.
If the actual number is smaller, the report renders with the actual number of columns.
However, if the actual number is higher than the maximum, then an error message shows at runtime.</p>~' );
    --
    l_property_id := 392;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_PROC_WS_PARM_FUNCTION',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'PARAMETER_VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PARAMETER',
        p_help_text          => q'~Enter a PL/SQL function body that returns a value used as the source for this parameter.~' );
    --
    l_property_id := 394;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PAGE_PROC_WS_PARM_ITEMS',
        p_prompt                => 'Item(s)',
        p_property_type         => 'ITEM',
        p_multi_value_delimiter => ',',
        p_db_column             => 'PARAMETER_VALUE',
        p_display_group_name    => 'PARAMETER',
        p_help_text             => q'~<p>Enter one or more page or application item used as the destination for this parameter. For multiple items, separate each item name with a comma.</p>
<p>You can type in the name or pick from the list of available items.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the item name returned from the list.~' );
    --
    l_property_id := 395;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COMPUTE_SUM',
        p_prompt             => 'Compute Sum',
        p_property_type      => 'YES NO',
        p_db_column          => 'SUM_COLUMN',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~For this column, specify whether the sum is computed and displays at the end of the report.
When used with break columns, the total sum and the sum on each break displays.~' );
    --
    l_property_id := 396;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_WIDTH',
        p_prompt             => 'Cell Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'REPORT_COLUMN_WIDTH',
        p_display_length     => 3,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter the column width in pixels.
Use this attribute when displaying reports in a browser.
Note that setting the column width must be supported by the selected report template.~' );
    --
    l_property_id := 397;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USE_AS_ROW_HEADER',
        p_prompt             => 'Use As Row Header',
        p_property_type      => 'YES NO',
        p_db_column          => 'USE_AS_ROW_HEADER',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify whether this column also display in the Row Header.
Including the column value can greatly improve accessibility for form fields rendered in a report.
When specified, this causes the Row Header to be used together with the Column Header to render the labels for the form fields in the report, using this <code>'&lt;Column Header&gt; : &lt;Row Header&gt;'</code> format.</p>
<p>For example, suppose you have a report on the EMP table and you define the ENAME column as the Row Header. For a row where ENAME is 'JONES,' the label for the Salary field in that row would be "Salary : JONES".
This approach enables a screen reader user to be able to navigate by the Form fields in the report and still maintain an understanding of which form fields relate to which row.</p>~' );
    --
    l_property_id := 398;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLASSIC_REPORT_COLUMN_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DISPLAY_AS',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the basis for this report column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text',
        p_return_value  => 'PLAIN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Displays the column value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text (based on List of Values)',
        p_return_value  => 'PLAIN_LOV',
        p_help_text     => q'~Displays the value returned from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link',
        p_return_value  => 'LINK',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Displays the column as a link.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Display Image',
        p_return_value  => 'IMAGE',
        p_help_text     => q'~Displays the column as an image.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Download BLOB',
        p_return_value  => 'DOWNLOAD',
        p_help_text     => q'~Displays the column as a link to download the file.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent Graph',
        p_return_value  => 'PCT_GRAPH',
        p_help_text     => q'~Displays the column as a percentage graph. The value retrieved must be between 0 and 100.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hidden Column',
        p_return_value  => 'HIDDEN_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Does not display the column, but it is referenceable.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Display as Text (saves state)',
        p_return_value  => 'DISPLAY_AND_SAVE',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Date Picker (Classic)',
        p_return_value  => 'DATE_POPUP',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Date Picker',
        p_return_value  => 'DATE_PICKER',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Text Field',
        p_return_value  => 'TEXT',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Text Area',
        p_return_value  => 'TEXTAREA',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Select List',
        p_return_value  => 'SELECT_LIST',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Radio Group',
        p_return_value  => 'RADIOGROUP',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Hidden Field',
        p_return_value  => 'HIDDEN_FIELD',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Popup LOV',
        p_return_value  => 'POPUP',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Popup Key LOV',
        p_return_value  => 'POPUPKEY',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Simple Checkbox',
        p_return_value  => 'SIMPLE_CHECKBOX',
        p_is_deprecated => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '* Row Selector',
        p_return_value  => 'ROW_SELECTOR',
        p_is_deprecated => 'Y' );
    --
    l_property_id := 399;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATE_PICKER_FORMAT_MASK',
        p_prompt             => 'Format Mask',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLUMN_FORMAT',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the format mask to apply to the date picker for this column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Application Date Format',
        p_return_value  => 'PICK_DATE_USING_APP_DATE_FORMAT',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Application Format Mask',
        p_return_value  => 'PICK_DATE_USING_APP_FORMAT_MASK',
        p_comment_text  => '$$$ ???? DJP: What is the difference b/n this and Application Date Format Mask' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Item Format Mask',
        p_return_value  => 'PICK_DATE_USING_FORMAT_MASK' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MM-YYYY',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_DASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD.MM.YYYY',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD/MM/YYYY',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MM-YYYY HH:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH_MI_DASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD.MM.YYYY HH:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH_MI_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD/MM/YYYY HH:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MM-YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH24_MI_DASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD.MM.YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH24_MI_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD/MM/YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MM_YYYY_HH24_MI',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-RR',
        p_return_value  => 'PICK_DATE_DD_MON_RR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-RR HH:MI',
        p_return_value  => 'PICK_DATE_DD_MON_RR_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-RR HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MON_RR_HH24_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-YYYY',
        p_return_value  => 'PICK_DATE_DD_MON_YYYY',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-YYYY HH:MI',
        p_return_value  => 'PICK_DATE_DD_MON_YYYY_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DD-MON-YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_DD_MON_YYYY_HH24_MI',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'MM/DD/YYYY',
        p_return_value  => 'PICK_DATE_MM_DD_YYYY',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'MM/DD/YYYY HH:MI',
        p_return_value  => 'PICK_DATE_MM_DD_YYYY_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'MM/DD/YYYY HH24:MI',
        p_return_value  => 'PICK_DATE_MM_DD_YYYY_HH24_MI',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'RR-MON-DD',
        p_return_value  => 'PICK_DATE_RR_MON_DD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'RR-MON-DD HH:MI',
        p_return_value  => 'PICK_DATE_RR_MON_DD_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'RR-MON-DD HH24:MI',
        p_return_value  => 'PICK_DATE_RR_MON_DD_HH24_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY.DD.MM',
        p_return_value  => 'PICK_DATE_YYYY_DD_MM_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY.DD.MM HH:MI',
        p_return_value  => 'PICK_DATE_YYYY_DD_MM_HH_MI_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY.DD.MM HH24:MI',
        p_return_value  => 'PICK_DATE_YYYY_DD_MM_HH24_MI_DOT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY-MM-DD',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY/MM/DD',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_SLASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY-MM-DD HH:MI',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_HH_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY/MM/DD HH:MI',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_HH_MI_SLASH' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY-MM-DD HH24:MI',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_HH24_MI' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'YYYY/MM/DD HH24:MI',
        p_return_value  => 'PICK_DATE_YYYY_MM_DD_HH24_MI_SLASH' );
    --
    l_property_id := 400;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RADIO_COLUMNS',
        p_prompt             => 'Number of Columns',
        p_property_type      => 'INTEGER',
        p_db_column          => 'ATTRIBUTE_01',
        p_display_length     => 2,
        p_min_value          => 1,
        p_display_group_name => 'ELEMENT',
        p_help_text          => q'~Enter the number of columns to display for this radio group column.~' );
    --
    l_property_id := 402;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SIMPLE_CHECKBOX_VALUES',
        p_prompt             => 'Checkbox Values',
        p_property_type      => 'TEXT',
        p_db_column          => 'INLINE_LOV',
        p_display_length     => 60,
        p_display_group_name => 'LIST_OF_VALUES',
        p_help_text          => q'~For the Simple Checkbox display type, enter either one value or two comma separated values.
The first value is submitted if the checkbox is selected. The second value, if defined, is submitted if the checkbox is deselected.',
        p_examples           => q'~<dl>
<dt>Submit Yes when selected and No when deselected</dt>
<dd><pre>
Yes,No
</pre></dd>
</dl>~' );
    --
    l_property_id := 403;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'FORMATTING_CSS_CLASSES',
        p_prompt                => 'CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'COLUMN_CSS_CLASS',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Setting this attribute to <code>fielddatabold</code> results in the following HTML being generated</dt>
<dd><pre>
&lt;span class="fielddatabold"&gt;Sample Data&lt;/span&gt;
</pre></dd>
</dl>~',
        p_display_group_name    => 'COLUMN_FORMATTING',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~<p>Enter CSS classes to apply to this column's value. You can type in the CSS class or pick from the list of available items.</p>
<p>This class is included by default on all &PRODUCT_NAME. pages and has the definition of <code>'.fielddatabold{font-size: 10pt; font-weight: bold; color: #000000;}'</code>.</p>~' );
    --
    l_property_id := 404;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'CSS_STYLE',
        p_prompt                => 'CSS Style',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'COLUMN_CSS_STYLE',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Setting this attribute to <code>color:#FF0000;</code> changes the text color of the column to red and generates the following HTML</dt>
<dd><pre>
&lt;span style="color:#FF0000"&gt;Sample Data&lt;/span&gt;
</pre></dd>
</dl>~',
        p_display_group_name    => 'COLUMN_FORMATTING',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter CSS styles to apply to this column's value. You can type in the CSS style or pick from the list of available items.~' );
    --
    l_property_id := 405;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'HIGHLIGHT_WORDS',
        p_prompt                => 'Highlight Words',
        p_property_type         => 'TEXT',
        p_db_column             => 'COLUMN_HIT_HIGHLIGHT',
        p_display_length        => 84,
        p_max_length            => 255,
        p_restricted_characters => 'WEB_SAFE',
        p_display_group_name    => 'COLUMN_FORMATTING',
        p_help_text             => q'~Enter text strings to be highlighted in a report column.
For multiple highlighted words, use a comma delimited list.
You can also reference page or application items using <code>&amp;ITEM.</code> syntax.
For example, you can highlight strings entered into a search field.~' );
    --
    l_property_id := 406;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_SORT_SEQUENCE',
        p_prompt             => 'Default Sequence',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_SORT_COLUMN_SEQUENCE',
        p_display_group_name => 'SORTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the sort sequence for this column.
Each column should have a unique sequence to correctly order the report output.~',
        p_comment_text       => q'~$$$ should this really be a LOV, why not a one digit INTEGER?~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '1',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '2',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '3',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '4',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '5',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '6',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '7',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '8',
        p_return_value  => '8' );
    --
    l_property_id := 407;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_SORT_DIRECTION',
        p_prompt             => 'Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_SORT_DIR',
        p_display_group_name => 'SORTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether this column is sorted in Descending order. If not specified, the column is sorted in Ascending order (the default).~',
        p_comment_text       => q'~$$$ I think we should add ASC as well and migrate DEFAULT_SORT_DIR to ASC if no value is set~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Descending',
        p_return_value  => 'desc' );
    --
    l_property_id := 408;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'DISABLE_SORT_COLUMN',
        p_prompt                     => 'Sortable',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'N',
        p_prop_type_yesno_override_n => 'Y',
        p_db_column                  => 'DISABLE_SORT_COLUMN',
        p_display_group_name         => 'SORTING',
        p_help_text                  => q'~Specify whether this column can be used by the end user to sort the report.~' );
    --
    l_property_id := 409;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_IN_EXPORT_PRINT',
        p_prompt             => 'Include In Export / Print',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_IN_EXPORT',
        p_display_group_name => 'EXPORT_PRINTING',
        p_help_text          => q'~Specify whether this column is included when the report is exported to CSV or printed.~' );
    --
    l_property_id := 410;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_COLUMN_WIDTH',
        p_prompt             => 'Print Width',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRINT_COL_WIDTH',
        p_display_length     => 4,
        p_max_length         => 4000,
        p_display_group_name => 'EXPORT_PRINTING',
        p_help_text          => q'~Enter the column width used to size this column when the report is printed.~',
        p_comment_text       => q'~$$$ should this really be a text and not INTEGER or NUMBER? Column is defined as varchar2(4000)!?!?!~' );
    --
    l_property_id := 411;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'REPORT_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PLUG_QUERY_ROW_TEMPLATE',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_report_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~<p>Select a report template to define the appearance and layout of this classic report.</p>
        <p>Report templates are defined in the application theme.  
        When a classic report is created, the template is automatically set to the default report template defined in the current theme.</p>
        <p>Many themes contain classic report templates for displaying data in a table, key value pairs, search results, cards, and so forth.
        Note that some report templates, such as cards and search results, are "row based" and expect your SQL query to return a particular set of column aliases that are substituted in the template.<br>
        Universal Theme provides the following report templates:
          <dl>
            <dt>Alerts</dt>
              <dd>Displays any number of horizontal alerts or notifications on your page.</dd>
            <dt>Badge List</dt>
              <dd>Displays key value pairs in a dashboard-like user interface.</dd>
            <dt>Cards</dt>
              <dd>Displays report data in cards, or small blocks and is useful for presenting a variety of information. Cards can be heavily customized via Template Options.</dd>
            <dt>Comments</dt>
              <dd>Displays comments and other messages.</dd>
            <dt>Search Results</dt>
              <dd>Displays search-engine style search results</dd>
            <dt>Standard</dt>
              <dd>This is the default report template for displaying data in a table and can be heavily customized via Template Options.</dd>
            <dt>Timeline</dt>
              <dd>Displays a timeline of actions. It is well suited for home pages, change logs, and other areas where an activity feed of recent actions is needed.</dd>
            <dt>Value Attribute Pairs - Column</dt>
              <dd>Displays key-value pairs for column-based queries. It uses the column header as the label for each item.</dd>
            <dt>Value Attribute Pairs - Row</dt>
              <dd>Displays key-value pairs for row-based queries. It uses the first column for labels, and second column for values.</dd>
          </dl>
          See Also: <a target="_blank" href="https://apex.oracle.com/ut">Universal Theme Sample Application</a>
        </p>~' );
    --
    l_property_id := 412;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PCT_GRAPH_BACKGROUD_COLOR',
        p_prompt             => 'Background Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'PCT_GRAPH_BACKGROUND_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color used for the background of this graph.</p>~' );
    --
    l_property_id := 413;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PCT_GRAPH_FOREGROUND_COLOR',
        p_prompt             => 'Foreground Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'PCT_GRAPH_FOREGROUND_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color used for the foreground of this graph.</p>~' );
    --
    l_property_id := 414;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PCT_GRAPH_BAR_WIDTH',
        p_prompt             => 'Bar Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PCT_GRAPH_BAR_WIDTH',
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Enter the width in pixels for this bar chart.~' );
    --
    l_property_id := 415;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_TABLE_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'BLOB_TABLE_OWNER',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the schema that owns the table which stores the BLOB content you want to display.~' );
    --
    l_property_id := 416;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'BLOB_TABLE',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Enter the table name which stores the BLOB content you want to display.
You can type in the table name or pick from the list of available tables.~' );
    --
    l_property_id := 417;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_CONTENT_COLUMN',
        p_prompt             => 'BLOB Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_CONTENT_COLUMN',
        p_column_data_types  => 'BLOB',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the BLOB column from the table which stores the BLOB content you want to display. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 418;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_PK_COLUMN1',
        p_prompt             => 'Primary Key Column 1',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_PK_COLUMN1',
        p_column_data_types  => 'VARCHAR2:ROWID',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the first primary key column from the table which stores the BLOB content you want to display. If the primary key of this table has more than two columns, you must select the <code>ROWID</code> column. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 419;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_PK_COLUMN2',
        p_prompt             => 'Primary Key Column 2',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_PK_COLUMN2',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Only select the second primary key column if the primary key for your table has two columns. If you select <code>ROWID</code> for the first primary key column, you should not populate this column. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 420;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_MIME_TYPE_COLUMN',
        p_prompt             => 'Mime Type Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_MIME_TYPE_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the mime type column from the table which stores the BLOB content you want to display. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 421;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_FILENAME_COLUMN',
        p_prompt             => 'Filename Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_FILENAME_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Enter the filename column from the table which stores the BLOB content you want to display. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 422;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_CHARSET_COLUMN',
        p_prompt             => 'Character Set Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_CHARSET_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the character set column from the table which stores the BLOB content you want to display. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 423;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BLOB_LAST_UPDATED_COLUMN',
        p_prompt             => 'Last Updated Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'BLOB_LAST_UPDATED_COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_display_group_name => 'BLOB',
        p_help_text          => q'~Select the last updated column from the table which stores the BLOB content you want to display. If you already have an <code>UPDATED</code> column with an associated trigger to maintain the date, you could use this column instead of defining a new column specifically for when the image was last updated. However, if columns other than the BLOB content are updated regularly, then image caching is adversely affected. The image is unlikely to display if you select a column with the wrong data type.~' );
    --
    l_property_id := 424;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CONTENT_DISPOSITION',
        p_prompt             => 'Content Disposition',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CONTENT_DISPOSITION',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the content disposition from the avialable list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Attachment',
        p_return_value  => 'attachment' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline',
        p_return_value  => 'inline' );
    --
    l_property_id := 425;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOWNLOAD_TEXT',
        p_prompt             => 'Download Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'DOWNLOAD_TEXT',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'APPEARANCE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text to use for the download link on the page. End users use this link to download the BLOB content.~' );
    --
    l_property_id := 427;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HEADINGS_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_QUERY_HEADINGS_TYPE',
        p_display_group_name => 'HEADING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how headings are defined for your report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column Names',
        p_return_value  => 'QUERY_COLUMNS',
        p_help_text     => q'~Generates headings based on a query of the column names.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column Names (InitCap)',
        p_return_value  => 'QUERY_COLUMNS_INITCAP',
        p_help_text     => q'~Generates headings, which are converted to initial capitalization, based on a query of the column names.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom Headings',
        p_return_value  => 'COLON_DELMITED_LIST',
        p_help_text     => q'~Enables you to enter your own headings. The headings are initially defaulted, based on a query of column names.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST',
        p_help_text     => q'~Creates headings based on a PL/SQL Function returning a colon delimited list of names.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NO_HEADINGS',
        p_help_text     => q'~The report is displayed without report headings.~' );
    --
    l_property_id := 428;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HEADING_TYPE_PLSQL_FUNCTION_BODY',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'PLUG_QUERY_HEADINGS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Provide the headings for a report based on the DEPT table</dt>
<dd><pre>return 'Deptno:DName:Loc';</pre></dd>
</dl>~',
        p_display_group_name => 'HEADING',
        p_help_text          => q'~Enter a PL/SQL function to return a string of column headings delimited by colons.~' );
    --
    l_property_id := 429;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TEMPLATE_TYPE',
        p_prompt             => 'Template Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TEMPLATE_TYPE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the template type for this report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Theme',
        p_return_value  => 'THEME',
        p_help_text     => q'~Report templates available in the corresponding theme, based on the current theme for this page's user interface.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Predefined',
        p_return_value  => 'PREDEFINED',
        p_help_text     => q'~Predefined report templates which are not associated directly with any themes. Because there is no correlation between these predefined templates and your current theme, your report layout remains the same even if you change the application theme.~' );
    --
    l_property_id := 430;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_PREDEFINED_TEMPLATE',
        p_prompt             => 'Template',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_QUERY_ROW_TEMPLATE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a predefined report templates to control the display of this report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML (standard)',
        p_return_value  => '1',
        p_help_text     => q'~Creates a standard HTML table.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical Report',
        p_return_value  => '2',
        p_help_text     => q'~Shows each column in a separate row.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CSV',
        p_return_value  => '21',
        p_help_text     => q'~Exports the report as a CSV file.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XML',
        p_return_value  => '22',
        p_help_text     => q'~Exports the report as an XML file.~' );
    --
    l_property_id := 431;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CLASSIC_REPORT_PAGINATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS_TYPE',
        p_display_group_name => 'PAGINATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the pagination type to utilize in this report.
Generally only a subset of the results are currently displayed in the report.
Pagination provides the user with information about the number of rows and the current position within the result set. Pagination also defines the style of links or buttons that are used to navigate to the next or previous page.</p>
<p>Pagination can be shown above or below the report (or both) and can be positioned on the left or right.</p>
<p>You can also use a simplified pagination style to improve performance, such as <strong>Row Ranges X to Y (with next and previous links)</strong>.
Using paginiation types of the form "X to Y of Z", require the &PRODUCT_NAME. engine to perform two queries to return the results.
One query retrieves the current records to be displayed and another query gets the total record count to display in the pagination control.
For reports based on exceedingly large data sets or with very CPU intensive queries, such as numerous non-optimal table joins or exepnsive conditions, this additonal query can add some processing time, which can lead to the report taking longer to render.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y (no pagination)',
        p_return_value  => 'ROWS_X_TO_Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y of Z (no pagination)',
        p_return_value  => 'ROWS_X_TO_Y_OF_Z' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y of Z (with pagination)',
        p_return_value  => 'ROW_RANGES_WITH_LINKS',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges 1-15 16-30  (with set pagination)',
        p_return_value  => 'ROW_RANGES' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges 1-15 16-30 in select list (with pagination)',
        p_return_value  => 'ROW_RANGES_IN_SELECT_LIST' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Search Engine 1,2,3,4 (set based pagination)',
        p_return_value  => 'SEARCH_ENGINE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Externally Created Pagination Buttons',
        p_return_value  => 'COMPUTED_BUT_NOT_DISPLAYED' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Ranges X to Y (with next and previous links)',
        p_return_value  => 'NEXT_PREVIOUS_LINKS',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 432;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARTIAL_PAGE_REFRESH',
        p_prompt             => 'Partial Page Refresh',
        p_property_type      => 'YES NO',
        p_db_column          => 'AJAX_ENABLED',
        p_display_group_name => 'PAGINATION',
        p_help_text          => q'~<p>Specify whether to use Partial Page Refresh (PPR) to update the report display.</p>
If the end user performs an action, such as a pagination request or selection of a new sort column, the current report rows must be refreshed. Setting this attribute to <strong>Yes</strong>, refreshes just the report region. Setting this attribute to <strong>No</strong>, refreshes the entire page.~' );
    --
    l_property_id := 433;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NUMBER_OF_ROWS_TYPE',
        p_prompt             => 'Number of Rows Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'NUMBER_OF_ROWS_TYPE',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the number of rows for this report are entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Based on Item Value',
        p_return_value  => 'ITEM' );
    --
    l_property_id := 434;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NUMBER_OF_ROWS',
        p_prompt             => 'Number of Rows',
        p_property_type      => 'INTEGER',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS',
        p_display_length     => 3,
        p_min_value          => 0, -- Has to be 0 because of backward compatibility. See APEX 5.0 - EA1 feedback EA1-499 where a developer used it to hide the report but provide a download link.
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Enter the number of report rows to display per report page.~' );
    --
    l_property_id := 435;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NUMBER_OF_ROWS_ITEM',
        p_prompt             => 'Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'PLUG_QUERY_NUM_ROWS_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~Select the item whose value specifies the number of report rows to display per report page.~' );
    --
    l_property_id := 436;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STRIP_HTML',
        p_prompt             => 'Strip HTML',
        p_property_type      => 'YES NO',
        p_db_column          => 'PLUG_QUERY_STRIP_HTML',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Specify whether or not to remove HTML tags from the original column values.
This is particularly important for columns that utilize HTML expressions, are used in column links, or are exported to CSV files.</p>
<p>If you select values from the database that already contain HTML tags, then those tags can cause conflicts with the HTML generated for your HTML expressions or URL generated for column links.
When exporting such values, the existing HTML tags are included as plain text in the generated CSV file.
When this option is enabled, only the actual data portion of your column value is used.</p>~' );
    --
    l_property_id := 437;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SORT_NULLS',
        p_prompt             => 'Sort Nulls',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SORT_NULL',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~For report columns that enable column heading sorting, select how you want records with null values to be sorted in relation to records with not null values~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First',
        p_return_value  => 'F',
        p_help_text     => q'~Records with a null value are displayed before any columns with not-null values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Last',
        p_return_value  => 'L',
        p_help_text     => q'~Records with a not-null values are displayed before any columns with a null value.~' );
    --
    l_property_id := 438;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_MORE_DATA_FOUND_MESSAGE',
        p_prompt             => 'When More Data Found',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'PLUG_QUERY_MORE_DATA',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'MESSAGES',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the text message that displays when more report rows exist.
Use this approach as an alternative to pagination, especially if a report generally only has a discrete record set.
If the report query returns additional rows, this message can be used to alert the end user to the anomoly, rather than simply displaying slightly different pagination controls.
Your text message can readily incorporate a "Call to action" so end users are given guidance on how to respond to this unusual query result and can include page or URL links.</p>
<p>The following pagination substitution strings can be utilized in your message:</p>
<dl>
  <dt><code>#ROWS_FETCHED#</code></dt>
    <dd>The number of rows displayed (page size)</dd>
  <dt><code>#TOTAL_ROWS#</code></dt>
    <dd>The "Z" in "rows X - Y of Z"</dd>
  <dt><code>#FIRST_ROW_FETCHED#</code></dt>
    <dd>The "X" in "rows X - Y of Z"</dd>
  <dt><code>#LAST_ROW_FETCHED#</code></dt>
    <dd>The "Y" in "rows X - Y of Z"</dd>
  <dt><code>#ROW_RANGES"</code></dt>
    <dd>Shows: Row(s) 1-15 16-30 30-32</dd>
  <dt><code>#ROW_RANGES_IN_SELECT_LIST</code></dt>
    <dd>Same as row ranges but in a select list<dd>
  <dt><code>#INTERNET_PAGINATION#</code></dt>
    <dd>Page Sets: 1 2 3 4 5 6</dd>
</dl>~' );
    --
    l_property_id := 439;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CSV_EXPORT_ENABLED',
        p_prompt             => 'CSV Export Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'CSV_OUTPUT',
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~Specify whether end users can download the report contents to a CSV file. To enable <em>CSV Downloads</em>, you must use a report template with a <code>#CSV_LINK#</code> substitution string and set this option to <strong>YES</strong>.~' );
    --
    l_property_id := 440;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DOWNLOAD_LINK_TEXT',
        p_prompt             => 'Link Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'CSV_OUTPUT_LINK_TEXT',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'DOWNLOAD',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text for the link to invoke the CSV download.~' );
    --
    l_property_id := 441;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REPORT_SUM_LABEL',
        p_prompt             => 'Report Sum Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'REPORT_TOTAL_TEXT_FORMAT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'BREAK_FORMATTING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text that displays adjacent to report sum values.~' );
    --
    l_property_id := 442;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_COLUMNS',
        p_prompt             => 'Break Columns',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PLUG_QUERY_BREAK_COLS',
        p_display_group_name => 'BREAK_FORMATTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how many report columns are incorporated into the break formatting. The columns must be consecutive columns, starting from the first column displayed in the report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First Column',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First and Second Columns',
        p_return_value  => '1:2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First, Second and Third Column',
        p_return_value  => '1:2:3' );
    --
    l_property_id := 443;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_COLUMN_STYLE',
        p_prompt             => 'Style',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BREAK_TYPE_FLAG',
        p_display_group_name => 'BREAK_FORMATTING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how breaks affect the display formatting of the report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Repeat Headings on Break',
        p_return_value  => 'REPEAT_HEADINGS_ON_BREAK_1',
        p_help_text     => q'~The report displays as several subreports with repeating headings for each break.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default Break Formatting',
        p_return_value  => 'DEFAULT_BREAK_FORMATTING',
        p_help_text     => q'~The breaks display in a single report without repeating the headings for each break.~' );
    --
    l_property_id := 444;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_REPEAT_HEADING_FORMAT',
        p_prompt             => 'Repeat Heading Format',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'BREAK_REPEAT_HEADING_FORMAT',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_help_text          => q'~Enter the text for the repeating headings displayed for report breaks. You can utilize <code>#COLUMN_VALUE#</code> substitutions.~' );
    --
    l_property_id := 445;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_COLUMN_TEXT_FORMAT',
        p_prompt             => 'Report Break Format',
        p_property_type      => 'TEXT',
        p_db_column          => 'BREAK_COLUMN_TEXT_FORMAT',
        p_display_length     => 80,
        p_max_length         => 2000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the text that displays on report breaks. Utilize <code>#SUM_COLUMN_HEADER#</code> substitutions.~',
        p_comment_text       => q'~$$$ improve prompt~' );
    --
    l_property_id := 446;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_BEFORE_ROW',
        p_prompt             => 'Before Row',
        p_property_type      => 'TEXT',
        p_db_column          => 'BREAK_BEFORE_ROW',
        p_display_length     => 80,
        p_max_length         => 2000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_help_text          => q'~Enter the text that displays before break columns when displaying a break row.~' );
    --
    l_property_id := 447;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_GENERIC_COLUMN',
        p_prompt             => 'Column Break Format',
        p_property_type      => 'TEXT',
        p_db_column          => 'BREAK_GENERIC_COLUMN',
        p_display_length     => 80,
        p_max_length         => 2000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_help_text          => q'~Enter the text for the break column when displaying a report break. You can utilize <code>#COLUMN_VALUE#</code> substitutions.~',
        p_comment_text       => q'~$$$ improve prompt~' );
    --
    l_property_id := 448;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BREAK_AFTER_ROW',
        p_prompt             => 'After Row',
        p_property_type      => 'TEXT',
        p_db_column          => 'BREAK_AFTER_ROW',
        p_display_length     => 80,
        p_max_length         => 2000,
        p_display_group_name => 'BREAK_FORMATTING',
        p_help_text          => q'~Enter the text that displays after break columns when displaying a break row.~' );
    --
    l_property_id := 449;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_PROCESSING_ENABLED',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'PRINT_ENABLED',
        p_display_group_name => 'EXTERNAL_PROCESSING',
        p_deprecated_values  => 'Y',
        p_help_text          => q'~Specify whether external post processing is enabled for this report.~' );
    --
    l_property_id := 450;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_PROCESSING_URL',
        p_prompt             => 'URL',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRINT_URL',
        p_display_length     => 60,
        p_max_length         => 2000,
        p_display_group_name => 'EXTERNAL_PROCESSING',
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~Enter the URL to a server for post processing of this report.~' );
    --
    l_property_id := 451;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_PROCESSING_LINK_TEXT',
        p_prompt             => 'Link Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRINT_URL_LABEL',
        p_display_length     => 60,
        p_max_length         => 2000,
        p_display_group_name => 'EXTERNAL_PROCESSING',
        p_is_translatable    => true,
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~Enter the text for the link which end users click to invoke the external processing engine.~' );
    --
    l_property_id := 452;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TAB_FORM_COLUMN_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DISPLAY_AS',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the basis for this Tabular Form column.</p>
<p>The selection determines whether this column is updateable within the Tabular Form.
Updates can only be performed if a multiple row update is defined, or a PL/SQL process is implemented to process updated data.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Selector',
        p_return_value  => 'ROW_SELECTOR',
        p_help_text     => q'~Includes a checkbox at the beginning of each row.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text',
        p_return_value  => 'PLAIN',
        p_help_text     => q'~Displays the column value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text (saves state)',
        p_return_value  => 'DISPLAY_AND_SAVE',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Displays the column value, and saves in the value in session state. This column can be utilized in page processing.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plain Text (based on List of Values)',
        p_return_value  => 'PLAIN_LOV',
        p_help_text     => q'~Displays the value returned from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link',
        p_return_value  => 'LINK',
        p_help_text     => q'~Displays the column as a link.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Display Image',
        p_return_value  => 'IMAGE',
        p_help_text     => q'~Displays the column as an image.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Download BLOB',
        p_return_value  => 'DOWNLOAD',
        p_help_text     => q'~Displays the column as a link to download the file.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent Graph',
        p_return_value  => 'PCT_GRAPH',
        p_help_text     => q'~Displays the column as a percentage graph. The value retrieved must be between 0 and 100.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text Field',
        p_return_value  => 'TEXT',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Enter a value into a text field.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Text Area',
        p_return_value  => 'TEXTAREA',
        p_help_text     => q'~Enter a value into a text area field.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Select List',
        p_return_value  => 'SELECT_LIST',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Select a value from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Popup LOV (shows displays value)',
        p_return_value  => 'POPUPKEY',
        p_help_text     => q'~Select a value from the popup. The display value from the list of values is shown.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Popup LOV (shows return value)',
        p_return_value  => 'POPUP',
        p_help_text     => q'~Select a value from the popup. The return value from the list of values is shown.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Radio Group',
        p_return_value  => 'RADIOGROUP',
        p_help_text     => q'~Select a single radio group from the list of values specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Simple Checkbox',
        p_return_value  => 'SIMPLE_CHECKBOX',
        p_help_text     => q'~Check or uncheck a single checkbox.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date Picker',
        p_return_value  => 'DATE_PICKER',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Enter the date, or utilize the date picker to select the date.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date Picker (Classic)',
        p_return_value  => 'DATE_POPUP',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Enter the date, or utilize the date picker to select the date.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hidden Column',
        p_return_value  => 'HIDDEN_COLUMN',
        p_help_text     => q'~Does not display the column, but it is referenceable.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hidden Column (saves state)',
        p_return_value  => 'HIDDEN_FIELD',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Does not display the column, but it is referenceable. This column can be utilized in page processing.~' );
    --
    l_property_id := 457;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UI_DEFAULT_REF_TABLE_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'REF_SCHEMA',
        p_display_group_name => 'UI_DEFAULTS_REFERENCE',
        p_help_text          => q'~Select the schema that owns the reference table.
This attribute is used to compare references to columns across applications using User Interface Defaults.
This reference is maintained manually, after being initialized by a wizard, whenever possible.~' );
    --
    l_property_id := 458;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UI_DEFAULT_REF_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'REF_TABLE_NAME',
        p_display_group_name => 'UI_DEFAULTS_REFERENCE',
        p_help_text          => q'~Select the table or view that this column references.
This attribute is used to compare references to columns across applications using User Interface Defaults.
This reference is maintained manually, after being initialized by a wizard, whenever possible.~' );
    --
    l_property_id := 459;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UI_DEFAULT_REF_COLUMN',
        p_prompt             => 'Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'REF_COLUMN_NAME',
        p_column_data_types  => 'VARCHAR2:BLOB:BFILE',
        p_display_group_name => 'UI_DEFAULTS_REFERENCE',
        p_help_text          => q'~Select the column name that this report column references.
This attribute is used to compare references to columns across applications using User Interface Defaults.
This reference is maintained manually, after being initialized by a wizard, whenever possible.~' );
    --
    l_property_id := 460;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLUMN_DEFAULT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLUMN_DEFAULT_TYPE',
        p_display_group_name => 'DEFAULT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a default column value type.~',
        p_comment_text       => q'~$$$ to be in sync with item default value we should add a STATIC option as well, item default should be enhanced to support ITEM. If we do that, we can use the property DEFAULT_VALUE_TYPE.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'FUNCTION' );
    --
    l_property_id := 461;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_ITEM',
        p_prompt             => 'Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'ITEM_DEFAULT',
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the page or application item which holds the default value.~' );
    --
    l_property_id := 462;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PK_SOURCE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PK_COL_SOURCE_TYPE',
        p_display_group_name => 'PRIMARY_KEY_SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source type for the primary key.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Existing trigger',
        p_return_value  => 'T' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'F' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Existing sequence',
        p_return_value  => 'S' );
    --
    l_property_id := 463;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PK_SOURCE_PLSQL_EXPRESSION',
        p_prompt             => 'PL/SQL Expression',
        p_property_type      => 'PLSQL EXPRESSION VARCHAR2',
        p_db_column          => 'PK_COL_SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PRIMARY_KEY_SOURCE',
        p_help_text          => q'~Enter a PL/SQL expression that provides a value for the primary key.~' );
    --
    l_property_id := 464;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PK_SOURCE_SEQUENCE_NAME',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'PK_COL_SOURCE',
        p_display_length     => 30,
        p_max_length         => 128,
        p_display_group_name => 'PRIMARY_KEY_SOURCE',
        p_help_text          => q'~Enter a name for the primary key.~' );
    --
    l_property_id := 465;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BRANCH_ACCEPT_REQUEST',
        p_prompt             => 'Request',
        p_property_type      => 'TEXT',
        p_db_column          => 'BRANCH_ACCEPT_REQUEST',
        p_display_length     => 20,
        p_max_length         => 128,
        p_display_group_name => 'BEHAVIOR',
        p_help_text          => q'~Enter the request to be included within the branch link.~' );
    --
    l_property_id := 466;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'QUERY_COLUMN_ID',
        p_prompt             => 'Report Column Query Id',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'QUERY_COLUMN_ID',
        p_max_length         => 4,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~$$$ DJP currently hidden~' );
    --
    l_property_id := 467;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DERIVED_COLUMN',
        p_prompt             => 'Derived Column',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'DERIVED_COLUMN',
        p_max_length         => 4,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~$$$ DJP currently hidden~' );
    --
    l_property_id := 468;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_SERIES_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the map series type. A chart combining different types of series on the same data plot can also be created.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Map',
        p_return_value  => 'Map' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'Line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Marker',
        p_return_value  => 'Marker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bubble',
        p_return_value  => 'Bubble' );
    --
    store_property_series_source (
        p_prefix               => 'MAP',
        p_property_id_type     => 469,
        p_property_id_sql      => 470,
        p_property_id_plsql    => 471,
        p_sql_min_column_count => 3,
        p_sql_max_column_count => 3,
        p_examples_sql         => q'~$$$~',
        p_examples_plsql       => q'~$$$~' );
    --
    l_property_id := 472;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERIES_LINK_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SHOW_ACTION_LINK',
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series link type. The action link is applied to each item of the chart series and is activated by clicking an item of the chart series.
The action link can navigate to another page within the application or a provided URL.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Link to Custom Target',
        p_return_value  => 'C',
        p_help_text     => q'~Any value set in the LINK column of the chart series query is overwritten by the Action Link settings, and used to set the action on the chart series items.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Value of LINK Column',
        p_return_value  => 'N',
        p_help_text     => q'~Any value set in the LINK column of the chart series query is used to set the action on the chart series items.~' );
    --
    l_property_id := 473;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CHART_TYPE',
        p_display_group_name => 'CHART',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a chart type. The chart type indicate the style in which this chart is rendered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column',
        p_return_value  => 'COLUMN',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stacked Column',
        p_return_value  => 'STACKED_COLUMN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stacked Column (Percent)',
        p_return_value  => 'STACKED_COLUMN_PCT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Range Column',
        p_return_value  => 'RANGE_COLUMN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar Chart',
        p_return_value  => 'BAR',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stacked Bar Chart',
        p_return_value  => 'STACKED_BAR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stacked Bar Chart (Percent)',
        p_return_value  => 'STACKED_BAR_PCT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Range Bar Chart',
        p_return_value  => 'RANGE_BAR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pie',
        p_return_value  => 'PIE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Doughnut',
        p_return_value  => 'DOUGHNUT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'LINE',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Candlestick',
        p_return_value  => 'CANDLESTICK' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scatter Marker',
        p_return_value  => 'SCATTER_MARKER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dial',
        p_return_value  => 'DIAL',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dial (Percent)',
        p_return_value  => 'DIAL_PCT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Project Gantt',
        p_return_value  => 'PROJECT_GANTT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Resource Gantt',
        p_return_value  => 'RESOURCE_GANTT' );
    --
    l_property_id := 474;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERIES_CHART_TYPE',
        p_prompt             => 'Series Chart Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'CHART_TYPE',
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION' );
    --
    store_property_series_source (
        p_prefix               => 'PROJECT_GANTT',
        p_property_id_type     => 475,
        p_property_id_sql      => 476,
        p_property_id_plsql    => 477,
        p_sql_min_column_count => 7,
        p_sql_max_column_count => 9,
        p_examples_sql         => q'~
<pre>
select 'f?p=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || id as link,
       task_name      as name,
       task_id        as id,
       parent_task_id as parent_id,
       start_date     as actual_start,
       end_date       as actual_end,
       status_number  as progress
  from tasks
 order by task_id
</pre>
~',
        p_examples_plsql       => q'~$$$~' );
    --
    store_property_series_source (
        p_prefix               => 'RESOURCE_GANTT',
        p_property_id_type     => 478,
        p_property_id_sql      => 479,
        p_property_id_plsql    => 480,
        p_sql_min_column_count => 6,
        p_sql_max_column_count => 6,
        p_examples_sql         => q'~
<pre>
select 'f?p=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || id as link,
       resource_name as name,
       resource_id   as id,
       parent_id     as parent_id,
       start_date    as actual_start,
       end_date      as actual_end
  from resources
 order by resource_id
</pre>
~',
        p_examples_plsql       => q'~$$$~' );
    --
    store_property_series_source (
        p_prefix               => 'PIE_DOUGHNUT',
        p_property_id_type     => 481,
        p_property_id_sql      => 482,
        p_property_id_plsql    => 483,
        p_sql_min_column_count => 3,
        p_sql_max_column_count => 3,
        p_examples_sql         => q'~<dl>
<dt>No Link</dt>
<dd><pre>
select null   as link,
       ename  as label,
       sal    as value
  from emp
</pre></dd>
<dt>Including Link</dt>
<dd><pre>
select 'f?p=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       ename  as label,
       sal    as value
  from emp
</pre></dd>
</dl>~',
        p_examples_plsql       => q'~$$$~' );
    --
    store_property_series_source (
        p_prefix               => 'DIAL',
        p_property_id_type     => 484,
        p_property_id_sql      => 485,
        p_property_id_plsql    => 486,
        p_sql_min_column_count => 2,
        p_sql_max_column_count => 4,
        p_examples_sql         => q'{
<pre>
select sum( case when comm is null or comm = 0 then 0 else 1 end ) as value,
       count(*) as max_value
  from emp
</pre>
}',
        p_examples_plsql       => q'~$$$~' );
    --
    store_property_series_source (
        p_prefix               => 'SCATTER',
        p_property_id_type     => 487,
        p_property_id_sql      => 488,
        p_property_id_plsql    => 489,
        p_sql_min_column_count => 4,
        p_sql_max_column_count => 4,
        p_examples_sql         => q'~<dl>
<dt>No Link</dt>
<dd><pre>
select null   as link,
       ename  as label,
       deptno as x_value,
       sal    as y_value
  from emp
</pre></dd>
<dt>Including Link</dt>
<dd><pre>
select 'f?p=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       ename  as label,
       deptno as x_value,
       sal    as y_value
  from emp
</pre></dd>
</dl>~',
        p_examples_plsql       => q'~$$$~' );
    --
    store_property_series_source (
        p_prefix               => 'RANGE',
        p_property_id_type     => 490,
        p_property_id_sql      => 491,
        p_property_id_plsql    => 492,
        p_sql_min_column_count => 4,
        p_sql_max_column_count => 4,
        p_examples_sql         => q'~<dl>
<dt>No Link</dt>
<dd><pre>
select null    as link,
       ename   as label,
       sal / 2 as open_value,
       sal*10  as close_value
  from emp
</pre></dd>
<dt>Including Link</dt>
<dd><pre>
select 'f?p=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       ename   as label,
       sal / 2 as open_value,
       sal*10  as close_value
  from emp
</pre></dd>
</dl>~',
        p_examples_plsql => q'~$$$~' );
    --
    store_property_series_source (
        p_prefix               => 'CANDLESTICK',
        p_property_id_type     => 493,
        p_property_id_sql      => 494,
        p_property_id_plsql    => 495,
        p_sql_min_column_count => 6,
        p_sql_max_column_count => 6,
        p_examples_sql         => q'~<dl>
<dt>No Link</dt>
<dd><pre>
select null       as link,
       price_date as label,
       open,
       high,
       low,
       close
  from stock_history_table
 order by price_date
</pre></dd>
<dt>Including Link</dt>
<dd><pre>
select 'f?p=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || id as link,
       price_date as label,
       open,
       high,
       low,
       close
  from stock_history_table
 order by price_date
</pre></dd>
</dl>
~',
        p_examples_plsql => q'~$$$~' );
    --
    store_property_series_source (
        p_prefix               => 'LINE_COL_BAR_STK',
        p_property_id_type     => 496,
        p_property_id_sql      => 497,
        p_property_id_plsql    => 498,
        p_sql_min_column_count => 2,
        p_sql_max_column_count => null,
        p_examples_sql         => q'~<dl>
<dt>No Link</dt>
<dd><pre>
select null  as link,
       ename as label,
       sal   as value
  from emp
 order by ename
</pre></dd>
<dt>Including Link</dt>
<dd><pre>
select 'f?p=&APP_ID.:2:' || :APP_SESSION || '::::P2_ID:' || empno as link,
       ename as label,
       sal   as value
  from emp
 order by ename
</pre></dd>
<dt>Two series</dt>
<dd><pre>
select null  as link,
       ename as label,
       sal   as "Salary",
       comm  as "Commission"
  from emp
 order by ename
</pre></dd>
</dl>~',
        p_examples_plsql => q'~$$$~' );
    --
    l_property_id := 499;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERIES_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type. You can also create a chart combining different types of series on the same data plot.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'Bar' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'Line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Marker',
        p_return_value  => 'Marker' );
    --
    l_property_id := 500;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SCATTER_MARKER_SERIES_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the scatter marker series chart type. You can also create a chart combining different types of series on the same data plot.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'Line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Marker',
        p_return_value  => 'Marker' );
    --
    l_property_id := 501;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_RENDERING',
        p_prompt             => 'Rendering',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CHART_RENDERING',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart rendering style for this chart. For jQuery Smartphone Mobile user interface, all charts are rendered using HTML5.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Flash Chart',
        p_return_value  => 'FLASH_PREFERRED',
        p_help_text     => q'~On a device with Flash enabled, the chart renders as a Flash chart. However, on a device without Flash enabled, the chart renders as a HTML5 chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML5 Chart',
        p_return_value  => 'SVG_ONLY',
        p_help_text     => q'~The chart renders as a HTML5 chart.~' );
    --
    store_chart_font_properties (
        p_font_group             => 'X_AXIS_LABEL_FONT',
        p_prompt_prefix          => 'Label',
        p_display_group_name     => 'X_AXIS',
        p_property_id_font       => 502,
        p_property_id_font_size  => 503,
        p_property_id_font_color => 504 );
    --
    store_chart_font_properties (
        p_font_group             => 'X_AXIS_TITLE_FONT',
        p_prompt_prefix          => 'Title',
        p_display_group_name     => 'X_AXIS',
        p_property_id_font       => 505,
        p_property_id_font_size  => 506,
        p_property_id_font_color => 507 );
    --
    store_chart_font_properties (
        p_font_group             => 'Y_AXIS_LABEL_FONT',
        p_prompt_prefix          => 'Label',
        p_display_group_name     => 'Y_AXIS',
        p_property_id_font       => 508,
        p_property_id_font_size  => 509,
        p_property_id_font_color => 510 );
    --
    store_chart_font_properties (
        p_font_group             => 'Y_AXIS_TITLE_FONT',
        p_prompt_prefix          => 'Title',
        p_display_group_name     => 'Y_AXIS',
        p_property_id_font       => 511,
        p_property_id_font_size  => 512,
        p_property_id_font_color => 513 );
    --
    store_chart_font_properties (
        p_font_group             => 'LABELS_FONT',
        p_display_group_name     => 'LABEL',
        p_property_id_font       => 514,
        p_property_id_font_size  => 515,
        p_property_id_font_color => 516 );
    --
    store_chart_font_properties (
        p_font_group             => 'VALUES_FONT',
        p_display_group_name     => 'VALUE',
        p_property_id_font       => 517,
        p_property_id_font_size  => 518,
        p_property_id_font_color => 519 );
    --
    store_chart_font_properties (
        p_font_group             => 'TOOLTIP_FONT',
        p_display_group_name     => 'TOOLTIP',
        p_property_id_font       => 520,
        p_property_id_font_size  => 521,
        p_property_id_font_color => 522 );
    --
    store_chart_font_properties (
        p_font_group             => 'LEGEND_FONT',
        p_display_group_name     => 'LEGEND',
        p_property_id_font       => 523,
        p_property_id_font_size  => 524,
        p_property_id_font_color => 525 );
    --
    store_chart_font_properties (
        p_font_group             => 'CHART_TITLE_FONT',
        p_display_group_name     => 'TITLE',
        p_property_id_font       => 526,
        p_property_id_font_size  => 527,
        p_property_id_font_color => 528 );
    --
    l_property_id := 532;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTOMATIC_REFRESH',
        p_prompt             => 'Automatic Refresh',
        p_property_type      => 'YES NO',
        p_db_column          => 'AUTOMATIC_REFRESH',
        p_display_group_name => 'AUTOMATIC_REFRESH',
        p_help_text          => q'~Specify whether to enable asynchronous graph updates. Enabling Automatic Refresh refreshes the graph automatically based on the <strong>Interval</strong> you provide.~' );
    --
    l_property_id := 533;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AUTOMATIC_REFRESH_INTERVAL',
        p_prompt             => 'Interval',
        p_property_type      => 'INTEGER',
        p_db_column          => 'AUTOMATIC_REFRESH_INTERVAL',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'AUTOMATIC_REFRESH',
        p_help_text          => q'~Enter the interval in seconds between chart updates. Very small updates intervals, such as 2 seconds, are discouraged since they may cause serious database performance issues.~' );
    --
    l_property_id := 534;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'USE_CUSTOM_XML',
        p_prompt             => 'Custom',
        p_property_type      => 'YES NO',
        p_db_column          => 'USE_CUSTOM_XML',
        p_display_group_name => 'CUSTOM_XML',
        p_help_text          => q'~Specify whether the generated chart XML is overriden by custom chart XML. If you choose to use custom XML, attributes under Display Settings, Axes Settings, Legend Settings, Font Settings and Chart Title are not used.~',
        p_comment_text       => q'~$$$ Review help text~' );
    --
    l_property_id := 535;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_XML',
        p_prompt             => 'XML',
        p_property_type      => 'XML',
        p_db_column          => 'CUSTOM_XML',
        p_display_length     => 80,
        p_max_length         => 32767,
        p_display_group_name => 'CUSTOM_XML',
        p_help_text          => q'~<p>Enter the custom Chart XML for this chart. Please refer to the AnyChart XML documentation for further details:</p>
<ul>
  <li><a target="_blank" href="http://www.anychart.com/products/anychart/docs/xmlReference/index.html">Flash Charting Component - XML Reference</a></li>
</ul>~' );
    --
    l_property_id := 536;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_LEGEND',
        p_prompt             => 'Show',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SHOW_LEGEND',
        p_display_group_name => 'LEGEND',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where to display a legend for your chart. You can chose to not have a legend, or choose from various locations to display the chart legend.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Left',
        p_return_value  => 'Left' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Right',
        p_return_value  => 'Right',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'Top' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom',
        p_return_value  => 'Bottom',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Float',
        p_return_value  => 'Float' );
    --
    l_property_id := 537;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LEGEND_TITLE',
        p_prompt             => 'Title',
        p_property_type      => 'TEXT',
        p_db_column          => 'LEGEND_TITLE',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'LEGEND',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a title to display at the top of the chart legend.~' );
    --
    l_property_id := 538;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LEGEND_ELEMENT_ORIENTATION',
        p_prompt             => 'Element Orientation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LEGEND_ELEMENT_ORIENTATION',
        p_display_group_name => 'LEGEND',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the orientation for the chart legend elements.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical',
        p_return_value  => 'V' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal',
        p_return_value  => 'H' );
    --
    l_property_id := 539;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_LEGEND_BACKGROUND',
        p_prompt             => 'Show Background',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_LEGEND_BACKGROUND',
        p_display_group_name => 'LEGEND',
        p_help_text          => q'~Specify whether the legend background is visible on your chart.~' );
    --
    l_property_id := 540;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_MARGIN_TOP',
        p_prompt             => 'Top',
        p_property_type      => 'INTEGER',
        p_db_column          => 'CHART_MARGIN_TOP',
        p_display_length     => 4,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'MARGIN',
        p_help_text          => q'~Enter a value for the size of the blank space displayed above the chart.~',
        p_comment_text       => q'~$$$ Max length 4 (was set for map margins, check chart~' );
    --
    l_property_id := 541;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_MARGIN_BOTTOM',
        p_prompt             => 'Bottom',
        p_property_type      => 'INTEGER',
        p_db_column          => 'CHART_MARGIN_BOTTOM',
        p_display_length     => 4,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'MARGIN',
        p_help_text          => q'~Enter a value for the size of the blank space displayed below the chart.~',
        p_comment_text       => q'~$$$ Max length 4 (was set for map margins, check chart~' );
    --
    l_property_id := 542;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_MARGIN_LEFT',
        p_prompt             => 'Left',
        p_property_type      => 'INTEGER',
        p_db_column          => 'CHART_MARGIN_LEFT',
        p_display_length     => 4,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'MARGIN',
        p_help_text          => q'~Enter a value for the size of the blank space displayed on the left side of the chart.~',
        p_comment_text       => q'~$$$ Max length 4 (was set for map margins, check chart~' );
    --
    l_property_id := 543;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_MARGIN_RIGHT',
        p_prompt             => 'Right',
        p_property_type      => 'INTEGER',
        p_db_column          => 'CHART_MARGIN_RIGHT',
        p_display_length     => 4,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'MARGIN',
        p_help_text          => q'~Enter a value for the size of the blank space displayed on the right side of the chart.~',
        p_comment_text       => q'~$$$ Max length 4 (was set for map margins, check chart~' );
    --
    l_property_id := 544;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'CHART_WIDTH',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~<p>Enter the width of the chart in pixels. The width defines a fixed width for your chart region.
Alternatively, to enable automatic resizing of the chart width, leave this item empty.
The width is then automatically set to 100% of the region.</p>
<p>By default, a chart created on a page using the jQuery Mobile Smartphone user interface has no value set for width and correctly resizes to fit the device it is being rendered on.</p>~' );
    --
    l_property_id := 545;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'CHART_HEIGHT',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~<p>Enter the height of the chart in pixels. The height defines a fixed height for your chart region. Alternatively, to enable automatic resizing of the chart height, leave this item empty.
The height is then based upon the height of the browser.</p>
<p>By default, a chart created on a page using the jQuery Mobile Smartphone user interface has no value set for height, and correctly resizes to fit the device it is being rendered on.</p>~' );
    --
    l_property_id := 546;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'COLOR_SCHEME',
        p_prompt             => 'Scheme',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLOR_SCHEME',
        p_display_group_name => 'SERIES_COLOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a pre-built color scheme for your chart. Charts with a single series use one color for each datapoint, while charts with multiple series use one color for each series. Look 7 uses the AnyChart default palette of colors, applying a different color to each datapoint in a single series. If you wish to define your own color schemes, you can select <strong>Custom</strong> and define your own set of colors in <em>Custom Colors</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 1',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 2',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 3',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 4',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 5',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 6',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 7',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => '0' );
    --
    l_property_id := 547;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_COLOR_LEVEL',
        p_prompt             => 'Level',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLOR_LEVEL',
        p_display_group_name => 'SERIES_COLOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the color scheme level for your chart. By default, the level is set to <strong>Series</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Series',
        p_return_value  => 'S',
        p_help_text     => q'~Charts with a single series use one color for each datapoint, while charts with multiple series use one color for each series.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Point',
        p_return_value  => 'P',
        p_help_text     => q'~Different colors are applied to each datapoint in a single series.~' );
    --
    l_property_id := 548;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HATCH_PATTERN',
        p_prompt             => 'Hatch Pattern',
        p_property_type      => 'YES NO',
        p_db_column          => 'HATCH_PATTERN',
        p_display_group_name => 'SERIES_COLOR',
        p_help_text          => q'~Specify whether to apply a pre-built hatch pattern for your chart. Charts with a single series use a different pattern for each datapoint.~' );
    --
    l_property_id := 549;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_COLORS',
        p_prompt             => 'Custom',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'CUSTOM_COLORS',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~
<dl>
  <dt>Comma separated list of colors using HEX notation</dt>
    <dd><pre>#005381,#0D813D,#BB8199</em></pre></dd>
  <dt>Colors stored in a page item</dt>
    <dd><pre>P1_COLORS</pre></dd>
</dl>
<p>Refer to the <a target="_blank" href="http://anychart.com/products/anychart/docs/users-guide/index.html">AnyChart Colors Table</a> for a full list of supported colors.</p>~',
        p_display_group_name => 'SERIES_COLOR',
        p_help_text          => q'~<p>Enter colors separated by commas, or an item in the application that holds a comma separated list of colors.
This set of custom colors is used to automatically change the defined chart colors, providing you select <strong>Custom</strong> for the Color Scheme.</p>
<p>The colors is specified using hexadecimal (hex) notation, RGB color codes, or HTML color names.</p>
<p>Hex notation is defined as #xxyyzz (a # followed by 3 double digit hex numbers), where xx, yy, and zz represent the two character hex values for red, green and blue respectively.
RGB codes are defined as RGB(xxx,xxx,xxx), where xxx is a number between 0 and 255 each representing the single 8-bit byte value for red, green, and blue respectively.</p>
<p>Search the internet for 'HTML Color Codes' to find the equivalent hex code or RGB code for the color you wish to utilize.</p>~' );
    --
    l_property_id := 550;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_ANIMATION',
        p_prompt             => 'Animation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ANIMATION',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select an animation to control the initial appearance of this chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Appear',
        p_return_value  => 'Appear',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Show',
        p_return_value  => 'show' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Left',
        p_return_value  => 'SideFromLeft',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Top',
        p_return_value  => 'SideFromTop' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Right',
        p_return_value  => 'SideFromRight',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Bottom',
        p_return_value  => 'SideFromBottom' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Left Top',
        p_return_value  => 'SideFromLeftTop' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Right Top',
        p_return_value  => 'SideFromRightTop' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Right Bottom',
        p_return_value  => 'SideFromRightBottom' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Left Bottom',
        p_return_value  => 'SideFromLeftBottom' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Left Center',
        p_return_value  => 'SideFromLeftCenter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Top Center',
        p_return_value  => 'SideFromTopCenter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Right Center',
        p_return_value  => 'SideFromRightCenter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide From Bottom Center',
        p_return_value  => 'SideFromBottomCenter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale X Center',
        p_return_value  => 'ScaleXCenter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale X Left',
        p_return_value  => 'ScaleXLeft' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale X Right',
        p_return_value  => 'ScaleXRight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale Y Center',
        p_return_value  => 'ScaleYCenter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale Y Top',
        p_return_value  => 'ScaleYTop' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale Y Bottom',
        p_return_value  => 'ScaleYBottom' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Center',
        p_return_value  => 'ScaleXYCenter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Left',
        p_return_value  => 'ScaleXYLeft' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Top',
        p_return_value  => 'ScaleXYTop' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Right',
        p_return_value  => 'ScaleXYRight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Bottom',
        p_return_value  => 'ScaleXYBottom' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Left Top',
        p_return_value  => 'ScaleXYLeftTop' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Right Top',
        p_return_value  => 'ScaleXYRightTop' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Right Bottom',
        p_return_value  => 'ScaleXYRightBottom' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scale XY Left Bottom',
        p_return_value  => 'ScaleXYLeftBottom' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside',
        p_return_value  => 'Outside' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 551;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MARKER',
        p_prompt             => 'Marker',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MARKER',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the marker design to display on the chart.
A marker is an object with a specified shape, size, and color used to identify values on your chart.
A selected marker is applied to the chart series items and also to the series item in the chart legend.</p>
<p>Selecting the <strong>Default</strong> option applies a unique marker to each series of a multi-series chart.
Markers can be applied to charts of type 2D Line, Scatter Marker, 2D Pie, 3D Pie, and 2D Doughnut.
For Column and Bar charts, the Series Type of a chart series query must be set to <strong>Line</strong> or <strong>Marker</strong>, in order to display markers on a chart.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'None',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default',
        p_return_value  => 'Default',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circle',
        p_return_value  => 'Circle',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Cross',
        p_return_value  => 'Cross' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Diamond',
        p_return_value  => 'Diamond' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Diagonal Cross',
        p_return_value  => 'DiagonalCross' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal Line',
        p_return_value  => 'HLine' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Star Style 4',
        p_return_value  => 'Star4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Star Style 5',
        p_return_value  => 'Star5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Star Style 6',
        p_return_value  => 'Star6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Star Style 7',
        p_return_value  => 'Star7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Star Style 10',
        p_return_value  => 'Star10' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Square',
        p_return_value  => 'Square',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Triangle Up',
        p_return_value  => 'TriangleUp' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Triangle Down',
        p_return_value  => 'TriangleDown' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical Line',
        p_return_value  => 'VLine' );
    --
    l_property_id := 552;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERIES_STYLE',
        p_prompt             => 'Style',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_STYLE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the series style for this chart. The visual appearance of the data elements on your chart is defined using certain styles.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default',
        p_return_value  => 'Default' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Aqua Dark',
        p_return_value  => 'AquaDark' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Aqua Light',
        p_return_value  => 'AquaLight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Silver',
        p_return_value  => 'Silver' );
    --
    store_bg_color_properties (
        p_display_group_name    => 'BACKGROUND_COLOR',
        p_property_id_type      => 553,
        p_property_id_color     => 554,
        p_property_id_fade_from => 555,
        p_property_id_fade_to   => 556,
        p_property_id_angle     => 557 );
    --
    --
    l_property_id := 559;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'X_AXIS_INVERTED',
        p_prompt             => 'Invert Scale',
        p_property_type      => 'YES NO',
        p_db_column          => 'X_AXIS_INVERTED',
        p_display_group_name => 'X_AXIS',
        p_help_text          => q'~Specify whether to display the X-Axis scale in an inverted mode.~' );
    --
    l_property_id := 562;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'X_AXIS_PREFIX',
        p_prompt             => 'Prefix',
        p_property_type      => 'TEXT',
        p_db_column          => 'X_AXIS_PREFIX',
        p_display_length     => 10,
        p_max_length         => 4000,
        p_display_group_name => 'X_AXIS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to display before X-Axis values. This text prefix appears before grid labels, value labels, and hint text. For example, you can enter a currency symbol as a prefix.~' );
    --
    l_property_id := 563;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'X_AXIS_POSTFIX',
        p_prompt             => 'Postfix',
        p_property_type      => 'TEXT',
        p_db_column          => 'X_AXIS_POSTFIX',
        p_display_length     => 10,
        p_max_length         => 4000,
        p_display_group_name => 'X_AXIS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to display after X-Axis values. This text postfix appears after grid labels, value labels, and hint text. For example, you can enter a percentage symbol as a postfix.~' );
    --
    l_property_id := 564;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'X_AXIS_MAJOR_INTERVAL',
        p_prompt             => 'Major Interval',
        p_property_type      => 'NUMBER',
        p_db_column          => 'X_AXIS_MAJOR_INTERVAL',
        p_display_length     => 3,
        p_min_value          => 0,
        p_display_group_name => 'X_AXIS',
        p_help_text          => q'~Enter the major scale step, used for the X-Axis labels, major tickmarks, and major grid on your chart. If not set, this value is calculated automatically. The value entered must be a positive number.~' );
    --
    l_property_id := 565;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'X_AXIS_MINOR_INTERVAL',
        p_prompt             => 'Minor Interval',
        p_property_type      => 'NUMBER',
        p_db_column          => 'X_AXIS_MINOR_INTERVAL',
        p_display_length     => 3,
        p_min_value          => 0,
        p_display_group_name => 'X_AXIS',
        p_help_text          => q'~Enter the minor scale step, used for the X-Axis labels, minor tickmarks, and  minor grid on your chart. If not set, this value is calculated automatically. The value entered must be a positive number.~' );
    --
    l_property_id := 566;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'X_AXIS_DECIMAL_PLACES',
        p_prompt             => 'Decimal Places',
        p_property_type      => 'INTEGER',
        p_db_column          => 'X_AXIS_DECIMAL_PLACES',
        p_display_length     => 3,
        p_min_value          => 0,
        p_display_group_name => 'X_AXIS',
        p_help_text          => q'~Enter the number of decimal places to use in X-Axis values.~' );
    --
    l_property_id := 567;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'X_AXIS_LABEL_ROTATION',
        p_prompt             => 'Label Rotation',
        p_property_type      => 'INTEGER',
        p_db_column          => 'X_AXIS_LABEL_ROTATION',
        p_display_length     => 4,
        p_min_value          => -360,
        p_max_value          => 360,
        p_unit               => c_unit_degrees,
        p_display_group_name => 'X_AXIS',
        p_help_text          => q'~<p>Enter the rotation, in degrees, for the X-Axis chart labels.
Positive values rotate the labels clockwise, whereas negative values rotate the labels counterclockwise.
The Font Face setting for labels does not apply to rotated text.</p>
<p>Note: Labels must contain only ASCII characters if they are to be rotated.</p>~' );
    --
    l_property_id := 568;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'X_AXIS_TITLE',
        p_prompt             => 'Title',
        p_property_type      => 'TEXT',
        p_db_column          => 'X_AXIS_TITLE',
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'X_AXIS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a title for the X-Axis. This title describes the labels along the X-Axis of your chart.~' );
    --
    l_property_id := 569;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_GRID_TYPE',
        p_prompt             => 'Show Grid',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CHART_GRID_TYPE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select on what axes to show the chart grids. Grids can greatly improve chart readability and aid in visually comparing different values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'X-Axis',
        p_return_value  => 'X' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Y-Axis',
        p_return_value  => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Both',
        p_return_value  => 'B' );
    --
    l_property_id := 570;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SCROLLBARS',
        p_prompt             => 'Show Scrollbars',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SHOW_SCROLLBARS',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select on which axes to include scroll bars.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'X-Axis',
        p_return_value  => 'H' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Y-Axis',
        p_return_value  => 'V' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Both',
        p_return_value  => 'B' );
    --
    l_property_id := 571;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_TITLE',
        p_prompt             => 'Title',
        p_property_type      => 'TEXT',
        p_db_column          => 'Y_AXIS_TITLE',
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'Y_AXIS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter a title for the Y-Axis. This title describes the labels along the Y-Axis of your chart.~' );
    --
    l_property_id := 572;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_MIN',
        p_prompt             => 'Minimum',
        p_property_type      => 'NUMBER',
        p_db_column          => 'Y_AXIS_MIN',
        p_display_length     => 3,
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Enter a value for the smallest data value you want to appear on the Y-Axis.~' );
    --
    l_property_id := 573;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_MAX',
        p_prompt             => 'Maximum',
        p_property_type      => 'NUMBER',
        p_db_column          => 'Y_AXIS_MAX',
        p_display_length     => 3,
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Enter a value for the highest data value you want to appear on the Y-Axis.~' );
    --
    l_property_id := 574;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTRA_Y_AXIS_MIN',
        p_prompt             => 'Extra Minimum',
        p_property_type      => 'NUMBER',
        p_db_column          => 'EXTRA_Y_AXIS_MIN',
        p_display_length     => 3,
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Enter a value for the smallest data value you want to appear on the extra Y-axis when multiple Y-axes are in use. This value is only be applied to the scale settings for the extra Y-axis.~' );
    --
    l_property_id := 575;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTRA_Y_AXIS_MAX',
        p_prompt             => 'Extra Maximum',
        p_property_type      => 'NUMBER',
        p_db_column          => 'EXTRA_Y_AXIS_MAX',
        p_display_length     => 3,
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Enter a value for the highest data value you want to appear on the extra Y-axis when multiple Y-axes are in use. This value is only be applied to the scale settings for the extra Y-axis.~' );
    --
    l_property_id := 576;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_PREFIX',
        p_prompt             => 'Prefix',
        p_property_type      => 'TEXT',
        p_db_column          => 'Y_AXIS_PREFIX',
        p_display_length     => 10,
        p_max_length         => 4000,
        p_display_group_name => 'Y_AXIS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to display before Y-Axis values. This text prefix appears before grid labels, value labels, and hint text. For example, you can enter a currency symbol as a prefix.~' );
    --
    l_property_id := 577;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_POSTFIX',
        p_prompt             => 'Postfix',
        p_property_type      => 'TEXT',
        p_db_column          => 'Y_AXIS_POSTFIX',
        p_display_length     => 10,
        p_max_length         => 4000,
        p_display_group_name => 'Y_AXIS',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to display after Y-Axis values. This text postfix appears after grid labels, value labels and hint text. For example, you can enter a percentage symbol as a postfix.~' );
    --
    l_property_id := 578;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_MAJOR_INTERVAL',
        p_prompt             => 'Major Interval',
        p_property_type      => 'NUMBER',
        p_db_column          => 'Y_AXIS_MAJOR_INTERVAL',
        p_display_length     => 3,
        p_min_value          => 0,
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Enter the major scale step, used for the Y-Axis labels, major tickmarks, and major grid on your chart. If not set, this value is calculated automatically. The value entered must be a positive number.~' );
    --
    l_property_id := 579;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_MINOR_INTERVAL',
        p_prompt             => 'Minor Interval',
        p_property_type      => 'NUMBER',
        p_db_column          => 'Y_AXIS_MINOR_INTERVAL',
        p_display_length     => 3,
        p_min_value          => 0,
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Enter the minor scale step, used for the Y-Axis labels, minor tickmarks and minor grid on your chart. If not set, this value is calculated automatically. The value entered must be a positive number.~' );
    --
    l_property_id := 580;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_DECIMAL_PLACES',
        p_prompt             => 'Decimal Places',
        p_property_type      => 'INTEGER',
        p_db_column          => 'Y_AXIS_DECIMAL_PLACES',
        p_display_length     => 3,
        p_min_value          => 0,
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Enter number of decimal places to use in Y-Axis values.~' );
    --
    l_property_id := 581;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_LABEL_ROTATION',
        p_prompt             => 'Label Rotation',
        p_property_type      => 'INTEGER',
        p_db_column          => 'Y_AXIS_LABEL_ROTATION',
        p_display_length     => 4,
        p_min_value          => -360,
        p_max_value          => 360,
        p_unit               => c_unit_degrees,
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~<p>Enter the amount of rotation, in degrees, for the Y-Axis chart labels.
Positive values rotate the labels clockwise, whereas negative values rotate the labels counter-clockwise.
The Font Face setting for labels does not apply to rotated text.</p>
<p>Note: Labels must contain only ASCII characters if they are to be rotated.</p>~' );
    --
    l_property_id := 582;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GAUGE_START_ANGLE',
        p_prompt             => 'Start Angle',
        p_property_type      => 'INTEGER',
        p_db_column          => 'GAUGE_START_ANGLE',
        p_display_length     => 3,
        p_min_value          => -360,
        p_max_value          => 360,
        p_unit               => c_unit_degrees,
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Enter the start angle in degrees for the gauge chart. Positive values indicate clockwise start angle. Negative values indicate counterclockwise start angle. You may draw your circular gauge at any angle you want and change its shape according to the chosen angle. The shape of your gauge depends on 3 things: <strong>Start Angle</strong>, <strong>Sweep Angle</strong>, and the type <strong>Frame</strong>.~' );
    --
    l_property_id := 583;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GAUGE_SWEEP_ANGLE',
        p_prompt             => 'Sweep Angle',
        p_property_type      => 'INTEGER',
        p_db_column          => 'GAUGE_SWEEP_ANGLE',
        p_display_length     => 3,
        p_min_value          => 0,
        p_max_value          => 360,
        p_unit               => c_unit_degrees,
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Enter the sweep angle in degrees for the gauge chart. The Sweep Angle is an actual angle of your circular gauge chart. Positive values indicate clockwise sweep angle.  Negative values indicate counterclockwise sweep angle. You may draw your circular gauge at any angle you want and change its shape according to the chosen angle. The shape of your gauge depends on 3 things: <strong>Start Angle</strong>, <strong>Sweep Angle</strong>, and the type <strong>Frame</strong>.~' );
    --
    l_property_id := 584;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GAUGE_MAJOR_INTERVAL',
        p_prompt             => 'Major Interval',
        p_property_type      => 'NUMBER',
        p_db_column          => 'GAUGE_MAJOR_INTERVAL',
        p_display_length     => 10,
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Enter the interval between major tickmarks on your gauge chart.  Major tickmarks are the small marks used to represent a point on an axis scale and they indicate major step of an axis scale.~' );
    --
    l_property_id := 585;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GAUGE_MINOR_INTERVAL',
        p_prompt             => 'Minor Interval',
        p_property_type      => 'NUMBER',
        p_db_column          => 'GAUGE_MINOR_INTERVAL',
        p_display_length     => 10,
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Enter the interval between minor tickmarks on your gauge chart.  Minor tickmarks are the small marks used to represent a point on an axis scale and they indicate minor step of an axis scale.~' );
    --
    l_property_id := 586;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_PREFIX',
        p_prompt             => 'Prefix',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE_PREFIX',
        p_display_length     => 10,
        p_max_length         => 4000,
        p_display_group_name => 'VALUE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to display before value labels. This text prefix displays before value labels and hint text.  For example, you can enter a currency symbol as a prefix.~' );
    --
    l_property_id := 587;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_POSTFIX',
        p_prompt             => 'Postfix',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE_POSTFIX',
        p_display_length     => 10,
        p_max_length         => 4000,
        p_display_group_name => 'VALUE',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to display after value labels. This text prefix displays after value labels and hint text.  For example, you can enter a percentage symbol as a postfix.~' );
    --
    l_property_id := 588;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_DECIMAL_PLACES',
        p_prompt             => 'Decimal Places',
        p_property_type      => 'INTEGER',
        p_db_column          => 'VALUE_DECIMAL_PLACES',
        p_display_length     => 3,
        p_min_value          => 0,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the number of decimal places to use in value labels.~' );
    --
    l_property_id := 589;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LABEL_ROTATION',
        p_prompt             => 'Rotation',
        p_property_type      => 'INTEGER',
        p_db_column          => 'LABEL_ROTATION',
        p_display_length     => 4,
        p_min_value          => -360,
        p_max_value          => 360,
        p_unit               => c_unit_degrees,
        p_display_group_name => 'LABEL',
        p_help_text          => q'~<p>Enter the amount of rotation in degrees for the chart labels.
Positive values rotate the labels clockwise. Negative values rotate the labels counterclockwise.
The Font Face setting for labels does not apply to rotated text.</p>
<p>Note: Labels must contain only ASCII characters if they are to be rotated.</p>~' );
    --
    l_property_id := 590;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GAUGE_LABEL_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GAUGE_LABEL_ALIGNMENT',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the alignment of the labels on your Gauge chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center',
        p_return_value  => 'Center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inside',
        p_return_value  => 'Inside' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside',
        p_return_value  => 'Outside' );
    --
    l_property_id := 591;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GAUGE_POINTER',
        p_prompt             => 'Pointer',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GAUGE_POINTER',
        p_display_group_name => 'GAUGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of pointer to apply to your Gauge chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Knob',
        p_return_value  => 'knob' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Marker',
        p_return_value  => 'marker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Needle',
        p_return_value  => 'needle' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Range Bar',
        p_return_value  => 'rangeBar' );
    --
    l_property_id := 592;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GAUGE_FRAME_TYPE',
        p_prompt             => 'Frame Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GAUGE_FRAME_TYPE',
        p_display_group_name => 'GAUGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the shape of the frame for your Circular gauge. A frame is required to adjust the borders of your gauge.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Auto',
        p_return_value  => 'Auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circular',
        p_return_value  => 'Circular' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rectangular',
        p_return_value  => 'Rectangular' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Auto Rectangular',
        p_return_value  => 'AutoRectangular' );
    --
    l_property_id := 593;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_LABEL_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LABEL_POSITION',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the labels on your chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inside',
        p_return_value  => 'Inside' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside',
        p_return_value  => 'Outside' );
    --
    store_gantt_marker_property (
        p_marker_group      => 'GANTT_ACTUAL',
        p_property_id_start => 594,
        p_property_id_end   => 595,
        p_property_id_shape => 596 );
    --
    store_gantt_marker_property (
        p_marker_group      => 'GANTT_PROGRESS',
        p_property_id_start => 597,
        p_property_id_end   => 598,
        p_property_id_shape => 599 );
    --
    store_gantt_marker_property (
        p_marker_group      => 'GANTT_BASELINE',
        p_property_id_start => 600,
        p_property_id_end   => 601,
        p_property_id_shape => 602 );
    --
    l_property_id := 603;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_SHOW_NAVIGATION_BAR',
        p_prompt             => 'Show Navigation Bar',
        p_property_type      => 'YES NO',
        p_db_column          => 'GANTT_SHOW_NAVIGATION_BAR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify whether the navigation bar is visible on your Gantt chart.~' );
    --
    l_property_id := 604;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_SHOW_DATAGRID',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'GANTT_SHOW_DATAGRID',
        p_display_group_name => 'DATAGRID',
        p_help_text          => q'~Specify whether the datagrid is visible to the left of your Gantt chart.~' );
    --
    l_property_id := 605;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_DATE_FORMAT',
        p_prompt             => 'Date Format',
        p_property_type      => 'COMBOBOX',
        p_db_column          => 'GANTT_DATE_FORMAT',
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'CHART_FORMAT_MASKS',
        p_help_text          => q'~Select the date format to be used in the Gantt chart.
If no value is specified, the default date format is derived from the Application Date Format.
If no Application Date Format is specified, the default date format is derived from the database session at runtime.
This date format is used to alter the dates displayed on a Gantt chart.
This value can be a literal string containing a valid AnyChart date format mask, such as <code>%MMMM</code>.~' );
    --
    l_property_id := 606;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_INCLUDE_ON_DATAGRID',
        p_prompt             => 'Include',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'GANTT_INCLUDE_ON_DATAGRID',
        p_display_group_name => 'DATAGRID',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the options to display on the Datagrid of your Gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Id',
        p_return_value  => 'I',
        p_help_text     => q'~Display the task ID on the Datagrid.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Name',
        p_return_value  => 'N',
        p_help_text     => q'~Display the task name on the Datagrid.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start Date',
        p_return_value  => 'S',
        p_help_text     => q'~Display the Actual Start Date for the task on the Datagrid.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End Date',
        p_return_value  => 'E',
        p_help_text     => q'~Ddisplay the Actual End Date for the task on the Datagrid.~' );
    --
    l_property_id := 607;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_TIMELINE_HEIGHT',
        p_prompt             => 'Line Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'GANTT_TIMELINE_HEIGHT',
        p_display_length     => 4,
        p_max_length         => 4,
        p_min_value          => 0,
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Enter the height of the lines on your Gantt chart, in degrees.~' );
    --
    l_property_id := 608;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_ITEM_HEIGHT',
        p_prompt             => 'Item Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'GANTT_ITEM_HEIGHT',
        p_display_length     => 4,
        p_max_length         => 4,
        p_min_value          => 0,
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Enter the height of the Bar (task or period) on the plot of your Gantt chart, in degrees.~' );
    --
    l_property_id := 609;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_ITEM_PADDING',
        p_prompt             => 'Item Padding',
        p_property_type      => 'INTEGER',
        p_db_column          => 'GANTT_ITEM_PADDING',
        p_display_length     => 4,
        p_max_length         => 4,
        p_min_value          => 0,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Enter the Top bar padding, in pixels.~' );
    --
    l_property_id := 610;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_START_DATE_TYPE',
        p_prompt             => 'Start Date Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_START_DATE_TYPE',
        p_display_group_name => 'GANTT_TIMELINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of start date to display in this Gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Based on Item Value',
        p_return_value  => 'ITEM' );
    --
    l_property_id := 611;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_START_DATE',
        p_prompt             => 'Start Date Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'GANTT_START_DATE',
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Enter the start date value for this Gantt chart.
To focus the Timeline on the given part of the time scale, you can set what range displays at start up.
The Timeline Start Date must be a valid date prior to the Timeline End Date.~',
        p_comment_text       => q'~$$$ this should be of type date! Why would someone enter a fixed date? DJP - Dependent on the date format specified~' );
    --
    l_property_id := 612;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_START_DATE_ITEM',
        p_prompt             => 'Start Date Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'GANTT_START_DATE_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the page or application item holding the start date of the Timeline range to display at start up.~' );
    --
    l_property_id := 613;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_END_DATE_TYPE',
        p_prompt             => 'End Date Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_END_DATE_TYPE',
        p_display_group_name => 'GANTT_TIMELINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of end date to display in this Gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Based on Item Value',
        p_return_value  => 'ITEM' );
    --
    l_property_id := 614;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_END_DATE',
        p_prompt             => 'End Date Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'GANTT_END_DATE',
        p_display_length     => 30,
        p_max_length         => 4000,
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Enter the end date value to focus the Timeline on the given part of the time scale.
The Timeline End Date must be a valid date after the Timeline Start Date.~',
        p_comment_text       => q'~$$$ this should be of type date! Why would someone enter a fixed date?  DJP - Dependent on the date format specified~' );
    --
    l_property_id := 615;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GANTT_END_DATE_ITEM',
        p_prompt             => 'End Date Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'GANTT_END_DATE_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the page or application item holding the end date of the Timeline range to display at start up.~' );
    --
    l_property_id := 616;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_TOOLTIP',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_TOOLTIP',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display tooltips on your chart. Tooltips display when a user hovers the mouse over the chart's data.~' );
    --
    l_property_id := 617;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_VALUE',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_VALUE',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Specify whether to display values on your chart. Values are derived from your chart query and display next to your chart data.~' );
    --
    l_property_id := 618;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_LABEL',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_LABEL',
        p_display_group_name => 'LABEL',
        p_help_text          => q'~Specify whether to display labels on your chart. Labels are derived from your chart query and display along a chart axis.~' );
    --
    l_property_id := 619;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GROUP_BY_SERIES',
        p_prompt             => 'Group By Series',
        p_property_type      => 'YES NO',
        p_db_column          => 'GROUP_BY_SERIES',
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify whether to display data on your multi-series chart by grouping columns by series.
Data on a multi-series chart can be grouped in two different ways, either by column or by grouping columns by series.~' );
    --
    l_property_id := 620;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_MAJOR_TICKS',
        p_prompt             => 'Show Major Ticks',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_MAJOR_TICKS',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify whether the major tick marks display on the gauge chart.
Major tick marks are the small marks used to represent major steps of an axis scale.~' );
    --
    l_property_id := 621;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_MINOR_TICKS',
        p_prompt             => 'Show Minor Ticks',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_MINOR_TICKS',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify if minor tick marks display on the gauge chart.
Minor tick marks are the small marks used to represent minor steps of an axis scale.~' );
    --
    l_property_id := 622;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_TICK_LABELS',
        p_prompt             => 'Show Tick Labels',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_TICK_LABELS',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify whether labels display in conjunction with the tick marks.~' );
    --
    l_property_id := 623;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_INVERTED',
        p_prompt             => 'Invert Scale',
        p_property_type      => 'YES NO',
        p_db_column          => 'Y_AXIS_INVERTED',
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Specify whether to display the Y-Axis scale in an inverted mode.~' );
    --
    l_property_id := 624;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SCALE_INVERTED',
        p_prompt             => 'Invert Scale',
        p_property_type      => 'YES NO',
        p_db_column          => 'SCALE_INVERTED',
        p_display_group_name => 'GAUGE',
        p_help_text          => q'~Specify whether to display the scale of a Gauge chart in an inverted mode.~' );
    --
    l_property_id := 625;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_OVERLAY',
        p_prompt             => 'Overlay',
        p_property_type      => 'YES NO',
        p_db_column          => 'Y_AXIS_OVERLAY',
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Specify whether to display the Y-Axis scale in an overlay mode, where bars are shown one over another.~' );
    --
    l_property_id := 626;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_OVERLAY_SORTED',
        p_prompt             => 'Sorted Overlay',
        p_property_type      => 'YES NO',
        p_db_column          => 'Y_AXIS_OVERLAY_SORTED',
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Specify whether to display the Y-Axis scale in a sorted overlay mode. In sorted overlay mode, the series is sorted and displayed with lower values in front of higher values.~' );
    --
    l_property_id := 627;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SMART_AXIS_CALCULATION',
        p_prompt             => 'Smart Auto Calculation Mode',
        p_property_type      => 'YES NO',
        p_db_column          => 'SMART_AXIS_CALCULATION',
        p_display_group_name => 'SETTINGS',
        p_help_text          => q'~Specify whether to apply a smart auto calculation mode to the axis scale.
Smart mode takes into account the number of decimal digits and also avoids issues where duplicate items appear on the axis scale.~' );
    --
    l_property_id := 628;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'Y_AXIS_MULTIPLE',
        p_prompt             => 'Extra Axis',
        p_property_type      => 'YES NO',
        p_db_column          => 'Y_AXIS_MULTIPLE',
        p_display_group_name => 'Y_AXIS',
        p_help_text          => q'~Specify whether to display an extra Y-Axis on your chart.
The extra Y-Axis is positioned opposite to the existing Y-Axis on the chart.~' );
    --
    l_property_id := 629;
    store_property (
        p_id                 => l_property_id,
        p_name               => '3D_MODE_HTML',
        p_prompt             => '3D Mode',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_3D_MODE',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify whether 3D mode is enabled for this chart.~' );
    --
    l_property_id := 630;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUES_ROTATION',
        p_prompt             => 'Rotation',
        p_property_type      => 'INTEGER',
        p_db_column          => 'VALUES_ROTATION',
        p_display_length     => 4,
        p_min_value          => -360,
        p_max_value          => 360,
        p_unit               => c_unit_degrees,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~<p>Enter the amount of rotation, in degrees, for the chart value labels.
Positive values rotate the labels clockwise. Negative values rotate the labels counterclockwise.
The Font Face setting for labels does not apply to rotated text.</p>
<p>Note: Labels must contain only ASCII characters if they are to be rotated.</p>~' );
    --
    l_property_id := 631;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CALENDAR_TEMPLATE',
        p_prompt                   => 'Template',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'TEMPLATE_ID',
        p_display_group_name       => 'APPEARANCE',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_calendar_template,
        p_lov_component_type_scope => 'THEME',
        p_help_text                => q'~Select a template to use when the calendar is rendered.~' );
    --
    l_property_id := 632;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATE_COLUMN',
        p_prompt             => 'Date Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'DATE_COLUMN',
        p_column_data_types  => 'DATE',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Select the column from the table or query that contains the dates to be placed on the calendar.~' );
    --
    l_property_id := 633;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATE_FORMAT',
        p_prompt             => 'Show Time',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_TIME_WITH_DATE',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Specify if you want to show time or only date values on your calendar.~' );
    --
    l_property_id := 634;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_DATE_ITEM',
        p_prompt             => 'Start Date',
        p_property_type      => 'ITEM',
        p_db_column          => 'DATE_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'CALENDAR_STATE_ITEMS',
        p_help_text          => q'~Select the page or application item that holds the start date of the calendar which is currently displayed to the end user.
This item is used by the &PRODUCT_NAME. engine when the end user selects to navigate to the previous or next period.~' );
    --
    l_property_id := 635;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_END_DATE_ITEM',
        p_prompt             => 'End Date',
        p_property_type      => 'ITEM',
        p_db_column          => 'END_DATE_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'CALENDAR_STATE_ITEMS',
        p_help_text          => q'~Select the page or application item that holds the end date of the calendar which is currently displayed to the end user.
This item is used by the &PRODUCT_NAME. engine when the end user selects to navigate to the previous or next period.~' );
    --
    l_property_id := 636;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_TYPE_ITEM',
        p_prompt             => 'Type',
        p_property_type      => 'ITEM',
        p_db_column          => 'DATE_TYPE_COLUMN',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'CALENDAR_STATE_ITEMS',
        p_help_text          => q'~Select the page or application item that holds the calendar type which is currently displayed to the end user.~' );
    --
    l_property_id := 637;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_DISPLAY_TYPE',
        p_prompt             => 'Display Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DISPLAY_TYPE',
        p_display_group_name => 'ENTRY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the values displayed on the calendar.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Column',
        p_return_value  => 'COL',
        p_help_text     => q'~Uses the <strong>Display Column</strong> attribute to select the column to display in the calendar cell.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'CUS',
        p_help_text     => q'~Enables you to enter a custom column format using HTML expressions and supported substitution strings.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Display Value',
        p_return_value  => 'NONE',
        p_help_text     => q'~No data is displayed in the calendar cells.~' );
    --
    l_property_id := 638;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DISPLAY_COLUMN',
        p_prompt             => 'Display Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'DISPLAY_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Select the single column to display in the calendar cells.~' );
    --
    l_property_id := 639;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRIMARY_KEY_COLUMN',
        p_prompt             => 'Primary Key Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'PRIMARY_KEY_COLUMN',
        p_column_data_types  => 'VARCHAR2:ROWID',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Select the column which holds the primary key for the table.~',
        p_comment_text       => q'~$$$ DJP - Carsten, I asked Patrick M. to remove this attribute~' );
    --
    l_property_id := 640;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CALENDAR_CUSTOM_FORMAT',
        p_prompt             => 'Custom Display Format',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'ITEM_FORMAT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<dl>
<dt>Display column values</dt>
<dd><pre>
#FIRST_NAME# <strong>#LAST_NAME#</strong>
</pre></dd>
<dt>Display an image in a calendar event.</dt>
<dd><pre>
&lt;img src="#IMAGE_NAME#"&gt;
</pre></dd>
</dl>~',
        p_display_group_name => 'ENTRY',
        p_help_text          => q'~Enter custom text to display in calendar cells. You can enter HTML expressions and use <code>#COLUMN_NAME#</code> syntax to show column values. This display type enables you to enter multiple columns in the display.~' );
    --
    l_property_id := 641;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BEGIN_AT_START_OF_INTERVAL',
        p_prompt             => 'Begin at Start of Interval',
        p_property_type      => 'YES NO',
        p_db_column          => 'BEGIN_AT_START_OF_INTERVAL',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Specify when the calendar starts. Selecting this option creates a calendar that spans an entire interval such as a month.</p>
<ul>
  <li>If <strong>Begin at start of interval</strong> is selected, the date is June 15th, and the display is monthly, the resulting calendar spans from June 1st to June 30th.</li>
  <li>If <strong>Begin at start of interval</strong> is not selected, the date is June 15th, and the display is monthly, the resulting calendar spans from June 15th to June 30th.</li>
</ul>~' );
    --
    store_cal_weekday_property (
        p_property_id        => 642,
        p_name               => 'START_OF_WEEK_FOR_MONTHLY_CALENDAR',
        p_prompt             => 'Start Day',
        p_db_column          => 'START_OF_WEEK',
        p_display_group_name => 'MONTHLY_CALENDAR',
        p_help_text          => q'~Determines the day of the week on which the monthly calendar starts.~' );
    --
    store_cal_weekday_property (
        p_property_id        => 643,
        p_name               => 'START_DAY_FOR_WEEKLY_CALENDAR',
        p_prompt             => 'Start Day',
        p_db_column          => 'WEEK_START_DAY',
        p_display_group_name => 'WEEKLY_CALENDAR',
        p_help_text          => q'~Select the first day of the week displayed on the weekly calendar.
You can use this attribute in conjunction with <strong>End Day</strong> to restrict the days of the week displayed, or simply specify the first day of the week displayed.~' );
    --
    store_cal_weekday_property (
        p_property_id        => 644,
        p_name               => 'END_DAY_FOR_WEEKLY_CALENDAR',
        p_prompt             => 'End Day',
        p_db_column          => 'WEEK_END_DAY',
        p_display_group_name => 'WEEKLY_CALENDAR',
        p_help_text          => q'~Select the last day of the week displayed on the weekly calendar.
You can use this attribute in conjunction with <strong>Start Day</strong> to restrict the days of the week displayed, or select the day before the <strong>Start Day</strong> value to show all seven days.~' );
    --
    l_property_id := 645;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TIME_FORMAT',
        p_prompt             => 'Time Format',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TIME_FORMAT',
        p_display_group_name => 'ENTRY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to display the time format.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '12 Hour',
        p_return_value  => '12HOUR' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => '24 Hour',
        p_return_value  => '24HOUR' );
    --
    l_property_id := 646;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'START_TIME',
        p_prompt             => 'Start Hour',
        p_property_type      => 'INTEGER',
        p_db_column          => 'START_TIME',
        p_display_length     => 2,
        p_min_value          => 0,
        p_max_value          => 23,
        p_display_group_name => 'DAILY_WEEKLY_CALENDAR',
        p_help_text          => q'~Enter the start hour to focus the display of the weekly and daily calendar.~' );
    --
    l_property_id := 647;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'END_TIME',
        p_prompt             => 'End Hour',
        p_property_type      => 'INTEGER',
        p_db_column          => 'END_TIME',
        p_display_length     => 2,
        p_min_value          => 0,
        p_max_value          => 23,
        p_display_group_name => 'DAILY_WEEKLY_CALENDAR',
        p_help_text          => q'~Enter the end hour to focus the display of the weekly and daily calendar.~' );
    --
    l_property_id := 648;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_BACKGROUND_COLOR',
        p_prompt             => 'Data Background',
        p_property_type      => 'COLOR',
        p_db_column          => 'DATA_BACKGROUND_COLOR',
        p_display_length     => 7,
        p_max_length         => 30,
        p_display_group_name => 'COLORS',
        p_help_text          => q'~<p>Enter the color used for the background of the data displayed in this calendar.</p>~' );
    --
    l_property_id := 649;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_TEXT_COLOR',
        p_prompt             => 'Data Text',
        p_property_type      => 'COLOR',
        p_db_column          => 'DATA_TEXT_COLOR',
        p_display_length     => 7,
        p_max_length         => 30,
        p_display_group_name => 'COLORS',
        p_help_text          => q'~<p>Enter the color used for the data in this calendar.</p>~' );
    --
    l_property_id := 651;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_VIEW_DAYS_DISPLAY',
        p_prompt             => 'Display',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AGENDA_CAL_DAYS_TYPE',
        p_display_group_name => 'LIST_VIEW_CALENDAR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the days to display for the List View.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Month',
        p_return_value  => 'MONTH',
        p_help_text     => q'~Display the calendar entries for the current month.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Current Year',
        p_return_value  => 'YEAR',
        p_help_text     => q'~Display the calendar entries for the current year.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'CUSTOM',
        p_help_text     => q'~Display the calendar entries based on the number of days you enter.~' );
    --
    l_property_id := 652;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LIST_VIEW_CUSTOM_DAYS',
        p_prompt             => 'Number of Days',
        p_property_type      => 'INTEGER',
        p_db_column          => 'AGENDA_CAL_DAYS',
        p_display_length     => 3,
        p_max_length         => 3,
        p_min_value          => 1,
        p_unit               => c_unit_days,
        p_display_group_name => 'LIST_VIEW_CALENDAR',
        p_help_text          => q'~Enter the total number of days to display in the Agenda View.~',
        p_comment_text       => q'~$$$ DJP - Carsten, asked for clarification on how used from Patrick M.~' );
    --
    l_property_id := 653;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OPEN_LINK_IN',
        p_prompt             => 'Open Link in',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ITEM_LINK_OPEN_IN',
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify if the page or URL replaces the current page or opens in a dialog.~',
        p_comment_text       => q'~$$$ DJP - Carsten, I asked Patrick M. to remove this attribute as derived from Target Page Mode not specified here.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Same Window',
        p_return_value  => 'W' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dialog',
        p_return_value  => 'P' );
    --
    l_property_id := 654;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENTRY_LINK_TARGET',
        p_prompt             => 'Event Target',
        p_property_type      => 'LINK',
        p_db_column          => 'ITEM_LINK',
        p_display_group_name => 'LINK',
        p_help_text          => q'~Click Target to invoke a modal dialog. You can enter the target link the calendar calls to view the details of an existing event.~' );
    --
    l_property_id := 657;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DAY_LINK_TARGET',
        p_prompt             => 'Create Target',
        p_property_type      => 'LINK',
        p_db_column          => 'DAY_LINK',
        p_display_group_name => 'LINK',
        p_help_text          => q'~Click Target to invoke a modal dialog. You can enter the target link the calendar calls when creating an event by clicking on a calendar cell outside of an existing event.~' );
    --
    l_property_id := 658;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'DRAG_DROP_PROCESS',
        p_prompt                   => 'PL/SQL Process',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'DRAG_DROP_PROCESS_ID',
        p_examples                 => q'~<dl>
<dt>Custom process</dt>
<dd><pre>
declare
    l_date_value        varchar2(32767) := apex_application.g_x01;
    l_primary_key_value varchar2(32767) := apex_application.g_x02;
begin
    update emp
       set hiredate = to_date(l_date_value, 'YYYYMMDD HH24MISS')
     where rowid    = l_primary_key_value;
end;
</pre></dd>
</dl>~',
        p_display_group_name       => 'DRAG_AND_DROP',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_page_process,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~Define the PL/SQL process to be executed when a Calendar entry is dragged and dropped.~',
        p_comment_text             =>q'~$$$ ??? DJP - Carsten does the PL/SQL use apex_application.g_x01 etc for getting calendar values~' );
    --
    l_property_id := 659;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DRAG_AND_DROP_AUTHORIZATION_SCHEME',
        p_prompt                => 'Authorization Scheme',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'DRAG_DROP_REQUIRED_ROLE',
        p_display_group_name    => 'DRAG_AND_DROP',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to limit who has rights to update existiing claendar events using drag and drop.
If specified, this authorization scheme must evaluate to TRUE in order for the drag and drop to be processed.~' );
    --
    l_property_id := 660;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DIALOG_CSS_CLASSES',
        p_prompt                => 'CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'DIALOG_CSS_CLASSES',
        p_display_length        => 100,
        p_max_length            => 255,
        p_display_group_name    => 'DIALOG',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text          => '$$$ we should only show this property if the template supports the #DIALOG_CSS_CLASSES# placeholder' );
    --
    l_property_id := 661;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ZOOM_PANEL',
        p_prompt             => 'Zoom Panel',
        p_property_type      => 'YES NO',
        p_db_column          => 'ZOOM_PANEL',
        p_display_group_name => 'CONTROLS',
        p_help_text          => q'~Specify whether or not a zoom panel displays on this map.~' );
    --
    l_property_id := 662;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'NAVIGATION_PANEL',
        p_prompt             => 'Navigation Panel',
        p_property_type      => 'YES NO',
        p_db_column          => 'NAVIGATION_PANEL',
        p_display_group_name => 'CONTROLS',
        p_help_text          => q'~Specify whether or not a navigation panel displays on this map.~' );
    --
    l_property_id := 663;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LEGEND_ITEM_SOURCE',
        p_prompt             => 'Legend Item Source',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LEGEND_ITEM_SOURCE',
        p_display_group_name => 'LEGEND',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source for the map legend elements.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Series',
        p_return_value  => 'Series',
        p_help_text     => q'~Use series when the legend is required to display ranges rather than specific data for each section.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Points',
        p_return_value  => 'Points',
        p_help_text     => q'~Use points to include specific data within the map legend.~' );
    --
    l_property_id := 664;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNDEFINED_MAP_SET_COLORS',
        p_prompt             => 'Set',
        p_property_type      => 'YES NO',
        p_db_column          => 'SET_UNDEF_COLORS',
        p_display_group_name => 'UNDEFINED_MAP_REGION_COLOR',
        p_help_text          => q'~Specify whether to apply a color scheme to the undefined map regions.
The undefined map regions are those with no corresponding data points in a series on your map.~' );
    --
    l_property_id := 665;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNDEFINED_MAP_COLOR_SCHEME',
        p_prompt             => 'Scheme',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MAP_UNDEF_COLOR_SCHEME',
        p_display_group_name => 'UNDEFINED_MAP_REGION_COLOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a pre-built color scheme for your map.
Maps with a single series use one color for each datapoint, while maps with multiple series use one color for each series.
Look 7 uses the AnyChart default palette of colors, applying a different color to each datapoint in a single series.
If you wish to define your own color schemes, you can select <strong>Custom</strong> and define your own set of colors in Custom Colors.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 1',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 2',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 3',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 4',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 5',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 6',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 7',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => '0' );
    --
    l_property_id := 666;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'UNDEFINED_MAP_CUSTOM_COLORS',
        p_prompt             => 'Custom',
        p_property_type      => 'TEXTAREA',
        p_db_column          => 'MAP_UNDEF_CUSTOM_COLORS',
        p_display_length     => 40,
        p_max_length         => 32767,
        p_examples           => q'~
<dl>
  <dt>Comma separated list of colors using HEX notation</dt>
    <dd><pre>#005381,#0D813D,#BB8199</em></pre></dd>
  <dt>Colors stored in a page item</dt>
    <dd><pre>P1_COLORS</pre></dd>
</dl>
<p>Refer to the <a target="_blank" href="http://anychart.com/products/anychart/docs/users-guide/index.html">AnyChart Colors Table</a> for a full list of supported colors.</p>~',
        p_display_group_name => 'UNDEFINED_MAP_REGION_COLOR',
        p_help_text          => q'~<p>Enter colors separated by commas, or an uppercase page or application item, that holds a comma separated list of colors.
This set of custom colors is used to change undefined map region colors automatically, providing you selected <strong>Custom</strong> for the Color Scheme.</p>
<p>The colors is specified using hexadecimal (hex) notation, RGB color codes, or HTML color names.</p>
<p>Hex notation is defined as #xxyyzz (a # followed by 3 double digit hex numbers), where xx, yy, and zz represent the two character hex values for red, green and blue respectively.
RGB codes are defined as RGB(xxx,xxx,xxx), where xxx is a number between 0 and 255 each representing the single 8-bit byte value for red, green, and blue respectively.</p>
<p>Search the internet for 'HTML Color Codes' to find the equivalent hex code or RGB code for the color you wish to utilize.</p>~' );
    --
    l_property_id := 667;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_GRID_TYPE',
        p_prompt             => 'Show Grid',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CHART_GRID_TYPE',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of grid and grid lines to display on your map.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N',
        p_help_text     => q'~Display no grid on the map.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Lines',
        p_return_value  => 'G',
        p_help_text     => q'~Display the grid without any longitude or latitude lines on the map.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Longitude',
        p_return_value  => 'X',
        p_help_text     => q'~Display the longitude lines on the map.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Latitude',
        p_return_value  => 'Y',
        p_help_text     => q'~Display the latitude lines on the map.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Both',
        p_return_value  => 'B',
        p_help_text     => q'~Display the both longitude and latitude lines on the map.~' );
    --
    l_property_id := 668;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_PROJECTION',
        p_prompt             => 'Map Projection',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MAP_PROJECTION',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the map projection type. A map projection is any method used in cartography to represent the two-dimensional curved surface of the earth or other body on a plane.
The term <em>projection</em> refers to any function defined on the earth's surface and with values on the plane, and not necessarily a geometric projection.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bonne',
        p_return_value  => 'Bonne',
        p_help_text     => q'~A Bonne projection is a pseudoconical equal-area map projection.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Eckert 1',
        p_return_value  => 'Eckert1',
        p_help_text     => q'~Pseudocylindrical, neither conformal or equal-area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Eckert 3',
        p_return_value  => 'Eckert3',
        p_help_text     => q'~Pseudocylindrical, neither conformal or equal-area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Equirectangular',
        p_return_value  => 'Equirectangular',
        p_help_text     => q'~The equirectangular projection is a very simple map projection. The projection maps meridians to equally spaced vertical straight lines, and parallels to equally spaced horizontal straight lines.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fahey',
        p_return_value  => 'Fahey',
        p_help_text     => q'~Fahey Modified Gall, pseudocylindrical, neither conformal or equal-area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hammer-Aitoff',
        p_return_value  => 'HammerAitoff',
        p_help_text     => q'~Hammer-Aitoff projection produces an equal area map of the entire globe, it is useful for visual representations of geographically related statistical data and distributions.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Mercator',
        p_return_value  => 'Mercator',
        p_help_text     => q'~The Mercator projection is a cylindrical map projection. It became the standard map projection for nautical purposes because of its ability to represent lines of constant true bearing or true course, known as rhumb lines, as straight line segments. While the direction and shapes are accurate on a Mercator projection, it distorts the size.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Orthographic',
        p_return_value  => 'Orthographic',
        p_help_text     => q'~Orthographic projection is a perspective (or azimuthal) projection, in which the sphere is projected onto a tangent plane or secant plane. The point of perspective for the Orthographic projection is at infinite distance.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Robinson',
        p_return_value  => 'Robinson',
        p_help_text     => q'~A pseudocylindrical projection by reason of its straight parallels, along each of which the meridians are spaced evenly.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Wagner3',
        p_return_value  => 'Wagner3',
        p_help_text     => q'~A pseudocylindrical projection, neither conformal or equal-area.~' );
    --
    l_property_id := 669;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_DISPLAY_MODE',
        p_prompt             => 'Display Mode',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_DISPLAY_MODE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the display mode for map region values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always',
        p_return_value  => 'Always' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Non-Overlap',
        p_return_value  => 'NonOverlap' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Bounds',
        p_return_value  => 'RegionBounds' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Bounds Non-Overlap',
        p_return_value  => 'RegionBoundsNonOverlap' );
    --
    l_property_id := 670;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFINED_MAP_COLOR_SCHEME',
        p_prompt             => 'Scheme',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLOR_SCHEME',
        p_display_group_name => 'DEFINED_MAP_REGION_COLOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a pre-built color scheme for this map. Maps with a single series use one color for each data point, while maps with multiple series use one color for each series. Look 7 uses the AnyChart default palette of colors, applying a different color to each data point in a single series. If you wish to define your own color schemes, you can select <strong>Custom</strong> and define your own set of colors in Custom Colors.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 1',
        p_return_value  => '1' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 2',
        p_return_value  => '2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 3',
        p_return_value  => '3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 4',
        p_return_value  => '4' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 5',
        p_return_value  => '5' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 6',
        p_return_value  => '6' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Look 7',
        p_return_value  => '7' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => '0' );
    --
    l_property_id := 685;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_COLOR_LEVEL',
        p_prompt             => 'Level',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'COLOR_LEVEL',
        p_display_group_name => 'DEFINED_MAP_REGION_COLOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the color scheme level for the regions of this map.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Series',
        p_return_value  => 'S',
        p_help_text     => q'~Maps with a single series use one color for each datapoint, while maps with multiple series use one color for each series.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Point',
        p_return_value  => 'P',
        p_help_text     => q'~Different colors are applied to each datapoint in a single series.~' );
    --
    l_property_id := 686;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFINED_MAP_CUSTOM_COLORS',
        p_prompt             => 'Custom',
        p_property_type      => 'TEXTAREA',
        p_db_column          => 'CUSTOM_COLORS',
        p_display_length     => 40,
        p_max_length         => 32767,
        p_examples           => q'~
<dl>
  <dt>Comma separated list of colors using HEX notation</dt>
    <dd><pre>#005381,#0D813D,#BB8199</em></pre></dd>
  <dt>Colors stored in a page item</dt>
    <dd><pre>P1_COLORS</pre></dd>
</dl>
<p>Refer to the <a target="_blank" href="http://anychart.com/products/anychart/docs/users-guide/index.html">AnyChart Colors Table</a> for a full list of supported colors.</p>~',
        p_display_group_name => 'DEFINED_MAP_REGION_COLOR',
        p_help_text          => q'~<p>Enter colors separated by commas, or an item in the application that holds a comma separated list of colors.
This set of custom colors is used to automatically change the defined map region colors, providing you select <strong>Custom</strong> for the Color Scheme.</p>
<p>The colors is specified using hexadecimal (hex) notation, RGB color codes, or HTML color names.</p>
<p>Hex notation is defined as #xxyyzz (a # followed by 3 double digit hex numbers), where xx, yy, and zz represent the two character hex values for red, green and blue respectively.
RGB codes are defined as RGB(xxx,xxx,xxx), where xxx is a number between 0 and 255 each representing the single 8-bit byte value for red, green, and blue respectively.</p>
<p>Search the internet for 'HTML Color Codes' to find the equivalent hex code or RGB code for the color you wish to utilize.</p>~' );
    --
    store_bg_color_properties (
        p_name_prefix           => 'GRID',
        p_display_group_name    => 'MAP_GRID_REGION_COLOR',
        p_property_id_type      => 689,
        p_property_id_color     => 690,
        p_property_id_fade_from => 691,
        p_property_id_fade_to   => 692,
        p_property_id_angle     => 693 );
    --
    l_property_id := 694;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLAIN_LOV_IR_COLUMN_FILTER_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RPT_SHOW_FILTER_LOV',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to derive the list of values for the filter on the report column drop down list.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'N',
        p_help_text     => q'~Disable filter on list of values.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Default Based on Column Type',
        p_return_value  => 'D',
        p_help_text     => q'~STRING and NUMBER columns derive the list of values from distinct column values. DATE columns derive the list of values from predefined date ranges.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Defined List of Values to Filter Exact Match',
        p_return_value  => 'S',
        p_help_text     => q'~Derive the list of values from a defined list of values SQL query to create an equal filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Defined List of Values to Filter Word Contains',
        p_return_value  => 'C',
        p_help_text     => q'~Derive the list of values from a defined list of values SQL query to create a contains filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Named List of Values to Filter Exact Match',
        p_return_value  => '1',
        p_help_text     => q'~Derive the list of values from the named list of values to create an equal filter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use Named List of Values to Filter Word Contains',
        p_return_value  => '2',
        p_help_text     => q'~Derive the list of values from the named list of values to create a contains filter.~' );
    --
    l_property_id := 695;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'IR_COLUMN_FILTER_NAMED_LOV',
        p_prompt                => 'Named LOV',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'RPT_NAMED_LOV',
        p_display_group_name    => 'COLUMN_FILTER',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_lov,
        p_help_text             => q'~Select a defined named list of values. The column filter only uses the first column of the dynamic list of values query or the display value of the static list of values to filter the report data.~' );
    --
    l_property_id := 696;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'PLAIN_LOV_IR_COLUMN_FILTER_LOV_SQL',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'RPT_LOV',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'COLUMN_FILTER',
        p_help_text            => q'~Enter a SQL query to be used in place of a automatically generated query that selects the distinct column values. The SQL query needs to return one column. Entering a SQL query can improve performance in some reports.  This list of values displays when a user clicks on a column header.~' );
    --
    l_property_id := 697;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_RESPONSE_HEADER',
        p_prompt             => 'Response Header',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_DOCUMENT_HEADER',
        p_display_group_name => 'OUTPUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select what information the server sends back to the browser in response to receiving an HTTP request.
The response header contains the date, size and type of file that the server is sending back to the client and also data about the server itself.</p>
<p>The response header can be generated by &PRODUCT_NAME. based on your <strong>custom</strong> settings or passed through from the <strong>print server</strong>.
If you want to specify file name and content disposition, the response header must be based on your custom settings.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'APEX' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Print Server',
        p_return_value  => 'SERVER' );
    --
    l_property_id := 698;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_VIEW_FILE_AS',
        p_prompt             => 'View File As',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_CONTENT_DISPOSITION',
        p_display_group_name => 'OUTPUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the content-disposition for the print document. Content-disposition is an extension to the MIME protocol that instructs the browser on how the document displays. Selecting <strong>Attachment</strong> instructs the browser to save a file to disk instead of displaying it inline.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Attachment',
        p_return_value  => 'ATTACHMENT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inline',
        p_return_value  => 'INLINE' );
    --
    l_property_id := 699;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_SERVER_OVERWRITE',
        p_prompt             => 'Print Server Overwrite',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRN_PRINT_SERVER_OVERWRITE',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~Enter an alternative print server. A print server is typically configured centrally for all workspaces in the &PRODUCT_NAME. Administration Services application.
Configuring an alternative print server at the report level makes is easier to debug and diagnose potential printing problems and also enables for the use of specific custom built end points to perform custom XSLT transformations.~' );
    --
    l_property_id := 700;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_SIZE',
        p_prompt             => 'Size',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_PAPER_SIZE',
        p_display_group_name => 'PAGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the report page size. To type in your own page width and height, select <strong>Custom</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Letter',
        p_return_value  => 'LETTER',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Legal',
        p_return_value  => 'LEGAL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Tabloid',
        p_return_value  => 'TABLOID' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'A4',
        p_return_value  => 'A4',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'A3',
        p_return_value  => 'A3' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'CUSTOM' );
    --
    l_property_id := 701;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_ORIENTATION',
        p_prompt             => 'Orientation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_ORIENTATION',
        p_display_group_name => 'PAGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the orientation for the page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Portrait',
        p_return_value  => 'VERTICAL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Landscape',
        p_return_value  => 'HORIZONTAL' );
    --
    l_property_id := 702;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_UNITS',
        p_prompt             => 'Units',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_UNITS',
        p_display_group_name => 'PAGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the units used to specify page width and height.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inches',
        p_return_value  => 'INCHES' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Millimeters',
        p_return_value  => 'MILLIMETERS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Centimeters',
        p_return_value  => 'CENTIMETERS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Points',
        p_return_value  => 'POINTS' );
    --
    l_property_id := 703;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'NUMBER',
        p_db_column          => 'PRN_WIDTH',
        p_display_length     => 8,
        p_display_group_name => 'PAGE',
        p_help_text          => q'~Enter the width of this page.~' );
    --
    l_property_id := 704;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'NUMBER',
        p_db_column          => 'PRN_HEIGHT',
        p_display_length     => 8,
        p_display_group_name => 'PAGE',
        p_help_text          => q'~Enter the height of this page.~' );
    --
    l_property_id := 705;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_BORDER_WIDTH',
        p_prompt             => 'Border Width',
        p_property_type      => 'NUMBER',
        p_db_column          => 'PRN_BORDER_WIDTH',
        p_display_length     => 8,
        p_max_length         => 255,
        p_display_group_name => 'PAGE',
        p_help_text          => q'~Enter the width in pixels of the table borders.~',
        p_comment_text       => q'~$$$ is this really specified in pixels???? Not in the unit of the page?~' );
    --
    l_property_id := 706;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_BORDER_COLOR',
        p_prompt             => 'Border Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'PRN_BORDER_COLOR',
        p_display_group_name => 'PAGE',
        p_help_text          => q'~<p>Enter the color used to display the border for the specified attribute.</p>~' );
    --
    store_print_font_properties (
        p_font_group              => 'PRINT_PAGE_HEADER',
        p_display_group_name      => 'PAGE_HEADER',
        p_db_column_prefix        => 'PRN_PAGE_HEADER',
        p_property_id_font        => 707,
        p_property_id_font_weight => 708,
        p_property_id_font_size   => 709,
        p_property_id_font_color  => 710 );
    --
    l_property_id := 711;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_HEADER_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'PRN_PAGE_HEADER_ALIGNMENT',
        p_display_group_name => 'PAGE_HEADER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select an alignment for the page header.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'start',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'center',
        p_return_value  => 'CENTER',
        p_icon          => 'icon-align-center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'end',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 712;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_HEADER_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXTAREA',
        p_db_column          => 'PRN_PAGE_HEADER',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PAGE_HEADER',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to appear in the header section of the document. To show values of page or application items, use <code>&amp;ITEM_NAME.</code> syntax.~' );
    --
    store_print_font_properties (
        p_font_group                => 'PRINT_COLUMN_HEADING',
        p_display_group_name        => 'COLUMN_HEADINGS',
        p_db_column_prefix          => 'PRN_HEADER',
        p_property_id_font          => 713,
        p_property_id_font_weight   => 714,
        p_property_id_font_size     => 715,
        p_property_id_font_color    => 716,
        p_property_id_font_bg_color => 717 );
    --
    store_print_font_properties (
        p_font_group                => 'PRINT_COLUMN',
        p_display_group_name        => 'COLUMNS',
        p_db_column_prefix          => 'PRN_BODY',
        p_property_id_font          => 718,
        p_property_id_font_weight   => 719,
        p_property_id_font_size     => 720,
        p_property_id_font_color    => 721,
        p_property_id_font_bg_color => 722 );
    --
    store_print_font_properties (
        p_font_group                => 'PRINT_PAGE_FOOTER',
        p_display_group_name        => 'PAGE_FOOTER',
        p_db_column_prefix          => 'PRN_PAGE_FOOTER',
        p_property_id_font          => 723,
        p_property_id_font_weight   => 724,
        p_property_id_font_size     => 725,
        p_property_id_font_color    => 726 );
    --
    l_property_id := 727;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_FOOTER_ALIGNMENT',
        p_prompt             => 'Alignment',
        p_property_type      => 'PILL BUTTONS',
        p_db_column          => 'PRN_PAGE_FOOTER_ALIGNMENT',
        p_display_group_name => 'PAGE_FOOTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the alignment for the page footer.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'start',
        p_return_value  => 'LEFT',
        p_icon          => 'icon-align-start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'center',
        p_return_value  => 'CENTER',
        p_icon          => 'icon-align-center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'end',
        p_return_value  => 'RIGHT',
        p_icon          => 'icon-align-end' );
    --
    l_property_id := 728;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_PAGE_FOOTER_TEXT',
        p_prompt             => 'Text',
        p_property_type      => 'TEXTAREA',
        p_db_column          => 'PRN_PAGE_FOOTER',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'PAGE_FOOTER',
        p_is_translatable    => true,
        p_help_text          => q'~Enter text to appear in the footer section of the document. To show values of page or application items, use <code>&amp;ITEM_NAME.</code> syntax.~' );
    --
    l_property_id := 729;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_PRINTING',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'PRN_OUTPUT',
        p_display_group_name => 'PRINTING',
        p_help_text          => q'~Select whether to enable report printing. Selecting <strong>Yes</strong> enables users to download a report in a variety of formats, including PDF, Microsoft Word, Microsoft Excel and HTML.~' );
    --
    l_property_id := 730;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_LINK_TEXT',
        p_prompt             => 'Link Text',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRN_OUTPUT_LINK_TEXT',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'OUTPUT',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter the text for the download link. To replace the link with a different navigational component, such as a button, leave this field blank. You can set up the other component to start the printing process by using a URL with the following syntax as the target:</p>
<p><pre>f?p=&amp;APP_ID.:&amp;SESSION.:FLOW_XMLP_OUTPUT_R[REGION_ID]</pre></p>
<p><strong>Note</strong>: Replace  <code>[REGION_ID]</code> in the string above with your region ID.</p>~' );
    --
    l_property_id := 731;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_FILE_NAME',
        p_prompt             => 'File Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'PRN_OUTPUT_FILE_NAME',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'OUTPUT',
        p_help_text          => q'~Enter a name for the downloaded document. If you leave this blank, the region name is used as the file name.~' );
    --
    l_property_id := 732;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_OUTPUT_FORMAT',
        p_prompt             => 'Format',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_FORMAT',
        p_display_group_name => 'OUTPUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the report output format. You can also have the output format specified by an item.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PDF',
        p_return_value  => 'PDF',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Word',
        p_return_value  => 'RTF' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Excel',
        p_return_value  => 'XLS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTM',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XML',
        p_return_value  => 'XML' );
    --
    l_property_id := 733;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_OUTPUT_FORMAT_ITEM',
        p_prompt             => 'Format Item',
        p_property_type      => 'ITEM',
        p_db_column          => 'PRN_FORMAT_ITEM',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'OUTPUT',
        p_help_text          => q'~<p>Enter the page or application item that holds the format value. You can include a <em>Select List</em> page item for users to select the output format at runtime. Valid values are</p>
<dl>
<dt>PDF</dt>
<dd>Opens the document in a PDF Previewer</dd>
<dt>RTF</dt>
<dd>Opens the document in Microsoft Word</dd>
<dt>XLS</dt>
<dd>Opens the document in Microsoft Excel</dd>
<dt>HTM</dt>
<dd>Downloads the document as an HTML file</dd>
<dt>XML</dt>
<dd>Downloads the document as an XML file</dd>
</dl>~' );
    --
    l_property_id := 734;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'REPORT_LAYOUT',
        p_prompt                => 'Layout',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'PRN_TEMPLATE_ID',
        p_display_group_name    => 'OUTPUT',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_report_layout,
        p_help_text             => q'~Select the report layout to utilize when printing the report.~' );
    --
    l_property_id := 735;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PRINT_COLUMN_WIDTH_UNITS',
        p_prompt             => 'Width Units',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PRN_WIDTH_UNITS',
        p_display_group_name => 'COLUMNS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the units used to define the column width values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent',
        p_return_value  => 'PERCENTAGE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Point',
        p_return_value  => 'POINTS' );
    --
    l_property_id := 736;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REJOIN_EXISTING_SESSIONS',
        p_prompt             => 'Rejoin Sessions',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'REJOIN_EXISTING_SESSIONS',
        p_display_group_name => 'SECURITY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Use this attribute to control if &PRODUCT_NAME. should support application URLs that do not contain session IDs.
When rejoin sessions is enabled, &PRODUCT_NAME. will attempt to use the session cookie to join an existing session, when a URL does not contain a session ID.
</p>
<p>A more restrictive instance level setting overrides this page level value.
</p>
<p><em><strong>Note:</em></strong> Enabling rejoin sessions exposes your application to possible security breaches,
as it can enable attackers to take over existing end user sessions.
To learn more, see the <em>Rejoin Sessions</em> sections in "Managing Application Security" in the App Builder User's Guide.
</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'N',
        p_help_text     => q'~If the URL does not contain a session ID &PRODUCT_NAME. creates a new session.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled for Public Sessions',
        p_return_value  => 'P',
        p_help_text     => q'~If the URL goes to a public page and does not contain a session ID &PRODUCT_NAME. attempts to utilize the existing session cookie established for that application.
For applications with both public and authenticated pages, a session ID is defined after the end user authenticates.
&PRODUCT_NAME. only joins via the cookie when the session is not yet authenticated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled for All Sessions',
        p_return_value  => 'Y',
        p_help_text     => q'~<p>If the URL does not contain a session ID &PRODUCT_NAME. attempts to utilize the existing session cookie established for that application, providing the following conditions are met:</p>
<p><ul>
  <li>Session State Protection is enabled for the application and the URL includes a valid checksum.
    For public bookmarks, the most restrictive item level protection must be either <em>Unrestricted</em> or <em>Checksum Required - Application Level</em>.</li>
  <li>OR, the URL does not contain payload (a request parameter, clear cache or data value pairs).</li>
</ul></p>
<p>This setting also requires that <em>Embed In Frames</em> is set to <em>Allow from same origin</em> or to <em>Deny</em> for the application.</p>~' );
    --
    l_property_id := 737;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDDEN_REGION_TYPE',
        p_prompt             => 'Region Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'PLUG_SOURCE_TYPE',
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 738;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_VISIBLE',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_VISIBLE',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Specify whether this column is displayed or hidden. Even if hidden, columns can always be referenced using substitution syntax, <code>&amp;COLUMN_NAME.</code>.~' );
    --
    l_property_id := 739;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ICON_CSS_CLASSES',
        p_prompt                => 'Icon',
        p_property_type         => 'ICON',
        p_db_column             => 'ICON_CSS_CLASSES',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Show an arrow pointing right</dt>
<dd><pre>fa-chevron-right</pre></dd>
</dl>~',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a target="_blank" href="http://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>~',
        p_comment_text          => '$$$ CSS class names are depending on the theme. Different icon classes are supported. For new universal theme it is http://fontawesome.io/icons/ we should mention something in the help.' );
    --
    l_property_id := 740;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'APPEARANCE_CSS_CLASSES',
        p_prompt                => 'CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'CSS_CLASSES',
        p_display_length        => 50,
        p_max_length            => 255,
        p_examples              => q'~<dl>
<dt>Add the CSS classes <code>articlenumber</code> and <code>highlight</code> to the component</dt>
<dd><pre>articlenumber highlight</pre></dd>
</dl>~',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    l_property_id := 741;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'TEMPLATE_OPTIONS',
        p_prompt                => 'Template Options',
        p_property_type         => 'TEMPLATE OPTIONS',
        p_db_column             => 'TEMPLATE_OPTIONS',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'TEMPLATE_OPTIONS',
        p_help_text             => q'~<p>Select template options to customize the user interface of this component.</p>
<p>You can also modify the template options when running the application using <strong>Live Template Options</strong>. 
Live Template Options enables you to customize your application in real time, allowing you to preview and apply various options.
To access Live Template Options, run the application from Application Builder and click <em>Quick Edit</em> in the developer toolbar.
Hover over a page component, such as a region, and click the wrench icon ( <span class="a-Icon icon-util" aria-hidden="true"></span> ) displayed in the top left corner.</p>~' );
    --
    l_property_id := 742;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'TEMPLATE_OPTIONS2',
        p_prompt                => 'Template Options',
        p_property_type         => 'TEMPLATE OPTIONS',
        p_db_column             => 'TEMPLATE_OPTIONS',
        p_display_group_name    => 'APPEARANCE',
        p_lov_type              => 'TEMPLATE_OPTIONS',
        p_help_text             => q'~<p>Select template options to customize the user interface of this component.</p>
<p>You can also modify the template options when running the application using <strong>Live Template Options</strong>. 
Live Template Options enables you to customize your application in real time, allowing you to preview and apply various options.
To access Live Template Options, run the application from Application Builder and click <em>Quick Edit</em> in the developer toolbar.
Hover over a page component, such as a region, and click the wrench icon ( <span class="a-Icon icon-util" aria-hidden="true"></span> ) displayed in the top left corner.</p>~' );
    --
    l_property_id := 743;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIALOG_CHAINED',
        p_prompt             => 'Chained',
        p_property_type      => 'YES NO',
        p_db_column          => 'DIALOG_CHAINED',
        p_display_group_name => 'DIALOG',
        p_help_text          => q'~Select <b>Yes</b> if this dialog is opened by another dialog, and should reuse the same dialog window.
For example, if this dialog is part of a multiple page dialog wizard, and you wish to reuse the dialog window for each step of the wizard.<p><p>
Select <b>No</b> if this dialog is opened by another dialog, and should be opened in a new dialog window. For example, when this dialog is modal,
and you wish to open it within a parent modal dialog window.~' );
    --
    l_property_id := 744;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'COMPUTATION_SQL_COLON',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'COMPUTATION',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'COMPUTATION',
        p_help_text            => q'~Enter a SQL query that provides a value used to populate the computation item. If the result contains multiple rows then the value from each row is formed into a single colon delimited value.~' );
    --
    l_property_id := 745;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_REQUEST_SOURCE_TYPE',
        p_prompt             => 'Request Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'REQUEST_SOURCE_TYPE',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~This identifies the type of expression that is contained in the request source attribute. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>Database Column</em>, that is retrieved from a built-in fetch row process.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'QUERY',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return colon separated value)',
        p_return_value  => 'QUERY_COLON',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to a single colon separated value, which concatenates each row value, returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'FUNCTION',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the value that results from executing the <em>PL/SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'FUNCTION_BODY',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'ALWAYS_NULL',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Set to null.~',
        p_is_quick_pick => 'Y' );
    --
    l_property_id := 746;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_REQUEST_SOURCE',
        p_prompt             => 'Request Source',
        p_property_type      => 'TEXTAREA',
        p_db_column          => 'REQUEST_SOURCE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~When this button is pressed the page will be submitted and the page request will be set to this value. If this value is null and the <em>Request Source Type</em> is <em>Static Value</em>, then the Button Name will be used as the request value.~' );
    --
    l_property_id := 747;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_ELEMENT_PRE_TEXT',
        p_prompt             => 'Pre Text',
        p_property_type      => 'HTML',
        p_db_column          => 'PRE_ELEMENT_TEXT',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~<p>Enter additional attributes displayed before the HTML table cell that displays each individual option in a radio group or set of check boxes.
You can include HTML, JavaScript, and shortcuts.</p>
<p>You can reference the following substitution strings:</p>
<dl>
  <dt><code>#CURRENT_FORM_ELEMENT#</code></dt>
  <dd>Obtains the name of the HTML form element that this page item is associated with.</dd>
  <dt><code>#CURRENT_ITEM_NAME#</code></dt>
  <dd>Obtains the name of the current page item.</dd>
</dl>~' );
    --
    l_property_id := 748;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_ELEMENT_POST_TEXT',
        p_prompt             => 'Post Text ',
        p_property_type      => 'HTML',
        p_db_column          => 'POST_ELEMENT_TEXT',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => true,
        p_deprecated_values  => '$NOT_NULL$',
        p_help_text          => q'~<p>Enter additional attributes displayed after the HTML table cell that displays each individual option in a radio group or set of check boxes.
You can include HTML, JavaScript, and shortcuts.</p>
<p>You can reference the following substitution strings:</p>
<dl>
  <dt><code>#CURRENT_FORM_ELEMENT#</code></dt>
  <dd>Obtains the name of the HTML form element that this page item is associated with.</dd>
  <dt><code>#CURRENT_ITEM_NAME#</code></dt>
  <dd>Obtains the name of the current page item.</dd>
</dl>~' );
    --
    l_property_id := 749;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_GLOBAL_PAGE',
        p_prompt             => 'Is Global Page',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'IS_GLOBAL_PAGE',
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 750;
    store_property (
        p_id                 => l_property_id,
        p_name               => '3D_MODE_FLASH',
        p_prompt             => '3D Mode',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_3D_MODE',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~Specify whether 3D mode is enabled for this chart.~' );
    --
    l_property_id := 751;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'CACHE_DEPENDS_ON_ITEMS',
        p_prompt                => 'Depends On Item(s)',
        p_property_type         => 'ITEM',
        p_db_column             => 'DEPENDS_ON_ITEMS',
        p_display_group_name    => 'SERVER_CACHE',
        p_multi_value_delimiter => ',',
        p_display_length        => 50,
        p_max_length            => 4000,
        p_help_text             => q'~Enter a comma separated list of items that cached content depends on.~' );
    --
    l_property_id := 752;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAP_CHART_TYPE',
        p_prompt             => 'Map Chart Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'CHART_TYPE',
        p_max_length         => 255,
        p_display_group_name => 'MAP' );
    --
    l_property_id := 753;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_ID',
        p_prompt             => 'Parameter Id',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'PARAMETER_ID',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~~' );
    --
    l_property_id := 754;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_NAVIGATION_TYPE',
        p_prompt             => 'Navigation Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'NAVIGATION_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 755;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AFFECTED_JAVASCRIPT_EXPRESSION',
        p_prompt             => 'JavaScript Expression',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'AFFECTED_ELEMENTS',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'AFFECTED_ELEMENTS',
        p_examples           => q'~<dl>
<dt>Returns a reference to the browser's <code>window</code> DOM object.</dt>
<dd><code>window</code></dd>
<dt>Returns a reference to the browser's <code>document</code> DOM object.</dt>
<dd>document</dd>
<dt>jQuery selector selects all DIV elements that have a class of 'alert', and then returns a jQuery object containing all their parents.</dt>
<dd><code>$( "div.alert" ).parent()</code></dd>
</dl>~',
        p_help_text          => q'~Specify the JavaScript Expression to be evaluated to return a single DOM object, an array of DOM objects or a jQuery object as the element(s) to be affected by this action.~' );
    --
    l_property_id := 756;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'WHEN_JAVASCRIPT_EXPRESSION',
        p_prompt             => 'JavaScript Expression',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'TRIGGERING_ELEMENT',
        p_display_length     => 70,
        p_max_length         => 4000,
        p_display_group_name => 'WHEN',
        p_examples           => q'~<dl>
<dt>Returns a reference to the browser's <code>window</code> DOM object.</dt>
<dd><code>window</code></dd>
<dt>Returns a reference to the browser's <code>document</code> DOM object.</dt>
<dd><code>document</code></dd>
<dt>jQuery selector selects all DIV elements that have a class of 'alert', and then returns a jQuery object containing all their parents.</dt>
<dd><code>$( "div.alert" ).parent()</code></dd>
</dl>~',
        p_help_text          => q'~Enter the JavaScript Expression to be evaluated to return a single DOM object, an array of DOM objects or a jQuery object as the element(s) to trigger the dynamic action.~' );
    --
    l_property_id := 757;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'NAVIGATION_LIST_POSITION',
        p_prompt                   => 'List Position',
        p_property_type            => 'SELECT LIST',
        p_db_column                => 'NAVIGATION_LIST_POSITION',
        p_display_group_name       => 'NAVIGATION_MENU',
        p_lov_type                 => 'STATIC',
        p_help_text                => q'~Select the position for the navigation menu list on this page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'TOP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Side',
        p_return_value  => 'SIDE' );
    --
    l_property_id := 758;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'NAV_LIST_TEMPLATE_OPTIONS',
        p_prompt                => 'Template Options',
        p_property_type         => 'TEMPLATE OPTIONS',
        p_db_column             => 'NAV_LIST_TEMPLATE_OPTIONS',
        p_display_group_name    => 'NAVIGATION_MENU',
        p_lov_type              => 'TEMPLATE_OPTIONS',
        p_help_text             => q'~<p>Select template options to customize the user interface of this navigation list.</p>~' );
    --
    l_property_id := 759;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'LOV_FUNC_BODY_RETURNING_SQL',
        p_prompt               => 'PL/SQL Function Body returning SQL Query',
        p_property_type        => 'PLSQL FUNCTION BODY SQL',
        p_db_column            => 'LOV',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_display_group_name   => 'LIST_OF_VALUES',
        p_sql_min_column_count => 2,
        p_sql_max_column_count => 2,
        p_examples             => q'~<dl>
<dt>Display department name, set department number</dt>
<dd><pre>
begin
    return 'select dname as d, deptno as r from dept order by 1';
end;
</pre></dd>
</dl>~',
        p_help_text            => q'~<p>Enter a PL/SQL function body that returns an SQL Query to populate this list of values. Generally list of value queries are of the form:</p>
<pre>
select [displayValue],
       [returnValue]
  from ...
 where ...
 order by ...
</pre>
<p>Each column selected must have a unique name or alias. Oracle recommends using an alias on any column that includes an SQL expression.</p>~' );
    --
    l_property_id := 760;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GRID_LABEL_COLUMN_SPAN',
        p_prompt             => 'Label Column Span',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GRID_LABEL_COLUMN_SPAN',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'GRID_COLUMNS',
        p_help_text          => q'~Select how many layout columns the label occupies.~' );
    --
    l_property_id := 761;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_HEADER',
        p_prompt             => 'Fixed To',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FIXED_HEADER',
        p_display_group_name => 'HEADING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether you would like to fix the report's column headers to the top of the <strong>Page</strong> or top of the <strong>Region</strong>, so that the column headers remain visible as the user vertically scrolls the report.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~Report header is not fixed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region',
        p_return_value  => 'REGION',
        p_help_text     => q'~Fixes the report header to the top of the current region. As the user vertically scrolls within the region, the report header will remain fixed at the top of the region. <strong>Region</strong> level fixed headings could be useful for a page containing multiple regions, for example a dashboard page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page',
        p_return_value  => 'PAGE',
        p_help_text     => q'~Fixes the report header to the top of the page. As the user vertically scrolls the page, the report header will remain fixed at the top of the page. <strong>Page</strong> level fixed headings are useful for when the report is the main content on the page.~' );
    --
    l_property_id := 762;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_HEADER_MAX_HEIGHT',
        p_prompt             => 'Maximum Report Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'FIXED_HEADER_MAX_HEIGHT',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'HEADING',
        p_help_text          => q'~Enter the maximum height for the report in pixels.~' );
    --
    l_property_id := 763;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'GRID_COLUMN_CSS_CLASSES',
        p_prompt                => 'Column CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GRID_COLUMN_CSS_CLASSES',
        p_display_length        => 40,
        p_max_length            => 255,
        p_display_group_name    => 'LAYOUT',
        p_lov_type              => 'DISTINCT',
        p_help_text             => q'~<p>Enter CSS classes you want to apply to the layout column that contains this region. You may add multiple classes by separating them with spaces.</p>
        <p>This property can be used to provide fine grain control over the responsiveness and layout of the region's layout column as the viewport size is changed.
        For Universal Theme applications, there are a number of CSS modifiers you may use to extend your page components. Review the Reference section of the Universal Theme Sample Application to learn more.</p>~' );
    --
    l_property_id := 766;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_COND_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRIGGERING_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_help_text          => q'~Enter the value for this condition.~' );
    --
    l_property_id := 767;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JS_COND_LIST',
        p_prompt                => 'List',
        p_property_type         => 'TEXT',
        p_db_column             => 'TRIGGERING_EXPRESSION',
        p_display_length        => 60,
        p_max_length            => 4000,
        p_multi_value_delimiter => ',',
        p_display_group_name    => 'CLIENT_SIDE_CONDITION',
        p_help_text             => q'~Enter the comma separated list of values for this condition.~' );
    --
    l_property_id := 768;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_COND_JAVASCRIPT_EXPRESSION',
        p_prompt             => 'JavaScript Expression',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'TRIGGERING_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_help_text          => q'~<p>Specify the JavaScript Expression to be evaluated for this condition.
The code has access to the following dynamic action related attributes:</p>
<dl>
  <dt>this.triggeringElement</dt>
    <dd>A reference to the DOM object of the element that triggered the dynamic action.</dd>
  <dt>this.browserEvent</dt>
    <dd>The event object that triggered the event. Note: On load this is equal to 'load'.</dd>
  <dt>this.data</dt>
    <dd>Optional additional data that can be passed from the event handler.</dd>
</dl>~' );
    --
    l_property_id := 769;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MASTER_REGION',
        p_prompt                   => 'Master Region',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'MASTER_REGION_ID',
        p_display_group_name       => 'MASTER_DETAIL',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~<p>Select the master region to which this detail region belongs.<br>
        This should be set when this region is the detail region in a master-detail relationship with another region on this page.</p>
        <p>For the master-detail relationship to work correctly, select the column(s) in this region which are foreign keys to the master region, and specify the <strong>Master Column</strong> accordingly.~' );
    --
    l_property_id := 770;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_EDITABLE',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_EDITABLE',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~<p>Specify whether end users can edit this interactive grid.</p>
        <p>Note - When the Interactive Grid is made editable a process is automatically created to process the records.~' );
    --
    l_property_id := 771;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EDIT_OPERATIONS',
        p_prompt             => 'Allowed Operations',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'EDIT_OPERATIONS',
        p_display_group_name => 'EDIT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Check which data manipulation operations are allowed on this interactive grid.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Add Row',
        p_return_value  => 'i' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Update Row',
        p_return_value  => 'u' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delete Row',
        p_return_value  => 'd' );
    --
    l_property_id := 772;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EDIT_ROW_OPERATIONS_COLUMN',
        p_prompt             => 'Allowed Row Operations Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'EDIT_ROW_OPERATIONS_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~Select a column where the column value indicates if the row can be updated and/or deleted. The allowable values are:
        <dl>
          <dt>U</dt>
            <dd>Row can be updated</dd>
          <dt>D</dt>
            <dd>Row can be deleted</dd>
          <dt>UD</dt>
            <dd>Row can be updated or deleted</dd>
		</dl>~' );
    --
    l_property_id := 773;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ADD_AUTHORIZATION_SCHEME',
        p_prompt                => 'Add',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'ADD_AUTHORIZATION_SCHEME',
        p_display_group_name    => 'EDIT_AUTH',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to restrict who can add rows.
In order for an end user to add rows, this authorization scheme must evaluate to TRUE for that user.
If no authorization scheme is provided then any user can add rows in this interactive grid.~' );
    --
    l_property_id := 774;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'UPDATE_AUTHORIZATION_SCHEME',
        p_prompt                => 'Update',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'UPDATE_AUTHORIZATION_SCHEME',
        p_display_group_name    => 'EDIT_AUTH',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to restrict who can update rows.
In order for an end user to update rows, this authorization scheme must evaluate to TRUE for that user.
If no authorization scheme is provided then any user can update rows in this interactive grid.~' );
    --
    l_property_id := 775;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'DELETE_AUTHORIZATION_SCHEME',
        p_prompt                => 'Delete',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'DELETE_AUTHORIZATION_SCHEME',
        p_display_group_name    => 'EDIT_AUTH',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~Select an authorization scheme to restrict who can delete rows.
		In order for an end user to delete rows, this authorization scheme must evaluate to TRUE for that user.
		If no authorization scheme is provided then any user can delete rows in this interactive grid.~' );
    --
    l_property_id := 776;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LOST_UPDATE_CHECK_TYPE',
        p_prompt             => 'Lost Update Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOST_UPDATE_CHECK_TYPE',
        p_display_group_name => 'EDIT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select how to protect data against lost updates.
		Lost updates occur when two or more people try to update the same data, and the last update overwrites updates made by the first user to save changes.
		To prevent this from happening, updates can check the existing column value(s) in the database with the value(s) retrieved when the record was originally queried.</p>
		<p>For example:
		  <ol>
		    <li>User A queries employee (EMP) records.</li>
		    <li>User B queries the same employee records.</li>
		    <li>User B updates employee details for EMPNO = 7839 and applies (commits) the changes to the database.</li>
		    <li>User A updates employee details for EMPNO = 7839 and is attempting to apply the changes to the database.</li>
		  </ol>
		  If User A successfully updates the same record, changes made by User B will be lost.</p>
		 <p>When User A is attempting to save the employee record, then the data in the database is different from what User A queried originally.
		  In step 1 above, the column value(s) originally queried by User A can be captured.
		  Then in step 4 above, the value(s) can be compared to the current values in the database.
		  This comparison will raise an error for User A, as the database value(s) were updated by User B in step 3.
		  This prevents a user from overwriting changes made by another user to the same row.</p>
		  <p>Note - Lost Update Type will only be used if the corresponding process, Interactive Grid - Automatic Row Processing (DML), has <strong>Prevent Lost Updates</strong> enabled.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Values',
        p_return_value  => 'VALUES',
        p_help_text       => q'~<p>A checksum value will be calculated for each row, when initially querying the data.
        The checksum is calculated by concatenating all of the updateable columns into a string and then generating a unique value.
        When committing the updated record, this checksum will be compared to the checksum value of the current database record.
        If they are not the same, an error will be raised.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Row Version Column',
        p_return_value  => 'COLUMN',
        p_help_text       => q'~<p>If your database table includes a column which is incremented every time a record is updated, preferably by a database trigger, then this column can be used instead of calculating checksums.
        This option should not be used if your interactive grid updates data in multiple tables.</p>
        <p>Note - The row version column must be included in the SQL Source for the region.</p>~' );
    --
    l_property_id := 777;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ROW_VERSION_COLUMN',
        p_prompt             => 'Row Version Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ROW_VERSION_COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER:DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~Select the column which stores the row version number for the table being updated. This column will be used in the lost update check.~' );
    --
    l_property_id := 778;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADD_ROW_IF_EMPTY',
        p_prompt             => 'Add Row If Empty',
        p_property_type      => 'YES NO',
        p_db_column          => 'ADD_ROW_IF_EMPTY',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~<p>Specify whether to add a new row if the interactive grid currently has no records returned.
        The <em>No Data Found</em> message will never be displayed as there will always be at least one record displayed.</p>
        <p>Note - If no updates are made to the record that was added it will not be inserted when the region is saved.</p>~' );
    --
    l_property_id := 779;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SUBMIT_CHECKED_ROWS',
        p_prompt             => 'Submit Includes Selected Rows',
        p_property_type      => 'HIDDEN', /* pwolf: pushed to 5.2 -- 'YES NO' */
        p_db_column          => 'SUBMIT_CHECKED_ROWS',
        p_display_group_name => 'EDIT',
        p_help_text          => q'~<p>Specify whether to include checked rows in page processing, generally initated by a custom button, such as <strong>Mark Completed</strong>.
        These checked rows can then be utilized in a custom process to perform the required action.</p>
        <p>Note - The selected rows will be processed even if nothing on the row has been updated. Generally, only rows which have been inserted, updated or deleted are processed.</p>~' );
    --
    l_property_id := 780;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LAZY_LOADING',
        p_prompt             => 'Lazy Loading',
        p_property_type      => 'YES NO',
        p_db_column          => 'LAZY_LOADING',
        p_display_group_name => 'PERFORMANCE',
        p_help_text          => q'~<p>Specify whether to load the interactive grid region independently of the data for the region.</p>
        <p>When lazy loading is specified, the page is rendered immediately, showing an empty interactive grid region, until the data is loaded.
        Generally, the page is not displayed until all of the page is loaded and ready to be rendered.
        Therefore, if it takes 5 seconds to load all of the data for an interactive grid region, without lazy loading, the end user would have to wait 5 seconds before the page started to render.</p>
		<p>Note - Lazy Loading should only be utilized on data sets that take significant time to load, as this adds unnecessary processing overhead on the database for regions that load quickly.</p>~' );
    --
    l_property_id := 781;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REQUIRES_FILTER',
        p_prompt             => 'Requires Filter',
        p_property_type      => 'HIDDEN', -- pwolf: pushed to 5.2 -- 'YES NO',
        p_db_column          => 'REQUIRES_FILTER',
        p_display_group_name => 'PERFORMANCE',
        p_help_text          => q'~<p>Specify whether to prevent the interactive grid from displaying data, unless at least one filter is defined on one of the report columns.
		This option is designed to limit the data loaded from a very large data set, by restricting the rows returned based on a filter.</p>
		<p>Individual columns can have <strong>Column Filter Required</strong> enabled, ensuring a filter is required for that column, whereas, this option only requires one filter across any of the columns.</p>
		<p>Note - When this option is set and no filters are currently defined, a message will be displayed requesting the users to input a filter.</p>~',
		p_comment_text       => q'~??? [DP] THis feature not yet working - Test region and column filters required~' );
    --
    l_property_id := 782;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_ROW_HEIGHT',
        p_prompt             => 'Fixed Row Height',
        p_property_type      => 'YES NO',
        p_db_column          => 'FIXED_ROW_HEIGHT',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Specify whether to display the interactive grid with fixed row height.</p>
        <p>If set to <em>Yes</em>, ellipses (...) will be displayed at the end of data, for columns that are too narrow to display all of the data.
        If set to <em>No</em> data will wrap across multiple lines as necessary.</p>
        <p>Note - This attribute is only available when the interactive grid is not editable.</p>~',
        p_comment_text       => '~$$$ [DJP] This attribute not yet available due to technical reasons {See John} - May be removed before release.~' );
    --
    l_property_id := 783;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_PAGINATION_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PAGINATION_TYPE',
        p_display_group_name => 'PAGINATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the pagination type for this report. Often not all report rows are displayed in the report.
		In order to display additional rows, the end user can use the pagination provided.</p>
		<p>Pagination provides the end user with information about the number of rows displayed, and the current position within the result set.</p>~' );
    --
/* pwolf: pushed to APEX 5.2
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~No pagination provided. End users can only see the records displayed, based on the number specified in <em>Rows per Page</em>.~' );
*/
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Page', -- name is TBD
        p_return_value  => 'SET',
        p_help_text     => q'~The first rows will be displayed, based on the number specified in <em>Rows per Page</em>.
        If there are additional rows, controls will be added to the report footer, allowing end users to navigate forwards and backwards between row sets.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scroll',
        p_return_value  => 'SCROLL',
        p_help_text     => q'~Initially enough rows to fill the height of the Interactive Grid are displayed. 
        As the end user scrolls additional rows are displayed, getting more data from the server as needed.~' );
    --
/* pwolf: pushed to APEX 5.2
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Load More',
        p_return_value  => 'MORE' );
*/
    --
    l_property_id := 784;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_TOTAL_ROW_COUNT',
        p_prompt             => 'Show Total Row Count',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_TOTAL_ROW_COUNT',
        p_display_group_name => 'PAGINATION',
        p_help_text          => q'~<p>Specify whether to display the total row count in the report footer.<p/>
        <p>Note - An additional query is performed to obtain the total row count, which may hinder performance, especially on very large data sets.</p>~' );
    --
    l_property_id := 785;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_TOOLBAR',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_TOOLBAR',
        p_display_group_name => 'TOOLBAR',
        p_help_text          => q'~Specify whether a toolbar is displayed above the report. The toolbar may include search, report type, saved reports, actions, change, and reset functionality.~');
    --
    l_property_id := 786;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TOOLBAR_BUTTONS',
        p_prompt             => 'Buttons',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'TOOLBAR_BUTTONS',
        p_display_group_name => 'TOOLBAR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Check which additional buttons are to be displayed in the toolbar.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Reset',
        p_return_value  => 'RESET',
        p_help_text     => q'~Reset will remove any customizations, such as filters, column width, ordering, and so forth, and reload the the report definition from the server.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Save',
        p_return_value  => 'SAVE',
        p_help_text     => q'~Save will only save changes made to this interactive grid, without needing to save the whole page.
        <p>The save button will only be displayed when the interactive grid is editable, and the end user has authorization to add, update or delete.</p>~' );
    --
    l_property_id := 787;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ADD_BUTTON_LABEL',
        p_prompt             => 'Add Button Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'ADD_BUTTON_LABEL',
        p_display_length     => 30,
        p_max_length         => 255,
        p_display_group_name => 'TOOLBAR',
        p_is_translatable    => true,
        p_help_text          => q'~<p>Enter an alternative label for the Add button. The default label is <em>Add Row</em>.</p>
        <p>For example, enter <em>Add Employee</em> for an interactive grid where employees are maintained.</p>~' );
    --
    l_property_id := 788;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_SAVE_PUBLIC_REPORT',
        p_prompt             => 'Save Public Report',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_SAVE_PUBLIC_REPORT',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~<p>Specify whether end users can save their current report definition as a <em>Public</em> report.</p>
		<p>Public reports are displayed in a select list of available reports in the Toolbar, and are displayed to everyone.<p>
		<p>Note - This option is only available to authenticated users, and is further restricted if you also populate the <strong>Save Public Report Authorization</strong>.</p>~' );
    --
    l_property_id := 789;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'PUBLIC_REPORT_AUTH_SCHEME',
        p_prompt                => 'Save Public Report Authorization',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'PUBLIC_REPORT_AUTH_SCHEME',
        p_display_group_name    => 'ENABLE_USER_TO',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_authorization,
        p_help_text             => q'~<p>Select an authorization scheme to restrict who can save public report definitions.
		To enable an end user to save a public report, this authorization scheme must evaluate to TRUE for that user.</p>
		<p>Note - If no authorization scheme is provided then public reports may be saved by any user.</p>~' );
    --
    l_property_id := 790;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_SUBSCRIPTIONS',
        p_prompt             => 'Subscription',
        p_property_type      => 'HIDDEN', -- pwolf: Feature didn't make it into 5.1 'YES NO',
        p_db_column          => 'ENABLE_SUBSCRIPTIONS',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can define subscription settings for this report.~' );
    --
    l_property_id := 791;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_DOWNLOAD',
        p_prompt             => 'Download',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_DOWNLOAD',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~Specify whether end users can download the report to one of the download formats specified.~' );
    --
    l_property_id := 792;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_DOWNLOAD_FORMATS',
        p_prompt             => 'Download Formats',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'DOWNLOAD_FORMATS',
        p_display_group_name => 'DOWNLOAD',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Check which download formats users can utilize to download the currently displayed columns.</p>~' );
/*
<p>In order for users to utilize the following formats, an administrator must configure Report Printing in Administration Services:</p>
<ul>
  <li>Microsoft Excel (XLS format)</li>
  <li>PDF</li>
  <li>Microsoft Word (RTF format)</li>
</ul>~' );
*/
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CSV',
        p_return_value  => 'CSV' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'HTML',
        p_return_value  => 'HTML' );
    --
/*
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'XLS',
        p_return_value  => 'XLS' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PDF',
        p_return_value  => 'PDF' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'RTF',
        p_return_value  => 'RTF' );
*/
    --
    l_property_id := 793;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_MAIL_DOWNLOAD',
        p_prompt             => 'Send as Email',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_MAIL_DOWNLOAD',
        p_display_group_name => 'DOWNLOAD',
        p_help_text          => q'~<p>Specify whether end users can send an email, with the report download included as a HTML attachment.</p>
<p>Email is only available to authenticated users, and requires the SMTP to be configured within &PRODUCT_NAME. Administration Services application (Administration Services), by an Instance Administrator.</p>~');
    --
    l_property_id := 794;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_CUSTOM',
        p_prompt             => 'Custom Icon',
        p_property_type      => 'HTML',
        p_db_column          => 'ICON_VIEW_CUSTOM',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_examples           => q'~<pre>
&lt;a href="&APEX$ROW_URL!ATTR."&gt;&lt;img src="&EMP_IMG!ATTR." title="&ENAME!ATTR." alt="&ENAME!ATTR."&gt;&lt;br&gt;&ENAME.&lt;/a&gt;
</pre>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~</p>Enter the custom column HTML for the Icon View.</p> 
<p>The following substitution strings are available:
<ul>
<li><code>&COLUMN_NAME.</code> - substitution strings for column names.</li>
<li><code>&APEX$ROW_ID.</code> - the record identifier for the row.</li>
<li><code>&APEX$ROW_INDEX.</code> - the record display sequence number.</li>
<li><code>&APEX$ROW_URL.</code> - reference the specified Link Target.</li>
</ul>
</p>~' );
    --
    l_property_id := 795;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_TYPE',
        p_prompt             => 'Icon Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ICON_VIEW_ICON_TYPE',
        p_display_group_name => 'ICON_VIEW',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the column type that holds the icon image source.~'  );
    --
/* pwolf: Pushed to 5.2
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image in BLOB',
        p_return_value  => 'BLOB' );
    --
*/
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Image in URL',
        p_return_value  => 'URL' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Icon CSS Classes',
        p_return_value  => 'CSS_CLASSES' );
    --
    l_property_id := 796;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_BLOB_COLUMN',
        p_prompt             => 'Image Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ICON_VIEW_ICON_COLUMN',
        p_column_data_types  => 'BLOB',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the interactive grid column that returns the BLOB for the icon image source.~' );
    --
    l_property_id := 797;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_URL_COLUMN',
        p_prompt             => 'Icon URL',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ICON_VIEW_ICON_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the interactive grid column that returns the URL for the icon image source.~' );
    --
    l_property_id := 798;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_CSS_COLUMN',
        p_prompt             => 'Icon',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ICON_VIEW_ICON_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the interactive grid column that returns the CSS classes for the icon image source.~' );
    --
    l_property_id := 799;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_ICON_ATTRIBUTES',
        p_prompt             => 'Icon Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_ICON_ATTRIBUTES',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Enter the icon image attributes used for the HTML IMG tag.~' );
    --
    l_property_id := 800;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_ICON_VIEW_LINK_TARGET',
        p_prompt             => 'Link Target',
        p_property_type      => 'LINK',
        p_db_column          => 'ICON_VIEW_LINK_TARGET',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Click the Link Target to invoke a modal dialog. You can enter a custom target to be called when the icon is clicked.~' );
    --
    l_property_id := 801;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_LINK_ATTRIBUTES',
        p_prompt             => 'Link Attributes',
        p_property_type      => 'TEXT',
        p_db_column          => 'ICON_VIEW_LINK_ATTRIBUTES',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Enter HTML attributes that are associated with the display of each <strong>Link Target</strong>.~' );
    --
    l_property_id := 803;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JAVASCRIPT_CODE',
        p_prompt             => 'JavaScript Initialization Code',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'JAVASCRIPT_CODE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_examples           => q'~<pre>
function( options ) {
  options.advancedOption = true;
  return options;
}
</pre>
~',
        p_help_text          => q'~<p>Enter a JavaScript function that takes a configuration object for the component, modifies the object, and returns it. This allows advanced customization of the appearance, features, and behavior of the component.</p>~' );
    --
    l_property_id := 804;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ALTERNATIVE_LABEL',
        p_prompt             => 'Alternative Label',
        p_property_type      => 'TEXT',
        p_db_column          => 'LABEL',
        p_display_length     => 50,
        p_max_length         => 255,
        p_display_group_name => 'HEADING',
        p_is_translatable    => true,
        p_help_text          => q'~Enter the alternative label to use in dialogs and in the Single Row View.
        Use an alternative label when the heading contains extra formatting, such as HTML tags, which do not display properly.~' );
    --
    l_property_id := 805;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IG_COLUMN_GROUP',
        p_prompt                   => 'Group',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'GROUP_ID',
        p_display_group_name       => 'LAYOUT',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ig_column_group,
        p_lov_component_type_scope => 'PARENT',
        p_help_text                => q'~Select the group for this column. Groups are used to associate columns together in the grid and Single Row View.</p>
        <p>Note - Groups are added by expanding the Attributes folder within the Rendering tree, and right-clicking on Column Groups to create a new group.</p>~' );
    --
    l_property_id := 806;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_USE_GROUP_FOR',
        p_prompt             => 'Use Group For',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'USE_GROUP_FOR',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select where the group is used to display this column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Both',
        p_return_value  => 'BOTH',
        p_help_text     => q'~The group will display in both the report heading and in the Single Row view.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Single Row View',
        p_return_value  => 'SRV',
        p_help_text     => q'~The group will only display in the Single Row View.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Heading',
        p_return_value  => 'HEADING',
        p_help_text     => q'~The group will only display in the report heading.~' );
    --
    l_property_id := 807;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_FILTER',
        p_prompt             => 'Enabled',
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_FILTER',
        p_display_group_name => 'COLUMN_FILTER',
        p_help_text          => q'~Specify whether end users can filter this column.~' );
    --
    l_property_id := 808;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_OPERATORS',
        p_prompt             => 'Performance Impacting Operators',
        p_property_type      => 'CHECKBOXES',
        p_db_column          => 'FILTER_OPERATORS',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select which filter operators end users can utilize for this column.</p>
        <p>Depending on the size of the data set and column indexes, you may choose to disable certain filter operators to avoid performance issues for the end users.
        Certain operators may cause full table scans instead of using column indexes.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Contains',
        p_return_value  => 'C',
        p_help_text     => q'~<p>Filter returns results of column values containing the filter value.
        &PRODUCT_NAME. will utilize a <code>column LIKE <strong>%</strong>filtervalue<strong>%</strong></code> in the where clause.</p>
        <p>Note - this operator will prevent any column indexes being used, which may result in a full table scan.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Starts With',
        p_return_value  => 'S',
        p_help_text     => q'~<p>Filter returns results of column values starting with the filter value.
        &PRODUCT_NAME. will utilize a <code>column LIKE filtervalue<strong>%</strong></code> in the where clause.</p>
        <p>Note - this operator can utilize available column indexes. {Please review <strong>Case Insensitive</strong> for exceptions}.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Case Insensitive',
        p_return_value  => 'CASE_INSENSITIVE',
        p_help_text     => q'~<p>Filter returns results of column values irrespective of differences in the case of the column value and filter value.
        &PRODUCT_NAME. will utilize a <code>UPPER(column) <em>operator</em> UPPER(filtervalue)</code> in the where clause.</p>
        <p>Note - Generally performing UPPER on both the column and filter value will prevent the use of any column indexes, except for function based column indexes with UPPER(<em>column</em>).</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Regular Expression',
        p_return_value  => 'REGEXP',
        p_help_text     => q'~<p>Filter returns results based on the regular expression entered.</p>
        <p>Note - using REGEXP operators is complex and generally only used by advanced users. Such operators can result in very bad performance.</p>~' );
    --
    l_property_id := 809;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_TEXT_CASE',
        p_prompt             => 'Text Case',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FILTER_TEXT_CASE',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select which case the text within the column value is stored.</p>
        <p>If the column can be specified as always upper case, for example <em>Username</em>, or always lower case, then the performance of retrieving filter results can be improved.
          If <strong>Upper</strong> or <strong>Lower</strong> is selected searches will always perform case sensitive searches.</p>
        <p>Note - If Mixed is selected, then end users can specify <strong>Case Sensitive</strong> in the Search and Filter dialogs.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Upper',
        p_return_value  => 'UPPER',
        p_help_text     => q'~For when the column value is always stored in upper case.
        &PRODUCT_NAME. will utilize a <code>column <em>operator</em> UPPER(filtervalue)</code> in the where clause.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Lower',
        p_return_value  => 'LOWER',
        p_help_text     => q'~For when the column value is always stored in lower case.
        &PRODUCT_NAME. will utilize a <code>column <em>operator</em> LOWER(filtervalue)</code> in the where clause.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Mixed',
        p_return_value  => 'MIXED',
        p_help_text     => q'~For when the column value is stored in mixed case. The setting for the <strong>Case Insensitive</strong> operator will determine the where clause utilized.~' );
    --
    l_property_id := 810;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_IS_REQUIRED',
        p_prompt             => 'Required',
        p_property_type      => 'YES NO',
        p_db_column          => 'FILTER_IS_REQUIRED',
        p_display_group_name => 'COLUMN_FILTER',
        p_help_text          => q'~<p>Specify whether a filter is always required for this column.</p>
        <p>Note - a filter will always be required for this specific column before any data is returned, irrespective of the <strong>Filter Required</strong> option in the interactive grid attributes.</p>~' );
    --
    l_property_id := 811;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_LOV_TYPE',
        p_prompt             => 'LOV Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'FILTER_LOV_TYPE',
        p_display_group_name => 'COLUMN_FILTER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to derive the list of values for the filter when a user clicks on the column header or in filter dialogs.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~Disable any values being displayed in the filter.
        This option is appropriate on large columns, generally with most values being over 50 characters, or when a list would not be very usable for selecting a specific record.
        Instead the end user can just type in a partial value and then view the results.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Distinct Column',
        p_return_value  => 'DISTINCT',
        p_help_text     => q'~Distinct column values are displayed for VARCHAR2 and NUMBER columns. DATE and TIMESTAMP columns utilize the built-in predefined date ranges.~',
        p_is_quick_pick => 'Y' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Values are derived from the SQL query definition.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Shared Component',
        p_return_value  => 'SHARED',
        p_help_text     => q'~Values are derived from an exisiting list of values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Values',
        p_return_value  => 'STATIC',
        p_help_text     => q'~Values are derived from a static list of values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body returning SQL Query',
        p_return_value  => 'PLSQL_FUNCTION_BODY',
        p_help_text     => q'~Values are derived from the PL/SQL function body that returns a SQL Query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Use List of Values',
        p_return_value  => 'LOV',
        p_help_text     => q'~Values are derived from list of values.~' );
    --
    l_property_id := 812;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_EXACT_MATCH',
        p_prompt             => 'Exact Match',
        p_property_type      => 'YES NO',
        p_db_column          => 'FILTER_EXACT_MATCH',
        p_display_group_name => 'COLUMN_FILTER',
        p_help_text          => q'~<p>Specify whether to perform an exact match search when the end user enters text into a column filter.
        If set to No, the filter will perform a contains search, rather than an equals search.</p>
        <p>For example, if a column, such as TAGS, includes values separated by commas, then exact match will only return results if the row contains the single text value entered into the column filter.
        If Exact Match is set to No, results will return any rows which include the text value entered. ~' );
    --
    l_property_id := 813;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'IG_COLUMN_FILTER_STATIC_VALUES',
        p_prompt               => 'Static Values',
        p_property_type        => 'TEXT EDITOR',
        p_db_column            => 'FILTER_LOV_QUERY',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_examples           => q'~<pre>Cow,Dog,Cat,Lion</pre>~',
        p_display_group_name   => 'COLUMN_FILTER',
        p_help_text            => q'~<p>Enter a comma delimited list of values for this static list.</p>
		<p>Note - the Static Values will always be displayed in the same order they are specified, not alphabetically.</p>~' );
    --
    l_property_id := 814;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'IG_COLUMN_FILTER_FUNC_BODY_RETURNING_SQL',
        p_prompt               => 'PL/SQL Function Body returning SQL Query',
        p_property_type        => 'PLSQL FUNCTION BODY SQL',
        p_db_column            => 'FILTER_LOV_QUERY',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_display_group_name   => 'COLUMN_FILTER',
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_examples             => q'~<dl>
<dt>To return the department name:</dt>
<dd><pre>
begin
    return 'select dname as d from dept order by 1';
end;
</pre></dd>
</dl>~',
        p_help_text            => q'~<p>Enter a PL/SQL function body that returns an SQL Query to populate this list of values.</p>
<p>The SQL Query only needs to return one column. If the query returns multiple columns, only the first column is used in the filter search.</p>~' );
    --
    l_property_id := 815;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IG_COLUMN_SOURCE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SOURCE_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source type the value of this column is based on.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_help_text     => q'~Set to the column value entered in <em>Database Column</em>, that is retrieved from the region source SQL Query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Expression',
        p_return_value  => 'SQL_EXPRESSION',
        p_help_text     => q'~Set to the value returned from the <em>SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'NONE',
        p_help_text     => q'~The column value is not retrieved from any source. For example, the APEX$ROW_SELECTOR and APEX$ROW_ACTION columns have no source.~');
    --
    l_property_id := 817;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_SQL_EXPRESSION',
        p_prompt             => 'SQL Expression',
        p_property_type      => 'SQL EXPRESSION',
        p_db_column          => 'SOURCE_EXPRESSION',
        p_display_length     => 50,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_examples             => q'~<dl>
<dt>To concatenate two columns together:</dt>
<dd><pre>
FIRSTNAME || ' ' || LASTNAME
</pre></dd>
<dt>Include an inner select:</dt>
<dd><pre>
(select count(*) from emp e where e.deptno = DEPTNO)
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter the SQL Expression.~' );
    --
    l_property_id := 818;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATA_TYPE',
        p_prompt             => 'Data Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_TYPE',
        p_display_length     => 32,
        p_max_length         => 128,
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the data type of the underlying database column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'VARCHAR2',
        p_return_value  => 'VARCHAR2' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'NUMBER',
        p_return_value  => 'NUMBER' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DATE',
        p_return_value  => 'DATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP',
        p_return_value  => 'TIMESTAMP' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH TIME ZONE',
        p_return_value  => 'TIMESTAMP_TZ' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'TIMESTAMP WITH LOCAL TIME ZONE',
        p_return_value  => 'TIMESTAMP_LTZ' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'INTERVAL YEAR TO MONTH',
        p_return_value  => 'INTERVAL_Y2M' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'INTERVAL DAY TO SECOND',
        p_return_value  => 'INTERVAL_D2S' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'CLOB',
        p_return_value  => 'CLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BLOB',
        p_return_value  => 'BLOB' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'ROWID',
        p_return_value  => 'ROWID' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'BFILE',
        p_return_value  => 'BFILE' );
    --
    l_property_id := 819;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_QUERY_ONLY',
        p_prompt             => 'Query Only',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_QUERY_ONLY',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~<p>Specify whether to exclude the column from DML operations.</p>
        <p>If set to Yes, &PRODUCT_NAME. will not utilize the column when executing Intereactive Grid - Automatic Row Processing (DML).
        For example, you should exclude columns whose definitions include concatenations, inner selects, function calls, or a column in an updateable view which is based on an expression.</p>
        <p>All columns which need to be included in any INSERT or UPDATE statements must have this option set to No.</p>
        <p>Note: Columns of type <em>Display Only</em> are <u>also</u> included in the Automatic Row Processing unless this option is set to Yes.</p>~' );
    --
    l_property_id := 820;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_PRIMARY_KEY',
        p_prompt             => 'Primary Key',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_PRIMARY_KEY',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Specify whether the column is one of the primary key values for the underlying table(s).~' );
    --
    l_property_id := 821;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'MASTER_COLUMN',
        p_prompt                   => 'Master Column',
        p_property_type            => 'COMPONENT',
        p_db_column                => 'PARENT_COLUMN_ID',
        p_column_data_types        => 'VARCHAR2:NUMBER:DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_display_group_name       => 'MASTER_DETAIL',
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_ig_column,
        p_lov_component_type_scope => 'PAGE',
        p_help_text                => q'~<p>If this column is a foreign key column for the master interactive grid region, as specified by <strong>Master Region</strong> in the region settings, select the corresponding primary key column from the master table.</p>
        <p>For example, if the master region was DEPT and this interactive grid was EMP, then you would select the DEPTNO column within the EMP interactive grid and then select the DEPTNO column from the list of DEPT columns for Master Column.</p>~' );
    --
    l_property_id := 822;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ENABLE_SORT_GROUP',
        p_prompt             => 'Sort/Control Break/Aggregate', -- $$$ pawolf09082016: Group by didn't make it into 5.1 Sort/Control Break/Aggregate/Group By 
        p_property_type      => 'YES NO',
        p_db_column          => 'ENABLE_SORT_GROUP',
        p_display_group_name => 'ENABLE_USER_TO',
        p_help_text          => q'~<p>Specify whether end users can use this column in sorts, control breaks, and aggregates.</p>
        <p>Note - Allowing these operations can lead to performance issues, especially on large data sets or where appropriate column indexes are not available.</p>~' );
/* $$$ pawolf09082016: Group by didn't make it into 5.1
        p_help_text          => q'~<p>Specify whether end users can use this column in sorts, control breaks, aggregates, and group by.</p>
        <p>Note - Allowing these operations can lead to performance issues, especially on large data sets or where appropriate column indexes are not available.</p>~' );
*/
    --
    l_property_id := 823;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DEFAULT_TYPE',
        p_display_group_name => 'DEFAULT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the default value of this column is determined.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static',
        p_return_value  => 'STATIC',
        p_help_text     => q'~Set to the value entered in <em>Static</em> value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_help_text     => q'~Set to the value returned from the session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the value returned from the <em>SQL Query</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query returning Colon Delimited List',
        p_return_value  => 'SQL_QUERY_COLON',
        p_help_text     => q'~<p>Set to the colon delimited list of values returned from the <em>SQL Query</em> entered.</p>
        <p>Note - colon delimited lists are required when the column is displayed as a checkbox, radio group, or shuttle.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'PLSQL_EXPRESSION',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'PLSQL_FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
     --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sequence',
        p_return_value  => 'SEQUENCE',
        p_help_text     => q'~Set to the value returned from the <em>Sequence</em> entered.~' );
    --
    l_property_id := 824;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_SQL_QUERY',
        p_prompt             => 'SQL Query',
        p_property_type      => 'SQL',
        p_db_column          => 'DEFAULT_EXPRESSION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the SQL query which returns the default value for this column.~' );
    --
    l_property_id := 825;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_SQL_QUERY_COLON',
        p_prompt             => 'SQL Query Colon',
        p_property_type      => 'SQL',
        p_db_column          => 'DEFAULT_EXPRESSION',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the SQL query which returns the default colon delimited list of values for this column.~' );
    --
    l_property_id := 826;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DEFAULT_VALUE_SEQUENCE',
        p_prompt             => 'Sequence',
        p_property_type      => 'TEXT',
        p_db_column          => 'DEFAULT_EXPRESSION',
        p_display_length     => 80,
        p_max_length         => 128,
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Enter the name of the database sequence which returns the default value for this column.~' );
    --
    l_property_id := 827;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DUPLICATE_VALUE',
        p_prompt             => 'Duplicate Copies Existing Value',
        p_property_type      => 'YES NO',
        p_db_column          => 'DUPLICATE_VALUE',
        p_display_group_name => 'DEFAULT',
        p_help_text          => q'~Specify whether the column should be defaulted to the existing column value when duplicating the record.~' );
    --
    l_property_id := 828;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXECUTE_READONLY',
        p_prompt             => 'Execute',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'READONLY_FOR_EACH_ROW',
        p_display_group_name => 'READ_ONLY',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select when this read only condition is executed.</p>
		<p>If you refer to <em>Columns</em> in your read only condition, you must specify <strong>For Each Row</strong> in order for the condition to be evaluated for each row of the Interactive Grid.
		Otherwise, set to <strong>Once</strong> to evaluate the condition only one time for the region.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For Each Row',
        p_return_value  => 'Y',
        p_help_text     => q'~Evaluate the read only condition independently for each row.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Once',
        p_return_value  => 'N',
        p_help_text     => q'~Evaluate the read only condition only once for the whole region.~' );
    --
    -- JET Chart Properties (829-862)
    -- Chart Group Settings
    l_property_id := 829;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_CHART_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CHART_TYPE',
        p_display_group_name => 'CHART',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart type. The chart type determines the visualization used to render the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Area charts are useful for comparing trends of cumulative values over time, such as breakdowns of sales trends.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Bar charts are useful for comparing values across categories, or over time.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Box Plot',
        p_return_value  => 'boxPlot' ,
        p_help_text     => q'~Box plot charts are useful for analyzing the distribution of data, displaying the minimum, quartiles, median, and maximum values of groups of numerical data. Box plots are also called Box and Whisker diagrams.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bubble',
        p_return_value  => 'bubble' ,
        p_help_text     => q'~Bubble charts define data items using x, y, and z values, making them useful for viewing relationships between 3 dimensions. The third dimension is represented by the size of the bubble.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Combination',
        p_return_value  => 'combo' ,
        p_help_text     => q'~Combination charts allow bar, line, and area series to be displayed on the same chart. The most common use case is lines with bars or lines with stacked bars.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dial Gauge',
        p_return_value  => 'dial',
        p_is_quick_pick => 'Y' ,
        p_help_text     => q'~Dial gauges are used to display a metric value in relation to the minimum and maximum possible values for that metric.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Donut',
        p_return_value  => 'donut' ,
        p_help_text     => q'~Donut charts are a pie chart with a hole in the middle. They are useful for visualizing parts of a whole.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Funnel',
        p_return_value  => 'funnel' ,
        p_help_text     => q'~Funnel charts are useful for viewing data for stages of a process, such as the stages of a sales process. The area of a funnel slice is proportional to the value for the corresponding stage.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Gantt',
        p_return_value  => 'gantt' ,
        p_help_text     => q'~Gantt charts are useful for displaying project schedules, displaying bars that indicate the start and end date of tasks.~' );
    --    
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line',
        p_is_quick_pick => 'Y' ,
        p_help_text     => q'~Line charts are useful for visualizing trends in a set of values over time and comparing these values across series.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea',
        p_help_text     => q'~Line with Area charts are the same as line charts, with the area below each line filled in.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pie',
        p_return_value  => 'pie',
        p_is_quick_pick => 'Y' ,
        p_help_text     => q'~Pie charts are useful for visualizing parts of a whole.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Polar',
        p_return_value  => 'polar' ,
        p_help_text     => q'~Polar charts have a radial y-axis and a tangential x-axis. Polar charts can be rendered as bar, line, area, combination, scatter, or bubble chart series types.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Pyramid',
        p_return_value  => 'pyramid' ,
        p_help_text     => q'~Pyramid charts are useful for visualizing hierarchical, proportional and foundation-based relationships, process steps, organizational layers or topics interconnections. The area of a pyramid slice is proportional to its value for the corresponding stage.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Radar',
        p_return_value  => 'radar' ,
        p_help_text     => q'~Radar charts are polar charts with a polygonal grid shape, rather than a circle surround. They are supported for line and area chart series types.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Range',
        p_return_value  => 'range',
        p_help_text     => q'~Range charts display maximum and minimum (high / low) values for each entry, using either bars or area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scatter',
        p_return_value  => 'scatter',
        p_help_text     => q'~Scatter charts define data items using x and y values, making them useful for viewing relationships between 2 dimensions.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stock',
        p_return_value  => 'stock' ,
        p_help_text     => q'~Stock charts are useful for displaying information about a stock on a time axis. Unique to stock charts is the candlestick <strong>Stock Render As</strong> property, which allows for displaying open, close, high, low information for the stock price.~' );
    --
    -- Appearance Group Settings
    l_property_id := 830;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORIENTATION',
        p_prompt             => 'Orientation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ORIENTATION',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the orientation of this chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Vertical',
        p_return_value  => 'vertical',
        p_help_text     => q'~Displays the data items of the chart vertically.  For example, the bars on a Bar chart will display vertically.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Horizontal',
        p_return_value  => 'horizontal',
        p_help_text     => q'~Displays the data items of the chart horizontally.  For example, the bars on a Bar chart will display horizontally.~');
    --
    l_property_id := 833;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'STACK',
        p_prompt                     => 'Stack',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'STACK',
        p_display_group_name         => 'APPEARANCE',
        p_help_text                  => q'~<p>Specify whether the data items are stacked.~' );
    --
    /*l_property_id := 834;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SPARK_CHART',
        p_prompt             => 'Spark Chart',
        p_property_type      => 'YES NO',
        p_db_column          => 'SPARK_CHART',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Specify whether the chart should be rendered as a spark chart.</p>
        <p>Spark Charts display trends or variations as a line, bar, floating bar, or area. Spark charts are simple and condensed. They are used to provide quick context to data.</p>~',
        p_comment_text       => '$$$ [HF] Retaining this option for EA1. Would like customer feedback before removing.'); */
    --
    l_property_id := 836;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ANIMATION_ON_DISPLAY',
        p_prompt             => 'On Display',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ANIMATION_ON_DISPLAY',
        p_display_group_name => 'ANIMATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select the type of animation used when initially displaying the chart.</p>
        <p>The options <strong>Alpha Fade</strong> and <strong>Zoom</strong> do not apply to Dial charts.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~Apply the Oracle JET defined default animation settings for the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Alpha Fade',
        p_return_value  => 'alphaFade',
        p_help_text     => q'~Fade in the chart when initially displayed. This setting does not apply to Gantt charts.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Zoom',
        p_return_value  => 'zoom',
        p_help_text     => q'~Zoom in to the chart when initially displayed. This setting does not apply to Gantt charts.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none',
        p_help_text     => q'~No animation applied to the chart when initially displayed.~' );
    --
    l_property_id := 837;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ANIMATION_ON_DATA_CHANGE',
        p_prompt             => 'On Data Change',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ANIMATION_ON_DATA_CHANGE',
        p_display_group_name => 'ANIMATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select whether animation is shown when data is changed on the chart. A data change can occur if the chart gets automatically refreshed, if hide and show behavior is performed when clicking on a legend item, or when chart data is programmatically updated via some custom JavaScript code or a Dynamic Action.</p>
        <p>The options <strong>Slide to Left</strong> and <strong>Slide to Right</strong> do not apply to Dial charts</p>.  ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~Apply the Oracle JET defined default animation settings for the chart.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide to Left',
        p_return_value  => 'slideToLeft',
        p_help_text     => q'~The data elements slide to the left when data is changed. This setting does not apply to Gantt charts.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Slide to Right',
        p_return_value  => 'slideToRight',
        p_help_text     => q'~The data elements slide to the right when data is changed. This setting does not apply to Gantt charts.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none' ,
        p_help_text     => q'~No animation is applied to the chart when data is changed.~' );
    --
    -- Gauge Group Settings
    l_property_id := 838;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_DIAL_INDICATOR',
        p_prompt             => 'Needle',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DIAL_INDICATOR',
        p_display_group_name => 'GAUGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the needle indicator to be displayed on the dial gauge chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Alta',
        p_return_value  => 'needleAlta' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Light',
        p_return_value  => 'needleLight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dark',
        p_return_value  => 'needleDark' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Antique',
        p_return_value  => 'needleAntique' );
    --
    l_property_id := 839;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_DIAL_BACKGROUND',
        p_prompt             => 'Dial Background',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DIAL_BACKGROUND',
        p_display_group_name => 'GAUGE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the background to be displayed on the dial gauge chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circle Alta',
        p_return_value  => 'circleAlta' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dome Alta',
        p_return_value  => 'domeAlta' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rectangle Alta',
        p_return_value  => 'rectangleAlta' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circle Light',
        p_return_value  => 'circleLight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dome Light',
        p_return_value  => 'domeLight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rectangle Light',
        p_return_value  => 'rectangleLight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circle Dark',
        p_return_value  => 'circleDark' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dome Dark',
        p_return_value  => 'domeDark' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rectangle Dark',
        p_return_value  => 'rectangleDark' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circle Antique',
        p_return_value  => 'circleAntique' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dome Antique',
        p_return_value  => 'domeAntique' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rectangle Antique',
        p_return_value  => 'rectangleAntique' );
    -- Data Cursor Group Settings
    l_property_id := 840;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_DATA_CURSOR',
        p_prompt             => 'Cursor',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_CURSOR',
        p_display_group_name => 'DATA_CURSOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~<p>Select whether the data cursor is enabled on the chart.
        Data cursor is a useful alternative to tooltips when the data items are difficult to navigate to, especially on touch devices.<p/>
        <p>If set to <strong>Automatic</strong>, the data cursor is shown only for line or area charts on touch devices.<p/>
        <p>Note - The data cursor is not shown when the tooltip is null, and it is not supported on polar charts.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' ,
        p_help_text     => q'~Apply the Oracle JET defined default data cursor display for the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'on' ,
        p_help_text     => q'~The data cursor is always displayed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off',
        p_help_text     => q'~The data cursor is not displayed.~' );
    --
    l_property_id := 841;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_DATA_CURSOR_BEHAVIOR',
        p_prompt             => 'Behavior',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATA_CURSOR_BEHAVIOR',
        p_display_group_name => 'DATA_CURSOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the behavior of the data cursor on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~Apply the Oracle JET defined default data cursor behavior for the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Smooth',
        p_return_value  => 'smooth',
        p_help_text     => q'~<p>The data cursor follows the mouse/touch movement smoothly, displaying the tooltip whenever the data cursor is hovering over any part of a data element, and not just specific data points. An indicator identifies the currently selected data element.</p>
        <p>Note - Set <strong>Cursor</strong> to <strong>Yes</strong> for this visualization to work fully.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Snap',
        p_return_value  => 'snap',
        p_help_text     => q'~<p>The data cursor snaps (jumps) to a data element when a mouse/touch movement occurs over the chart, displaying the tooltip whenever the data cursor is hovering over a data element. An indicator identifies the currently selected data element.</p>
        <p>Note - Set <strong>Cursor</strong> to <strong>Yes</strong> for this visualization to work fully.</p>~' );
    --
    l_property_id := 842;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_HOVER_BEHAVIOR',
        p_prompt                     => 'Dim On Hover',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'dim',
        p_prop_type_yesno_override_n => 'none',
        p_db_column                  => 'HOVER_BEHAVIOR',
        p_display_group_name         => 'DATA_CURSOR',
        p_help_text                  => q'~Select the behavior to be applied when hovering over data items on the chart.<p/>
        Select <strong>Yes</strong> to dim all data items when not currently hovered over, and highlight only the current data item hovered over.~' );
    --
    -- Settings Group
    l_property_id := 843;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_TIME_AXIS_TYPE',
        p_prompt             => 'Time Axis Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TIME_AXIS_TYPE',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type of time axis to display on the chart. This setting will automatically render the chart data in chronological order, and should not be used if you require your data to be rendered in reverse chronological order.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto',
        p_help_text     => q'~Apply the Oracle JET defined default time axis setting for the chart, based on the data being rendered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Disabled',
        p_return_value  => 'disabled',
        p_help_text     => q'~Apply no time axis type setting to the chart.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Enabled',
        p_return_value  => 'enabled',
        p_help_text     => q'~Apply a time axis type setting to the chart.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Mixed Frequency',
        p_return_value  => 'mixedFrequency',
        p_help_text     => q'~The time values displayed on the chart axis in mixed frequency. This setting will only work for Scatter and Bubble charts, and stacking is not supported.~');
    -- new in 1.2.0
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Skip Gaps',
        p_return_value  => 'skipGaps',
        p_help_text     => q'~The time values displayed on the chart axis will be rendered at a regular interval regardless of any time gaps that may exist in the data.~');
    --
    l_property_id := 873;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SORT_ORDER',
        p_prompt             => 'Sort Order',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SORTING',
        p_display_group_name => 'MULTI_SERIES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart sort order of the data on a multi-series chart, based on either the value or label of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Value - Ascending',
        p_return_value  => 'value-asc',
        p_help_text     => q'~Set to order the chart based on the values in ascending order (1, 2, 3, ...). This setting should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Value - Descending',
        p_return_value  => 'value-desc',
        p_help_text     => q'~Set to order the chart based on the values in descending order (10, 9, 8, ...). This setting should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label - Ascending',
        p_return_value  => 'label-asc',
        p_help_text     => q'~Set to order the chart based on the x-axis labels in ascending order. This is the default sort order. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label - Descending',
        p_return_value  => 'label-desc',
        p_help_text     => q'~Set to order the chart based on the x-axis labels in descending order. ~' );
    --
    l_property_id := 844;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_ZOOM_AND_SCROLL',
        p_prompt             => 'Zoom and Scroll',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ZOOM_AND_SCROLL',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the zoom and scroll behavior of the chart.
        Zoom and scroll allows the end user to use gestures, such as dragging on the plot area, using the mouse wheel, or two-finger pinches, to resize the values displayed and navigate within the chart to display different chart values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off',
        p_help_text     => q'~Zoom and scroll are disabled for the chart.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delayed',
        p_return_value  => 'delayed',
        p_help_text     => q'~The change to the data display will wait until the zoom/scroll action is done.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delayed Scroll Only',
        p_return_value  => 'delayedScrollOnly',
        p_help_text     => q'~The change to the data display will wait until the scroll action is done.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Live',
        p_return_value  => 'live',
        p_help_text     => q'~Live behavior means that the chart will be updated continuously as it is being manipulated.
        For large data sets or slow client environments, it is recommended to select <strong>Delayed</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Live Scroll Only',
        p_return_value  => 'liveScrollOnly',
        p_help_text     => q'~Live Scroll Only behavior means that the chart will be updated continuously as it is being scrolled.
        For large data sets or slow client environments, consider selecting <strong>Delayed Scroll Only</strong>.~' );
    --
    l_property_id := 845;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PIE_OTHER_THRESHOLD',
        p_prompt             => 'Pie Chart Other Threshold',
        p_property_type      => 'NUMBER',
        p_db_column          => 'PIE_OTHER_THRESHOLD',
        p_display_length     => 5,
        p_min_value          => 0,
        p_max_value          => 1,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~<p>Enter the fraction of the whole pie chart, below which the slices are aggregaged into an "Other" slice.  Valid values range from 0 (default) to 1</p>
        <p>For example, a value of 0.15 would cause all slices which are less than 15% of the pie to be aggregated into the "Other" slice.</p>~' );
    --
    -- Value Group Settings
    l_property_id := 846;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_MIN',
        p_prompt             => 'Minimium',
        p_property_type      => 'INTEGER',
        p_db_column          => 'VALUE_MIN',
        p_display_length     => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Specify a minimum value for the chart.~' );
    --
    l_property_id := 831;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_TEXT_TYPE',
        p_prompt             => 'Tick Label Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TEXT_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify how the tick labels should be displayed on the chart, either as a number or a percentage of the total value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Number',
        p_return_value  => 'number',
        p_help_text     => q'~<p>The tick labels will display as values between the minimum and maximum values defined on the chart.</p>
        <p>Note: the <strong>Format Type</strong> attribute should only be used to apply custom decimal or currency formatting to the tick labels and metric label displayed on the chart.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent',
        p_return_value  => 'percent',
        p_help_text     => q'~<p>The tick labels will display as values between 0% and 100%.</p>
        <p>Note: When <strong>Format Type</strong> is set to <strong>Percent</strong>, the values on the chart are multiplied by 100 to format as a percent. If you wish to use the Format Type attribute, ensure that Tick Label Type is set to number.</p>~' );

    --
    l_property_id := 847;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_FORMAT_TYPE',
        p_prompt             => 'Format Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_FORMAT_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select a numeric, date and/or time type of formatting to be applied to the value on the chart.  For date and/or time formatting, ensure the chart attribute <strong>Time Axis Type</strong> is set to one of the following values, depending on your chart data: <strong>Enabled</strong>, <strong>Mixed Frequency</strong>, or <strong>Skip Gaps</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date - Short',
        p_return_value  => 'date-short',
        p_help_text     => q'~When a date is formatted as short, the formatted date will contain year, numeric-month (MM/M), day. For example, 1/6/16.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date - Medium',
        p_return_value  => 'date-medium',
        p_help_text     => q'~When a date is formatted as medium, the formatted date will contain year, abbreviated-month (MMM), day. For example, Jan 6, 2016.
        For some languages, abbreviated months are not used; in that case, the medium format will contain the numeric month (MM/M).~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date - Long',
        p_return_value  => 'date-long',
        p_help_text     => q'~When a date is formatted as long, the formatted date will contain year, long-month, day. For example, January 6, 2016.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Date - Full',
        p_return_value  => 'date-full',
        p_help_text     => q'~When a date is formatted as full, the formatted date will contain long-weekday (EEEE), year (y), long-month (MMMM), day (d). For example, Wednesday, January 6, 2016.
        For some languages, long months are not used; for example, in Japanese the numeric month is used in patterns.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Time - Short',
        p_return_value  => 'time-short',
        p_help_text     => q'~When a time is formatted as short, the formatted time will contain hour, minute. For example, 7:30 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Time - Medium',
        p_return_value  => 'time-medium',
        p_help_text     => q'~When a time is formatted as medium, the formatted time will contain hour, minute, second. For example, 7:30:21 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Time - Long',
        p_return_value  => 'time-long',
        p_help_text     => q'~When a time is formatted as long, the formatted time will contain hour, minute, second, and zone (z). For example, 7:30:21 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Time - Full',
        p_return_value  => 'time-full',
        p_help_text     => q'~When a time is formatted as full, the formatted time will contain hour (h/H), minute (mm), second (ss), and zone (zzzz). For example, 7 h 30 min 21 s.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DateTime - Short',
        p_return_value  => 'datetime-short',
        p_help_text     => q'~When a date-time is formatted as short, the formatted date-time will contain year, numeric-month (MM/M), day, hour, minute. For example, 1/6/16 7:30 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DateTime - Medium',
        p_return_value  => 'datetime-medium',
        p_help_text     => q'~When a date-time is formatted as medium, the formatted date-time will contain year, abbreviated-month (MMM), day, hour, minute, second, and zone (z). For example, Jan 6, 2016 7:30:21 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DateTime - Long',
        p_return_value  => 'datetime-long',
        p_help_text     => q'~When a date-time is formatted as long, the formatted date-time will contain year, long-month, day, hour, minute, second, and zone (z). For example, Jan 6, 2016 7:30:21 AM.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'DateTime - Full',
        p_return_value  => 'datetime-full',
        p_help_text     => q'~When a date-time is formatted as full, the formatted date-time will contain long-weekday (EEEE), year (y), long-month (MMMM), day (d), hour (h/H), minute (mm), second (ss), and zone (zzzz). For example, Wednesday, January 6, 2016 7 h 30 min 21 s.
        The hour format depends on whether the application language uses 12-hour time or not.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Decimal',
        p_return_value  => 'decimal',
        p_help_text     => q'~When a number is formatted as a decimal, the decimal character is replaced with the most appropriate symbol for the locale. In English this is a decimal point ("."), while in many locales it is a decimal comma (",").~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Currency',
        p_return_value  => 'currency',
        p_help_text     => q'~When a number is formatted as currency, the Currency property is required to be set to specify the currency that will be used when formatting the number.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percent',
        p_return_value  => 'percent',
        p_help_text     => q'~When a number is formatted as a percent, the values on the chart are multiplied by 100 to format as a percent.~');
    --
    l_property_id := 848;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_CURRENCY',
        p_prompt             => 'Currency',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE_CURRENCY',
        p_display_length     => 10,
        p_max_length         => 128,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the currency that will be used when formatting the value on the chart.
        The value should be a ISO 4217 alphabetic currency code. If the format type is set to currency, and no currency is defined in the <strong>Currency</strong> property, the currency will be automatically derived from the application language when the chart is rendered.~' );
    --
    l_property_id := 849;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_NUMERIC_PATTERN',
        p_prompt             => 'Pattern',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE_NUMERIC_PATTERN',
        p_display_length     => 10,
        p_max_length         => 30,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter an optional localized numeric or date pattern, where the characters used in the pattern conform to Unicode CLDR for date time formats.
        When present, this will override the Format Type selected.~',
        p_examples           => q'~
<dl><dt>Numeric Pattern to represent temperatures in farenheit, for example 15&deg;F:</dt>
<dd><pre>
#&deg;F
</pre></dd>
<dt>Numeric pattern to represent numbers in specific format, for example, 12,30,00:</dt>
<dd><pre>
##,##,##
</pre></dd>
<dt>Numeric pattern to represent numbers in millimeters:</dt>
<dd><pre>
# mm
</pre></dd>
<dt>Date pattern to represent date as Month Year, for example, Jul 2016:</dt>
<dd><pre>
MMM yyyy
</pre></dd>
<dt>Date pattern to represent date as Month, for example, July:</dt>
<dd><pre>
MMMM
</pre></dd>
</dl>~' );
        
    --
    l_property_id := 850;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_FORMAT_SCALING',
        p_prompt             => 'Format Scaling',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_FORMAT_SCALING',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the scaling behavior of the value on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Thousand',
        p_return_value  => 'thousand');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Million',
        p_return_value  => 'million');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Billion',
        p_return_value  => 'billion');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Trillion',
        p_return_value  => 'trillion');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Quadrillion',
        p_return_value  => 'quadrillion');
    --
    -- Tooltip Group Settings
    l_property_id := 851;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_TOOLTIP',
        p_prompt             => 'Show',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TOOLTIP_RENDERED',
        p_display_group_name => 'TOOLTIP',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether a tooltip should be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'Y');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'N');
    --
        store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Custom',
        p_return_value  => 'C');
    --
    l_property_id := 852;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_SERIES_NAME',
        p_prompt             => 'Show Series Name',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_SERIES_NAME',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether the series name should be displayed in the tooltip rendered on the chart.~' );
    --
    l_property_id := 853;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SHOW_GROUP_NAME',
        p_prompt             => 'Show Group Name',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_GROUP_NAME',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether the group name should be displayed in the tooltip rendered on the chart.~' );
    --
    l_property_id := 854;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_VALUE',
        p_prompt             => 'Show Value',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_VALUE',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display values in the tooltip on your chart. Values are derived from your chart query and display next to your chart data.~' );
    --
    l_property_id := 855;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SHOW_LABEL',
        p_prompt             => 'Show Label',
        p_property_type      => 'YES NO',
        p_db_column          => 'SHOW_LABEL',
        p_display_group_name => 'TOOLTIP',
        p_help_text          => q'~Specify whether to display labels in the tooltip on your chart. Labels are derived from your chart query and display along a chart axis.~' );
    --
    l_property_id := 856;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_TOOLTIP',
        p_prompt             => 'Custom Tooltip',
        p_property_type      => 'HTML',
        p_db_column          => 'CUSTOM_TOOLTIP',
        p_display_length     => 255,
        p_max_length         => 255,
        p_display_group_name => 'TOOLTIP',
        p_is_translatable    => true,
        p_help_text          => q'~Enter an optional custom tooltip to be rendered on the chart.~' );
    --
    l_property_id := 857;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'LEGEND_RENDERED',
        p_prompt                     => 'Show',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'LEGEND_RENDERED',
        p_display_group_name         => 'LEGEND',
        p_help_text                  => q'~Specify whether a legend should be rendered on the chart.~' );
    --
    l_property_id := 858;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LEGEND_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LEGEND_POSITION',
        p_display_group_name => 'LEGEND',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of a legend on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'end');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'top');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom',
        p_return_value  => 'bottom');
    --
    l_property_id := 859;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'HIDE_AND_SHOW_BEHAVIOR',
        p_prompt             => 'Hide and Show Behavior',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'HIDE_AND_SHOW_BEHAVIOR',
        p_display_group_name => 'LEGEND',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the hide and show behavior that is performed when clicking on a legend item.
        For example, deselecting a legend item will hide its associated data series on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none',
        p_help_text     => q'~ The chart will not enable the hide and show behavior.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Rescale',
        p_return_value  => 'withRescale',
        p_help_text     => q'~ The chart axes will rescale as the minimum and maximum values of the visible data increase or decrease. This is useful for series with largely varying values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No Rescaling',
        p_return_value  => 'withoutRescale',
        p_help_text     => q'~ The chart axes will not rescale. This is useful to keep the user in context.~' );
    --
    l_property_id := 860;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'OVERVIEW_RENDERED',
        p_prompt                     => 'Show',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'OVERVIEW_RENDERED',
        p_display_group_name         => 'OVERVIEW',
        p_help_text                  => q'~<p>Specify whether an overview scrollbar should be rendered on the chart.
        Currently this option is only supported for vertical bar, line, area, stock, and combination charts.</p>
        <p>Note - The <strong>Zoom and Scroll</strong> option must be enabled for the overview scrollbar to be displayed.</p>~' );
    --
    l_property_id := 861;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OVERVIEW_HEIGHT',
        p_prompt             => 'Height',
        p_property_type      => 'TEXT',
        p_db_column          => 'OVERVIEW_HEIGHT',
        p_display_length     => 5,
        p_max_length         => 5,
        p_display_group_name => 'OVERVIEW',
        p_help_text          => q'~Enter the height of the overview scrollbar, in pixels (for example 50px) or percent (for example 15%), to be rendered on the chart.~' );
    --
    l_property_id := 862;
        store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_MAX_WIDTH',
        p_prompt             => 'Maximum Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'WIDTH',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'LAYOUT',
        p_help_text          => q'~<p>Enter the maximum width of the chart in pixels. The maximum width defines a fixed width for your chart region.
Alternatively, to enable automatic resizing of the chart width, leave this item empty. The width is then automatically set to 100% of the region.</p>
<p>By default, a chart created on a page using the jQuery Mobile Smartphone user interface has no value set for width and correctly resizes to fit the device it is being rendered on.</p>~' );
    --
    l_property_id := 863;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_ZOOM_DIRECTION',
        p_prompt             => 'Zoom Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ZOOM_DIRECTION',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the zoom direction of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Both Axes',
        p_return_value  => 'auto',
        p_help_text     => q'~Zooms in both x and y axes direction.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'X-Axis',
        p_return_value  => 'x',
        p_help_text     => q'~Zooms only in the x-axis direction.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Y-Axis',
        p_return_value  => 'y',
        p_help_text     => q'~Zooms only in the y-axis direction.~' );
    --
    l_property_id := 872;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_INITIAL_ZOOMING',
        p_prompt             => 'Initial Zooming',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'INITIAL_ZOOMING',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the initial zooming of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'First',
        p_return_value  => 'first',
        p_help_text     => q'~Initially zoom to the first data points that can fit in the chart plot area.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Last',
        p_return_value  => 'last',
        p_help_text     => q'~Initially zoom to the last data points that can fit in the chart plot area.~');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none',
        p_help_text     => q'~To disable initial zooming.~' );
    --
    l_property_id := 864;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_COMBO',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type. You can also create a chart combining different types of series on the same data plot.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar Range',
        p_return_value  => 'barRange' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area Range',
        p_return_value  => 'areaRange' );
    --
    l_property_id := 869;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_Z_COLUMN_NAME',
        p_prompt             => 'Z',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_Z_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the z value on this chart.  The z value defines the bubble radius for a bubble chart, the width of a box plot item, and the bar width for a bar or combination chart. ~' );
    --
    l_property_id := 870;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINK_TARGET_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LINK_TARGET_TYPE',
        p_display_group_name => 'LINK',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the action to be performed when the chart is clicked.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in this Application',
        p_return_value  => 'REDIRECT_PAGE',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Redirect to a page in the current application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to Page in a different Application',
        p_return_value  => 'REDIRECT_APP',
        p_help_text     => q'~<p>Redirect to a page in a different application, with optional additional attributes for resetting pagination, setting the request value, clearing cache and setting item values, on the target page.</p>
<p>Note: Redirecting to a page in different application relies on deep linking being enabled in the target application. To enable deep linking, go to the application's <em>Security</em> attributes and enable <em>Deep Linking</em>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to URL',
        p_return_value  => 'REDIRECT_URL',
        p_help_text     => q'~Redirect to the target URL you specify.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Redirect to URL returned by First Column',
        p_return_value  => 'DEPRECATED_LINK_COLUMN',
        p_is_deprecated => 'Y',
        p_help_text     => q'~Redirect to the target URL returned by the first column of the SQL query.~' );
    --
    l_property_id := 886;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SERIES_NAME_COLUMN_NAME',
        p_prompt             => 'Series Name',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'SERIES_NAME_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining your multi-series dynamic query.~' );
    --
    l_property_id := 887;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AGGREGATE_FUNCTION',
        p_prompt             => 'Value Aggregation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AGGREGATE_FUNCTION',
        p_display_group_name => 'COLUMN_MAPPING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to aggregate the associated chart values column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Count',
        p_return_value  => 'COUNT',
        p_help_text     => q'~Returns the number of records.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Sum',
        p_return_value  => 'SUM',
        p_help_text     => q'~Returns the total of the value column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Average',
        p_return_value  => 'AVG',
        p_help_text     => q'~Returns the average of the value column.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Median',
        p_return_value  => 'MEDIAN',
        p_help_text     => q'~Returns the the middle number, ignoring nulls. This aggregation is best suited to a continuous distribution model as it returns the number in the center.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Minimum',
        p_return_value  => 'MIN',
        p_help_text     => q'~Returns the minimum value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Maximum',
        p_return_value  => 'MAX',
        p_help_text     => q'~Returns the maximum value.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Count Distinct',
        p_return_value  => 'COUNT_DISTINCT',
        p_help_text     => q'~Returns the exact number of distinct values.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Approximate Count Distinct',
        p_return_value  => 'APPROX_COUNT_DISTINCT',
        p_help_text     => q'~Returns the approximate number of distinct values. This aggregation is significantly faster than <em>Count Distinct</em> when processing large amounts of data.~' );
    --
    l_property_id := 888;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_LOW_COLUMN_NAME',
        p_prompt             => 'Low',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_LOW_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the low value on this chart.~' );
    --
    l_property_id := 889;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_HIGH_COLUMN_NAME',
        p_prompt             => 'High',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_HIGH_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the high value on this chart.~' );
    --
    l_property_id := 890;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_OPEN_COLUMN_NAME',
        p_prompt             => 'Open',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_OPEN_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the opening value on this chart.~' );
    --
    l_property_id := 891;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_CLOSE_COLUMN_NAME',
        p_prompt             => 'Close',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_CLOSE_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the closing value on this chart.~' );
    --
    l_property_id := 892;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_VOLUME_COLUMN_NAME',
        p_prompt             => 'Volume',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_VOLUME_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the volume value on this chart. When values are provided, the volume is displayed on the y2 axis.~' );
    --
    l_property_id := 893;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_X_COLUMN_NAME',
        p_prompt             => 'X',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_X_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the x value on this chart.~' );     --
    --
    l_property_id := 894;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_Y_COLUMN_NAME',
        p_prompt             => 'Y',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_Y_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the y value on this chart.~' );
    --
    l_property_id := 895;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_TARGET_VALUE',
        p_prompt             => 'Target Value',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_TARGET_VALUE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the target value on this chart. When set, the value attribute defines the filled area within the slice and this represents the value of the whole slice. ~' );
    --
    l_property_id := 871;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_MIN_VALUE',
        p_prompt             => 'Minimum Value',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_MIN_VALUE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the minimum value on this chart.~' );
    --
    l_property_id := 896;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_MAX_VALUE',
        p_prompt             => 'Maximum Value',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'ITEMS_MAX_VALUE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the maximum value on this chart.~' );
    --
    l_property_id := 897;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GROUP_NAME_COLUMN_NAME',
        p_prompt             => 'Legend Tooltip',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'GROUP_NAME_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining a short descriptive custom tooltip on the series name(s) on the chart legend. For a Box Plot chart, the column should not match the selected Value column mapping. Selection of a column that matches the Value column mapping will result in no legend tooltip being rendered on the chart.~' );
    --
    l_property_id := 898;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'GROUP_SHORT_DESC_COLUMN_NAME',
        p_prompt             => 'Label Tooltip',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'GROUP_SHORT_DESC_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining a short descriptive custom tooltip on the x axis label(s) of the chart. For a Box Plot chart, the column should not match the selected Value column mapping. Selection of a column that matches the Value column mapping will result in no label tooltip being rendered on the chart.~' );
    --
    l_property_id := 899;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_LABEL_COLUMN_NAME',
        p_prompt             => 'Label',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'ITEMS_LABEL_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the label(s) of the x-axis on the chart. For a Stock chart, the column should be of data type Date/Timestamp, to represent the stock information on a time axis.~' );
    --
    l_property_id := 900;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_SHORT_DESC_COLUMN_NAME',
        p_prompt             => 'Custom Tooltip',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'ITEMS_SHORT_DESC_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining a short descriptive custom tooltip on the data points of the chart. To render a tooltip on chart data points, ensure the chart tooltip attribute <strong>Show</strong> is set to <strong>Yes</strong>. For a Box Plot chart, the column should not match the selected Value column mapping. Selection of a column that matches the Value column mapping will result in no custom tooltip being rendered on the chart.~' );
    --
    l_property_id := 901;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_COLOR',
        p_prompt             => 'Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color to be displayed for the data items associated with this chart series. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
    l_property_id := 902;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINE_STYLE',
        p_prompt             => 'Style',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LINE_STYLE',
        p_display_group_name => 'LINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the style of the line to be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dotted',
        p_return_value  => 'dotted' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Dashed',
        p_return_value  => 'dashed' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Solid',
        p_return_value  => 'solid' );
    --
    l_property_id := 903;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINE_WIDTH',
        p_prompt             => 'Width',
        p_property_type      => 'INTEGER',
        p_db_column          => 'LINE_WIDTH',
        p_display_group_name => 'LINE',
        p_unit               => c_unit_pixels,
        p_help_text          => q'~Specify the width of the line to be rendered on the chart.~' );
    --
    l_property_id := 904;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'LINE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LINE_TYPE',
        p_display_group_name => 'LINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify the type of line to be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Centered Stepped',
        p_return_value  => 'centeredStepped' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Curved',
        p_return_value  => 'curved' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Centered Segmented',
        p_return_value  => 'centeredSegmented' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Stepped',
        p_return_value  => 'stepped' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Segmented',
        p_return_value  => 'segmented' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Straight',
        p_return_value  => 'straight' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none' );
    --
    l_property_id := 905;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MARKER_RENDERED',
        p_prompt             => 'Show',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MARKER_RENDERED',
        p_display_group_name => 'MARKER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether a marker should be rendered on the data items of the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'on' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off' );
    --
    l_property_id := 906;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MARKER_SHAPE',
        p_prompt             => 'Shape',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MARKER_SHAPE',
        p_display_group_name => 'MARKER',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the shape of the marker to be rendered on the data items of the chart. Only <strong>auto</strong> is supported for range series. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Circle',
        p_return_value  => 'circle' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Diamond',
        p_return_value  => 'diamond' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Human',
        p_return_value  => 'human' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Plus',
        p_return_value  => 'plus' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Square',
        p_return_value  => 'square' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Star',
        p_return_value  => 'star' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Triangle Down',
        p_return_value  => 'triangleDown' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Triangle Up',
        p_return_value  => 'triangleUp' );
    --
    l_property_id := 907;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'ASSIGNED_TO_Y2',
        p_prompt                     => 'Assigned To Y2 Axis',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'ASSIGNED_TO_Y2',
        p_display_group_name         => 'APPEARANCE',
        p_help_text                  => q'~Specify whether the current series is assigned to the Y2 axis rendered on the chart.~' );
    --
    l_property_id := 908;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_LABEL_RENDERED',
        p_prompt             => 'Show',
        p_property_type      => 'YES NO',
        p_db_column          => 'ITEMS_LABEL_RENDERED',
        p_display_group_name => 'LABEL',
        p_help_text          => q'~Specify whether the label(s) should be rendered on the chart. This setting applies to the visibility of the metric value on a Dial chart. ~' );
    --
    l_property_id := 909;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_LABEL_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ITEMS_LABEL_POSITION',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the label(s) to be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Center',
        p_return_value  => 'center' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside Slice',
        p_return_value  => 'outsideSlice' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Above Marker',
        p_return_value  => 'aboveMarker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Below Marker',
        p_return_value  => 'belowMarker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Before Marker',
        p_return_value  => 'beforeMarker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'After Marker',
        p_return_value  => 'afterMarker' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inside Bar Edge',
        p_return_value  => 'insideBarEdge' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside Bar Edge',
        p_return_value  => 'outsideBarEdge' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'None',
        p_return_value  => 'none' );
    --
    l_property_id := 910;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'ITEMS_LABEL_CSS_CLASSES',
        p_prompt                => 'CSS Styling',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'ITEMS_LABEL_CSS_CLASSES',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'LABEL',
        p_help_text             => q'~<p>Enter a CSS style string defining the style of the labels on this chart.</p>~' );
    --
    l_property_id := 912;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_SHOW_AXIS',
        p_prompt                     => 'Show Axis',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'IS_RENDERED',
        p_display_group_name         => 'IDENTIFICATION',
        p_help_text                  => q'~Specify whether the axis is rendered on the chart.~');
    --
    l_property_id := 913;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_MIN',
        p_prompt             => 'Minimum',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MIN',
        p_display_length     => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the minimum value of the axis. Defaults to null for automatic calculation based on the data.</p>~' );
    --
    l_property_id := 914;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_MAX',
        p_prompt             => 'Maximum',
        p_property_type      => 'INTEGER',
        p_db_column          => 'MAX',
        p_display_length     => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the maximum value of the axis. Defaults to null for automatic calculation based on the data.</p>~' );
    --
    l_property_id := 915;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'RELOAD_ON_SUBMIT',
        p_prompt             => 'Reload on Submit',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'RELOAD_ON_SUBMIT',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select when the page should be reloaded following a page submission.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always',
        p_return_value  => 'A',
        p_help_text     => 'Always reload the page to display errors and the success message.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Only for Success',
        p_return_value  => 'S',
        p_help_text     => 'Show errors dynamically without reloading page, but reload it after a successful processing.' );
    --
/* For Future if we support Single Page like apps behavior where we also return session state in the Ajax response
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'On Demand',
        p_return_value  => 'D' );
*/
    --
    l_property_id := 916;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PAGE_WARN_ON_UNSAVED_CHANGES',
        p_prompt             => 'Warn on Unsaved Changes',
        p_property_type      => 'YES NO',
        p_db_column          => 'WARN_ON_UNSAVED_CHANGES',
        p_display_group_name => 'NAVIGATION',
        p_help_text          => q'~Specify if the user is warned when trying to navigate away from the page, where the page contains unsaved changes. Page Items and Buttons also offer more granular control over when this check is performed, and what is included in it. For Buttons, you can specify if clicking the button will perform the check. For Page Items, you can specify if changes to the item are included, or ignored by the check (see the <em>Warn on Unsaved Changes</em> attribute for both).~' );
    --
    l_property_id := 917;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_BASELINE_SCALING',
        p_prompt             => 'Baseline Scaling',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'BASELINE_SCALING',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Minimum',
        p_return_value  => 'min');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Zero',
        p_return_value  => 'zero');
    --
    l_property_id := 918;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_STEP',
        p_prompt             => 'Step',
        p_property_type      => 'NUMBER',
        p_db_column          => 'STEP',
        p_display_length     => 10,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the increment between major tick marks. Defaults to null for automatic calculation based on the data. Only applies to time and numerical axes.~' );
    --
    l_property_id := 919;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'POSITION',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the label(s) to be rendered on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'start' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'end' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'top' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom',
        p_return_value  => 'bottom' );
    --
    l_property_id := 920;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MAJOR_TICK_RENDERED',
        p_prompt             => 'Show',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'MAJOR_TICK_RENDERED',
        p_display_group_name => 'MAJOR_TICKS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select whether the major tick marks are rendered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'on' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off' );
    --
    l_property_id := 921;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MIN_STEP',
        p_prompt             => 'Minimum Step',
        p_property_type      => 'NUMBER',
        p_db_column          => 'MIN_STEP',
        p_display_length     => 10,
        p_display_group_name => 'MAJOR_TICKS',
        p_help_text          => q'~Enter the minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures.~' );
    --
    l_property_id := 922;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'MINOR_TICK_RENDERED',
        p_prompt                     => 'Show',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'MINOR_TICK_RENDERED',
        p_display_group_name         => 'MINOR_TICKS',
        p_help_text                  => q'~Select whether the minor tick marks are rendered.~' );
    --
    l_property_id := 923;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'MINOR_STEP',
        p_prompt             => 'Step',
        p_property_type      => 'NUMBER',
        p_db_column          => 'MINOR_STEP',
        p_display_length     => 10,
        p_display_group_name => 'MINOR_TICKS',
        p_help_text          => q'~Enter the increment between minor tick marks. Defaults to null for automatic calculation based on the data. Only applies to numerical axes.~' );
    --
    l_property_id := 924;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'TICK_LABEL_RENDERED',
        p_prompt                     => 'Show',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'TICK_LABEL_RENDERED',
        p_display_group_name         => 'TICK_LABEL',
        p_help_text                  => q'~Specify whether the tick labels are rendered.~' );
    --
    l_property_id := 925;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'TICK_LABEL_ROTATION',
        p_prompt                     => 'Rotation',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'auto',
        p_prop_type_yesno_override_n => 'none',
        p_db_column                  => 'TICK_LABEL_ROTATION',
        p_display_group_name         => 'TICK_LABEL',
        p_help_text                  => q'~Specify whether the chart will automatically rotate the labels by 90 degrees in order to fit more labels on the axis.
        The rotation will only be applied to categorical labels for a horizontal axis.~' );
    --
    l_property_id := 926;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'TICK_LABEL_POSITION',
        p_prompt             => 'Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TICK_LABEL_POSITION',
        p_display_group_name => 'TICK_LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the tick labels relative to the plot area.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Outside',
        p_return_value  => 'outside' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inside',
        p_return_value  => 'inside' );
    --
    l_property_id := 927;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SPLIT_DUAL_Y',
        p_prompt             => 'Show',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SPLIT_DUAL_Y',
        p_display_group_name => 'DUAL_Y_AXES',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether the plot area is split into two sections, so that sets of data assigned to the different Y-axes appear in different parts of the plot area. Stock charts do not support <strong>No</strong>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Automatic',
        p_return_value  => 'auto' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Yes',
        p_return_value  => 'on' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'No',
        p_return_value  => 'off' );
    --
    l_property_id := 928;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SPLITTER_POSITION',
        p_prompt             => 'Splitter Position',
        p_property_type      => 'NUMBER',
        p_db_column          => 'SPLITTER_POSITION',
        p_display_length     => 10,
        p_min_value          => 0,
        p_max_value          => 1,
        p_display_group_name => 'DUAL_Y_AXES',
        p_help_text          => q'~In a split dual-Y chart, specify the fraction of the space that is given to the Y-axis subchart. Valid values are numbers from 0 to 1.~' );
    --
    l_property_id := 929;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PIE_SELECTION_EFFECT',
        p_prompt             => 'Pie Selection Effect',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'PIE_SELECTION_EFFECT',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the effect applied when a pie segment is selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Explode',
        p_return_value  => 'explode');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Highlight And Explode',
        p_return_value  => 'highlightAndExplode');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Highlight',
        p_return_value  => 'highlight');
    --
    l_property_id := 930;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STOCK_RENDER_AS',
        p_prompt             => 'Render As',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'STOCK_RENDER_AS',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the series type to be applied to the rendered stock chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Candlestick',
        p_return_value  => 'candlestick');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea');
    --
    l_property_id := 931;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REFRESH_INTERVAL',
        p_prompt             => 'Interval',
        p_property_type      => 'INTEGER',
        p_db_column          => 'AUTOMATIC_REFRESH_INTERVAL',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_seconds,
        p_display_group_name => 'AUTOMATIC_REFRESH',
        p_help_text          => q'~Enter the interval in seconds between chart updates. Very small updates intervals, such as 2 seconds, are discouraged since they may cause serious database performance issues.~' );

    -- End of JET Chart Attributes

    -- JET Chart Series Properties (863-910,932-)
    --
    l_property_id := 932;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_prompt             => 'Series Type Column Mapping',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'SERIES_TYPE_COLUMN_MAPPING',
        p_display_group_name => 'IDENTIFICATION',
        p_is_query_only      => true );
    --
    l_property_id := 934;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_RANGE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar Range',
        p_return_value  => 'barRange' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area Range',
        p_return_value  => 'areaRange' );
    --
    l_property_id := 935;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CUSTOM_COLUMN_NAME',
        p_prompt             => 'Custom Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'CUSTOM_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Specify the custom column name, which can be used for definining a custom tooltip, or database-based colors to be used for the chart elements. For a Box Plot chart, the column should not match the selected Value column mapping. Selection of a column that matches the Value column mapping will result in no custom column being used for the chart.~' );
    --
    l_property_id := 936;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_POLAR',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Scatter',
        p_return_value  => 'scatter' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bubble',
        p_return_value  => 'bubble' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar Range',
        p_return_value  => 'barRange' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area Range',
        p_return_value  => 'areaRange' );
    --
    l_property_id := 937;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_RADAR',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area Range',
        p_return_value  => 'areaRange' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line' );
    --
    l_property_id := 938;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FILTER_DATA_TYPE',
        p_prompt             => 'Filter Data Type',
        p_property_type      => 'HIDDEN',
        p_db_column          => 'FILTER_DATA_TYPE',
        p_max_length         => 255,
        p_display_group_name => 'COLUMN_FILTER',
        p_is_query_only      => true );
    --
    l_property_id := 939;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'AXIS_SCALING',
        p_prompt             => 'Scale',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SCALING',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the axis scale. Only applies to numerical axes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Linear',
        p_return_value  => 'linear');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Log',
        p_return_value  => 'log');
    --
    l_property_id := 940;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEM_WARN_ON_UNSAVED_CHANGES',
        p_prompt             => 'Warn on Unsaved Changes',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'WARN_ON_UNSAVED_CHANGES',
        p_display_group_name => 'ADVANCED',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify if the page item is included in the unsaved changes check, which warns the user when they try to navigate away from the page, and where the page contains unsaved changes. Some items may not need to be checked (for example they are not based on a database column, like a search item), so can be set to be ignored.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Ignore',
        p_return_value  => 'I',
        p_help_text     => q'~Changes to the item are ignored by the unsaved changes check.~' );
    --
    l_property_id := 941;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'BUTTON_WARN_ON_UNSAVED_CHANGES',
        p_prompt             => 'Warn on Unsaved Changes',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'WARN_ON_UNSAVED_CHANGES',
        p_display_group_name => 'BEHAVIOR',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify if the user is warned when they try to navigate away from the page by clicking the button, and where the page contains unsaved changes.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Do Not Check',
        p_return_value  => 'I',
        p_help_text     => q'~The unsaved changes check will not be performed when the button is clicked. This setting should be used for Cancel, Delete and Apply Changes buttons.~' );
    --
    l_property_id := 942;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INLINE_HELP_TEXT',
        p_prompt             => 'Inline Help Text',
        p_property_type      => 'HTML',
        p_db_column          => 'INLINE_HELP_TEXT',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'HELP',
        p_is_translatable    => true,
        p_help_text          => q'~Enter inline help text for this item. The help text is being displayed immediately with the item and may be used to provide field level context sensitive help.~' );
    --
    l_property_id := 943;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLUGIN_INIT_JAVASCRIPT_CODE',
        p_prompt             => 'JavaScript Initialization Code',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'PLUGIN_INIT_JAVASCRIPT_CODE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'ADVANCED',
        p_is_translatable    => false,
        p_help_text          => q'~<p>Enter JavaScript code which allows a developer to configure ???.</p>~' );
    --
    l_property_id := 944;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'WHEN_COLUMNS',
        p_prompt                   => 'Column(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'TRIGGERING_ELEMENT',
        p_display_length           => 100,
        p_max_length               => 4000,
        p_display_group_name       => 'WHEN',
        p_lov_component_type_scope => 'COLUMN',
        p_help_text                => q'~Enter column, or columns to trigger the dynamic action.
For multiple columns, separate each item name with a comma.
You can type in the name or pick from the list of available columns.
If you pick from the list and there is already text entered, a comma is placed at the end of the existing text, followed by the column name returned from the list.~' );
    --
    l_property_id := 945;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_CONDITION_ELEMENT_TYPE',
        p_prompt             => 'Component Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'CONDITION_ELEMENT_TYPE',
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => 'Select whether an <em>Item</em> or <em>Column</em> is used in this condition.' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM' );
    --
	store_property_lov_values (
		p_property_id   => l_property_id,
		p_display_value => 'Column',
		p_return_value  => 'COLUMN' );
	--
	l_property_id := 946;
	store_property (
		p_id 				 	   => l_property_id,
		p_name 				  	   => 'JS_CONDITION_ITEM_WHEN_IG',
		p_prompt  			 	   => 'Item',
		p_property_type 	   	   => 'ITEM',
		p_db_column  			   => 'CONDITION_ELEMENT',
		p_display_length  		   => 60,
		p_max_length  			   => 4000,
		p_display_group_name  	   => 'CLIENT_SIDE_CONDITION',
		p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
		p_help_text  			   => 'Enter the page item used in this condition. You can type in the name or pick from the list of available items.' );
	--
	l_property_id := 947;
	store_property (
		p_id 				 	   => l_property_id,
		p_name 				  	   => 'JS_CONDITION_COLUMN_WHEN_IG',
		p_prompt  			 	   => 'Column',
		p_property_type 	   	   => 'COLUMN',
		p_db_column  			   => 'CONDITION_ELEMENT',
        p_column_data_types        => 'VARCHAR2',
        p_display_length  		   => 60,
		p_max_length  			   => 4000,
		p_display_group_name  	   => 'CLIENT_SIDE_CONDITION',
		p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
		p_help_text  			   => q'~<p>Select the column used in this condition.</p>
<p>Note: In the majority of cases this should be the column specified above, in the <em>When Column(s)</em>,
and is therefore defaulted to this. However you may want to base the condition on a different column,
for example with an Interactive Grid based on the EMP table, if you want to fire a dynamic action
whenever <code>SAL</code> changes but only if the <code>JOB</code> equals <em>SALESMAN</em>, then you would change this attribute to <code>JOB</code>.</p>~' );
	--
	l_property_id := 948;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'AFFECTED_COLUMNS',
        p_prompt                   => 'Column(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'AFFECTED_ELEMENTS',
        p_display_length           => 100,
        p_max_length               => 4000,
        p_display_group_name       => 'AFFECTED_ELEMENTS',
		p_lov_component_type_scope => 'COLUMN',
        p_help_text                => q'~Enter one or more columns to be affected by this action.
For multiple columns, separate each column name with a comma.
<p>You can type in the name or pick from the list of available columns.
If you pick from the list and there is already text entered, then a comma is placed at the end of the existing text, followed by the column name returned from the list.~' );
	--
	l_property_id := 949;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'IG_REGION',
        p_prompt                   => 'Interactive Grid Region',
        p_property_type            => 'HIDDEN',
        p_db_column                => 'IG_REGION_ID',
        p_max_length               => 255,
        p_display_group_name       => 'IDENTIFICATION',
        p_is_query_only            => true,
        p_lov_type                 => 'COMPONENT',
        p_lov_component_type_id    => c_comp_type_region,
        p_lov_component_type_scope => 'PAGE_AND_GLOBAL' );
	--
	l_property_id := 950;
	store_property (
		p_id 				 	   => l_property_id,
		p_name 				  	   => 'JS_CONDITION_ITEM',
		p_prompt  			 	   => 'Item',
		p_property_type 	   	   => 'ITEM',
		p_db_column  			   => 'CONDITION_ELEMENT',
		p_display_length  		   => 60,
		p_max_length  			   => 4000,
		p_display_group_name  	   => 'CLIENT_SIDE_CONDITION',
		p_lov_component_type_scope => 'PAGE_AND_GLOBAL',
		p_help_text  			   => q'~<p>Enter the page item used in this condition. You can type in the name or pick from the list of available items.</p>
<p>Note: In the majority of cases this should be the item specified above, in the <em>When Item(s)</em>,
and is therefore defaulted to this. However you may want to base the condition on a different page item,
for example with a form based on the EMP table, if you want to fire a dynamic action whenever <code>P2_SAL</code> changes but only if the
<code>P2_JOB</code> equals <em>SALESMAN</em>, then you would change this attribute to <code>P2_JOB</code>.</p>~' );
    --
    l_property_id := 951;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_CONDITION_WHEN_IG',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TRIGGERING_CONDITION_TYPE',
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify a client-side condition to control whether True or False actions fire. If the condition
                                  evaluates to True, then True actions fire, if the condition evaluates to False, then False actions fire.
                                  If no condition is specified, only True actions fire.~'  );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column = Value',
        p_return_value  => 'EQUALS',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column != Value',
        p_return_value  => 'NOT_EQUALS',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is not equal to the <em>Value</em> specified.~'  );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column > Value',
        p_return_value  => 'GREATER_THAN',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is greater than the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column >= Value',
        p_return_value  => 'GREATER_THAN_OR_EQUAL',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is greater than or equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column < Value',
        p_return_value  => 'LESS_THAN',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is less than the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column <= Value',
        p_return_value  => 'LESS_THAN_OR_EQUAL',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is less than or equal to the <em>Value</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column is null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the selected <em>Item</em> or <em>Column</em> is empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column is not null',
        p_return_value  => 'NOT_NULL',
        p_help_text     => q'~Checks if the selected <em>Item</em> or <em>Column</em> is not empty.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column is in list',
        p_return_value  => 'IN_LIST',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em> or <em>Column</em> is in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item / Column is not in list',
        p_return_value  => 'NOT_IN_LIST',
        p_help_text     => q'~Checks if the value of the selected <em>Item</em>  or <em>Column</em> is not in the <em>List</em> specified.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'JavaScript expression',
        p_return_value  => 'JAVASCRIPT_EXPRESSION',
        p_help_text     => q'~Evaluates the JavaScript Expression specified.~');
    --
    l_property_id := 952;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_COND_VALUE_WHEN_IG',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT',
        p_db_column          => 'TRIGGERING_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_help_text          => q'~Enter the value for the condition to test.~' );
    --
    l_property_id := 953;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JS_COND_LIST_WHEN_IG',
        p_prompt                => 'List',
        p_property_type         => 'TEXT',
        p_db_column             => 'TRIGGERING_EXPRESSION',
        p_display_length        => 60,
        p_max_length            => 4000,
        p_multi_value_delimiter => ',',
        p_display_group_name    => 'CLIENT_SIDE_CONDITION',
        p_help_text             => q'~Enter the comma separated list of values for the condition to test.~' );
    --
    l_property_id := 954;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JS_COND_JS_EXPRESSION_WHEN_IG',
        p_prompt             => 'JavaScript Expression',
        p_property_type      => 'JAVASCRIPT',
        p_db_column          => 'TRIGGERING_EXPRESSION',
        p_display_length     => 60,
        p_max_length         => 4000,
        p_display_group_name => 'CLIENT_SIDE_CONDITION',
        p_help_text          => q'~<p>Specify the JavaScript Expression to be evaluated for this condition.
The code has access to the following dynamic action related attributes:</p>
<dl>
  <dt>this.triggeringElement</dt>
    <dd>A reference to the DOM object of the element that triggered the dynamic action.</dd>
  <dt>this.browserEvent</dt>
    <dd>The event object that triggered the event. Note: On load this is equal to 'load'.</dd>
  <dt>this.data</dt>
    <dd>Optional additional data that can be passed from the event handler.</dd>
</dl>~' );
    --
    l_property_id := 955;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ORACLE_TEXT_INDEX_COLUMN',
        p_prompt             => 'Oracle Text Index Column',
        p_property_type      => 'COLUMN',
        p_db_column          => 'ORACLE_TEXT_INDEX_COLUMN',
        p_column_data_types  => 'VARCHAR2:CLOB',
        p_display_group_name => 'ADVANCED',
        p_help_text          => q'~<p>Select a column where the column is indexed by an Oracle Text index.</p>
<p>Row Search returns results based on the Oracle Text operator entered, providing the corresponding Oracle Text index has been created for the column.
This option should only be enabled if the necessary index exist, and the end users have been trained in how to utilize the Oracle Text search operators. 
To simplify Oracle Text syntax for end users, you can specify a function for the <em>Oracle Text PL/SQL Function Name</em> Component Setting of Interactive Grids in Shared Components.<br>
See <a target="_blank" href="https://docs.oracle.com/database/121/CCAPP/toc.htm">Oracle Text Application Developers Guide</a>.</p>
<p>Note - When end users correctly enter the Oracle Text operators, then performance of the search should be far more performant.</p>~' );
    --
    l_property_id := 956;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'CASCADING_LOV_PARENT_COLUMNS',
        p_prompt                   => 'Cascading LOV Parent Column(s)',
        p_property_type            => 'ITEM',
        p_multi_value_delimiter    => ',',
        p_db_column                => 'LOV_CASCADE_PARENT_ITEMS',
        p_display_length           => 50,
        p_max_length               => 255,
        p_display_group_name       => 'LIST_OF_VALUES',
        p_lov_component_type_scope => 'COLUMN',
        p_help_text                => q'~<p>Enter columns that trigger the refresh of this list of values.
For multiple columns, separate each column name with a comma.
You can type in the name or pick from the list of available columns.
If you pick from the list, and there is already text entered, then a comma is placed at the end of the existing text, followed by the column name returned from the list.</p>
<p>This list of values is refreshed whenever the value of any of the specified columns are changed on this page.</p>
<p>You should use the column(s) specified in this attribute within the <em>where clause</em> of this list of values SQL Query to restrict the values returned.</p>
<p>For example, if you have columns for Car Make and Model, you could specify Car Make as the Cascading LOV Parent Column within the List of Values definition for Model, and use Car Make within the where clause for that list of values.
Then whenever Car Make is changed, the LOV for Model is refreshed, and the list only displays values for the currently selected Car Make.</p>~' );

    --
    l_property_id := 957;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_LOCATION',
        p_prompt             => 'Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOCATION',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the location of the data.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Local Database',
        p_return_value  => 'LOCAL',
        p_help_text     => q'~Data is sourced from the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Remote Database',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~Data is sourced from a remote database, where the connection is defined using REST Enabled SQL. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Web Source',
        p_return_value  => 'WEB_SOURCE',
        p_help_text     => q'~Data is sourced from a RESTful web service defined using Web Source Modules.~' );
    --
    l_property_id := 958;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_REMOTE_DATABASE',
        p_prompt                => 'Remote Database',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'REMOTE_SERVER_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_remote_database,
        p_help_text             => q'~Select the remote database.~' );
    --
    l_property_id := 959;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'QUERY_TYPE',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the data is queried.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Table / View',
        p_return_value  => 'TABLE',
        p_help_text     => q'~The data is retrieved based on a table or view.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL',
        p_help_text     => q'~The data is retrieved based on a SQL Query.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body returning SQL Query',
        p_return_value  => 'FUNC_BODY_RETURNING_SQL',
        p_help_text     => q'~The data is retrieved based on the SQL Query returned by executing a PL/SQL Function Body.~' );
    --
    l_property_id := 960;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_OWNER',
        p_prompt             => 'Table Owner',
        p_property_type      => 'OWNER',
        p_db_column          => 'QUERY_OWNER',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Select the schema that owns the table.~' );
    --
    l_property_id := 961;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_TABLE',
        p_prompt             => 'Table Name',
        p_property_type      => 'TABLE',
        p_db_column          => 'QUERY_TABLE',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Enter the case-sensitive table or view name. You can type in the name or pick from the list.~' );
    --
    l_property_id := 962;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_WHERE',
        p_prompt             => 'Where Clause',
        p_property_type      => 'WHERE CLAUSE',
        p_db_column          => 'QUERY_WHERE',
        p_display_length     => 40,
        p_max_length         => 4000,
        p_display_group_name => 'SOURCE',
        p_examples           => q'~
<dl><dt>Only include those employees which have a manager or have a job of salesman.</dt>
<dd><pre>
( MGR is not null or JOB = 'SALESMAN' )
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter a valid SQL where condition, used to limit the records retrieved.~' );
    --
    l_property_id := 963;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_QUERY_ORDER_BY',
        p_prompt             => 'Order By',
        p_property_type      => 'ORDER BY CLAUSE',
        p_db_column          => 'QUERY_ORDER_BY',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'SOURCE',
        p_examples           => q'~
<dl><dt>To show the newest hires first and those which have not been hired yet last. If the date is equal, sort them by department number.</dt>
<dd><pre>
HIREDATE DESC NULLS LAST, DEPTNO
</pre></dd>
</dl>~',
        p_help_text          => q'~<p>Enter one or more comma separated column names, including directives, to define the order in which records are retrieved.</p>
        <p>Directives include:
          <ul>
            <li>ASC - Return column in ascending order</li>
            <li>DESC - Return column in descending order</li>
            <li>NULLS FIRST - Return column with no value before those with values</li>
            <li>NULLS LAST - Return column with values before those with no value</li>
          </ul>
        </p>~' );
    --
    l_property_id := 964;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SOURCE_SQL_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter the SQL source for this component.~' );
    --
    l_property_id := 965;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_SQL_CACHING',
        p_prompt             => 'Caching',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'REMOTE_SQL_CACHING',
        p_display_group_name => 'REMOTE_CACHE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how the &PRODUCT_NAME. engine can cache data in the local database. 
        If caching can be used, the component will be rendered based on cached results, instead of fetching from the remote database.
        Cached results will greatly improve performance, especially if there is latency between the local and remote database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'For All Users',
        p_return_value  => 'ALL_USERS',
        p_help_text     => q'~Result is cached and utilized by all users.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'By User',
        p_return_value  => 'USER',
        p_help_text     => q'~Result is cached specifically for each user, across sessions.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'By Session',
        p_return_value  => 'SESSION',
        p_help_text     => q'~Result is cached specifically for each user session.~' );
    --
    l_property_id := 966;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'REMOTE_SQL_INVALIDATE_WHEN',
        p_prompt             => 'Cache Timeout',
        p_property_type      => 'TEXTAREA',
        p_db_column          => 'REMOTE_SQL_INVALIDATE_WHEN',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'REMOTE_CACHE',
        p_examples           => q'~<dl>
<dt>Expire the data 15 minutes after it has been cached</dt>
  <dd><pre>15</pre></dd>
<dt>Expire the data at the top of the hour</dt>
  <dd><pre>FREQ=HOURLY;BYMINUTE=0;BYSECOND=0</pre></dd>
<dt>Expire the data at midnight</dt>
  <dd><pre>FREQ=DAILY;BYHOUR=0;BYMINUTE=0;BYSECOND=0</pre></dd>
</dl>~',
        p_help_text          => q'~<p>Enter when cached data is to be invalidated. 
        Provide either the amount of minutes or a DBMS_SCHEDULER Calendar String.</p>
        <p>For DBMS_SCHEDULER Calendar String, you can define that cached data is invalidated at the top of the hour, at midnight, or another specific recurring point in time.
        See the documentation on DBMS_SCHEDULER.EVALUATE_CALENDAR_STRING for more details.</p>~' );
    --
    l_property_id := 967;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'SOURCE_WEB_SRC_QUERY',
        p_prompt                => 'Module',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'WEB_SRC_MODULE_ID',
        p_display_group_name    => 'SOURCE',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_web_src_query,
        p_help_text             => q'~Select the Web Source Module which supports fetching a collection.~' );
    --
    l_property_id := 968;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'SOURCE_QUERY_PLSQL_FUNCTION_BODY',
        p_prompt               => 'PL/SQL Function Body returning SQL Query',
        p_property_type        => 'PLSQL FUNCTION BODY SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_help_text            => q'~Enter a PL/SQL Function that returns a SQL query that is used as the basis for this region.~' );
    --
    l_property_id := 970;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ICON_VIEW_LABEL_REGION_COLUMN',
        p_prompt             => 'Label Column',
        p_property_type      => 'REGION COLUMN',
        p_db_column          => 'ICON_VIEW_LABEL_COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_examples           => q'~<dl>
<dt>Examine the <code>ENAME</code> column</dt>
<dd><pre>
select empno,
       ename,
       job,
       '#IMAGE_PREFIX#menu/user_red_64.gif' as image
  from emp
</pre></dd>
</dl>~',
        p_display_group_name => 'ICON_VIEW',
        p_help_text          => q'~Select the report column that returns the image label.~' );

    l_property_id := 971;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_BOX_LOW_COLUMN_NAME',
        p_prompt             => 'Low',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER', -- $$$
        p_db_column          => 'ITEMS_LOW_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the low value on this chart. Where no column is selected, the lowest value of the Box Plot chart will be based upon the data set. ~' );
    --
    l_property_id := 972;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_BOX_HIGH_COLUMN_NAME',
        p_prompt             => 'High',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER', -- $$$
        p_db_column          => 'ITEMS_HIGH_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the high value on this chart. . Where no column is selected, the hightest value of the Box Plot chart will be based upon the data set.~' );
    --
    l_property_id := 973;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_TYPE_BOX_PLOT',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SERIES_TYPE',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the chart series type.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Area',
        p_return_value  => 'area' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bar',
        p_return_value  => 'bar' ); 
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Box Plot',
        p_return_value  => 'boxPlot' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line',
        p_return_value  => 'line' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Line with Area',
        p_return_value  => 'lineWithArea' );
    --
    l_property_id := 974;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_CONNECT_NULLS',
        p_prompt             => 'Connect Null Data Points',
        p_property_type      => 'YES NO',
        p_db_column          => 'CONNECT_NULLS',
        p_display_group_name => 'APPEARANCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify whether null data points on a multi-series line chart should render as a continuous or broken line.
        When set to <strong>Yes</strong>, null data points are handled as zero, to render a continuous line. When set to <strong>No</strong>, the series will be rendered as a broken line, with gaps representing null data points.
        This setting will be applied to multi-series chart types that support rendering as a line, such as Line, Line with Area, Combination, Area, Polar, Radar and Scatter.  The default is <strong>Yes</strong>.~' );      
    --
    l_property_id := 975;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OPTIMIZER_HINT',
        p_prompt             => 'Optimizer Hint',
        p_property_type      => 'TEXT',
        p_db_column          => 'OPTIMIZER_HINT',
        p_display_length     => 60,
        p_max_length         => 255,
        p_display_group_name => 'SOURCE',
        p_examples              => q'~<dl>
<dt>When accessing the table <code>employee</code> try to use the index <code>emp_department_ix</code></dt>
<dd><pre>INDEX (employees emp_department_ix)</pre></dd>
<dt>Enable the use of the <code>WITH plsql_declarations</code> clause within the SQL query</dt>
<dd><pre>WITH_PLSQL</pre></dd>
</dl>~',
        p_help_text          => q'~<p>Enter the Oracle Optimizer hint which is added to the top-level statement when executing the SQL query.
        A hint is an instruction to the Optimizer. When writing SQL, you may know information about the data unknown to the Optimizer. Hints enable you to make decisions normally made by the Optimizer,
        sometimes causing the Optimizer to select a plan that it sees as higher cost.</p>
        <p>For example, you might know that a certain index is more selective for certain queries. Based on this information, you might be able to choose a more efficient execution plan than the Optimizer.
        In such a case, use hints to force the Optimizer to use the optimal execution plan.</p>~' );
    --
    l_property_id := 976;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_Q2_COLOR',
        p_prompt             => 'Q2 Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'Q2_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color to be displayed for the q2 segment of the Box Plot chart series. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
    l_property_id := 977;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_SERIES_Q3_COLOR',
        p_prompt             => 'Q3 Color',
        p_property_type      => 'COLOR',
        p_db_column          => 'Q3_COLOR',
        p_display_group_name => 'APPEARANCE',
        p_help_text          => q'~<p>Enter the color to be displayed for the q3 segment of the Box Plot chart series. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
    l_property_id := 978;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'INCLUDE_ROWID_COLUMN',
        p_prompt             => 'Include ROWID Column',
        p_property_type      => 'YES NO',
        p_db_column          => 'INCLUDE_ROWID_COLUMN',
        p_display_group_name => 'SOURCE',
        p_help_text          => q'~Specify whether the pseudo column ROWID should be selected.~' );
    --
    l_property_id := 979;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_HORIZONTAL_GRID',
        p_prompt                     => 'Show Horizontal Grid',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'visible',
        p_prop_type_yesno_override_n => 'hidden',
        p_db_column                  => 'HORIZONTAL_GRID',
        p_display_group_name         => 'SETTINGS',
        p_help_text                  => q'~Select whether to display horizontal gridlines on the chart.~' );
    --
    l_property_id := 980;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_VERTICAL_GRID',
        p_prompt                     => 'Show Vertical Grid',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'visible',
        p_prop_type_yesno_override_n => 'hidden',
        p_db_column                  => 'VERTICAL_GRID',
        p_display_group_name         => 'SETTINGS',
        p_help_text                  => q'~Select whether to display vertical gridlines on the chart.~' );
    -- 
    l_property_id := 981;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ROW_AXIS',
        p_prompt                     => 'Show Row Axis',
        p_property_type              => 'YES NO',
        p_prop_type_yesno_override_y => 'on',
        p_prop_type_yesno_override_n => 'off',
        p_db_column                  => 'ROW_AXIS_RENDERED',
        p_display_group_name         => 'SETTINGS',
        p_help_text                  => q'~Select whether to render the row labels on the chart.~' );
    --
    l_property_id := 982;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_AXIS_POSITION',
        p_prompt             => 'Axis Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_AXIS_POSITION',
        p_display_group_name => 'SETTINGS',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the major and minor axes on the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Top',
        p_return_value  => 'top');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Bottom',
        p_return_value  => 'bottom' );
    --
    l_property_id := 983;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_AXIS_SCALE',
        p_prompt             => 'Scale',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'AXIS_SCALE',
        p_display_group_name => 'TIME_SCALE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the time scale to be used for the axis on the chart. This is required in order for the Gantt to properly render. The selected time scale will be used for zooming, when no Zoom Scale options have been selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Seconds',
        p_return_value  => 'seconds');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Minutes',
        p_return_value  => 'minutes');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Hours',
        p_return_value  => 'hours');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Days',
        p_return_value  => 'days');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Weeks',
        p_return_value  => 'weeks');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Months',
        p_return_value  => 'months');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Quarters',
        p_return_value  => 'quarters');
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Years',
        p_return_value  => 'years');
    --
    l_property_id := 984;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_SECONDS',
        p_prompt                     => 'Seconds',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_SECONDS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Select whether to allow zooming to a scale of seconds on the chart.~' );
    --
    l_property_id := 985;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_MINUTES',
        p_prompt                     => 'Minutes',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_MINUTES',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Select whether to allow zooming to a scale of minutes on the chart.~' );
    --
    l_property_id := 986;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_HOURS',
        p_prompt                     => 'Hours',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_HOURS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Select whether to allow zooming to a scale of hours on the chart.~' );
    --
    l_property_id := 987;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_DAYS',
        p_prompt                     => 'Days',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_DAYS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Select whether to allow zooming to a scale of days on the chart.~' );
    --
    l_property_id := 988;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_WEEKS',
        p_prompt                     => 'Weeks',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_WEEKS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Select whether to allow zooming to a scale of weeks on the chart.~' );
    --
    l_property_id := 989;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_MONTHS',
        p_prompt                     => 'Months',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_MONTHS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Select whether to allow zooming to a scale of months on the chart.~' );
    --
    l_property_id := 990;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_QUARTERS',
        p_prompt                     => 'Quarters',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_QUARTERS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Select whether to allow zooming to a scale of quarters on the chart.~' );
    --
    l_property_id := 991;
    store_property (
        p_id                         => l_property_id,
        p_name                       => 'JET_ZOOM_ORDER_YEARS',
        p_prompt                     => 'Years',
        p_property_type              => 'YES NO',
        p_db_column                  => 'ZOOM_ORDER_YEARS',
        p_display_group_name         => 'ZOOM_SCALE',
        p_help_text                  => q'~Select whether to allow zooming to a scale of years on the chart.~' );
    --
    -- Gantt Chart Series Attributes
    --
    l_property_id := 992;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_START_DATE_SOURCE',
        p_prompt             => 'Start Date Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_START_DATE_SOURCE',
        p_display_group_name => 'GANTT_TIMELINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source to be used for defining the start date of the Gantt chart. A start date is required in order to render the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>Start Date Column</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Start Date Item</em> selected.~' );
    --
    l_property_id := 993;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_START_DATE_COLUMN',
        p_prompt             => 'Start Date Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_START_DATE_COLUMN',
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the column name to be used for defining the start date of the Gantt chart.~' );
    --
    l_property_id := 994;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_START_DATE_ITEM',
        p_prompt             => 'Start Date Item',
        p_property_type      => 'ITEM',
        p_display_length     => 80,
        p_max_length         => 255,
        p_db_column          => 'GANTT_START_DATE_ITEM',
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the page or application item to be used for defining the start date of the Gantt chart.~' );     
    --
    l_property_id := 995;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_END_DATE_SOURCE',
        p_prompt             => 'End Date Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_END_DATE_SOURCE',
        p_display_group_name => 'GANTT_TIMELINE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source to be used for defining the end date of the Gantt chart. An end date is required in order to render the chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>End Date Column</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>End Date Item</em> selected.~' );
    --
    l_property_id := 996;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_END_DATE_COLUMN',
        p_prompt             => 'End Date Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_END_DATE_COLUMN',
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the column name to be used for defining the end date of the Gantt chart.~' );
    --
    l_property_id := 997;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_END_DATE_ITEM',
        p_prompt             => 'End Date Item',
        p_property_type      => 'ITEM',
        p_display_length     => 80,
        p_max_length         => 255,
        p_db_column          => 'GANTT_END_DATE_ITEM',
        p_display_group_name => 'GANTT_TIMELINE',
        p_help_text          => q'~Select the page or application item to be used for defining the end date of the Gantt chart.~' );
    --
    l_property_id := 998;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DIRECTION',
        p_prompt             => 'Direction',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DIRECTION',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the direction of the parameter.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'In',
        p_return_value  => 'IN' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Out',
        p_return_value  => 'OUT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'In/Out',
        p_return_value  => 'IN_OUT' );
    --
    l_property_id := 1000;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'IS_STATIC',
        p_prompt             => 'Static',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_STATIC',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Specify whether the parameter can only be set once with a static value or be overridden on component level.~' );
    --
    l_property_id := 1001;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_REQUIRED',
        p_prompt             => 'Required',
        p_property_type      => 'YES NO',
        p_db_column          => 'IS_REQUIRED',
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Specify whether the parameter is required and must always be set.~' );
    --
    l_property_id := 1002;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PARAMETER_VALUE',
        p_prompt             => 'Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~Specify a default or static value for this parameter.~' );
    --
    l_property_id := 1003;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'DATABASE_OPERATION',
        p_prompt             => 'Database Operation',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'DATABASE_OPERATION',
        p_display_group_name => 'IDENTIFICATION',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the database operation.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fetch Rows',
        p_return_value  => 'FETCH_COLLECTION' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Fetch Single Row',
        p_return_value  => 'FETCH_SINGLE_ROW' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Insert Row',
        p_return_value  => 'INSERT' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Update Row',
        p_return_value  => 'UPDATE' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Delete Row',
        p_return_value  => 'DELETE' );
    --
    l_property_id := 1004;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'WEB_SRC_PARAM',
        p_prompt                => 'Name',
        p_property_type         => 'COMPONENT',
        p_db_column             => 'WEB_SRC_PARAM_ID',
        p_display_group_name    => 'IDENTIFICATION',
        p_lov_type              => 'COMPONENT',
        p_lov_component_type_id => c_comp_type_web_src_param,
        p_help_text             => q'~~' );
    --
    l_property_id := 1005;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_TYPE',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'VALUE_TYPE',
        p_display_group_name => 'VALUE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the type how this parameter is populated.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Static Value',
        p_return_value  => 'STATIC',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the text entered into <em>Static Value</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Item</em> selected.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return single value)',
        p_return_value  => 'SQL_QUERY',
        p_help_text     => q'~Set to the first value returned from the <em>SQL Query</em> entered.~' );
    --
/*
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query (return colon separated value)',
        p_return_value  => 'QUERY_COLON',
        p_help_text     => q'~Set to a single colon separated value, which concatenates each row value, returned from the <em>SQL Query</em> entered.~' );
*/
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Expression',
        p_return_value  => 'PLSQL_EXPRESSION',
        p_help_text     => q'~Set to the value that results from executing the <em>PL/SQL Expression</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body',
        p_return_value  => 'PLSQL_FUNCTION_BODY',
        p_help_text     => q'~Set to the value returned from the <em>PL/SQL Function Body</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Collection',
        p_return_value  => 'COLLECTION',
        p_help_text     => q'~Set to the CLOB column value of the first row from the <em>Collection</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Preference',
        p_return_value  => 'PREFERENCE',
        p_help_text     => q'~Set to the value of the <em>Preference</em> entered.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Null',
        p_return_value  => 'NULL',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to null as no value specified.~' );
    --
    l_property_id := 1006;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_STATIC_VALUE',
        p_prompt             => 'Static Value',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the static value used as the source for this parameter value.~' );
    --
    l_property_id := 1007;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'VALUE_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'VALUE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'VALUE',
        p_help_text            => q'~Enter the SQL Query used as the source for this parameter value. If more than one row is returned then the value of the first row is used.~' );
    --
/*
    l_property_id := 1008;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'VALUE_QUERY_COLON',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'SOURCE',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_sql_max_column_count => 1,
        p_display_group_name   => 'VALUE',
        p_help_text            => q'~Enter the SQL Query that returns one or more rows to be used as the source for this item value. If the result contains multiple rows then the value from each row is formed into a single colon delimited value.~' );
*/
    --
    l_property_id := 1009;
    store_property (
        p_id                       => l_property_id,
        p_name                     => 'VALUE_ITEM',
        p_prompt                   => 'Item',
        p_property_type            => 'ITEM',
        p_db_column                => 'VALUE',
        p_display_length           => 80,
        p_max_length               => 255,
        p_display_group_name       => 'VALUE',
        p_lov_component_type_scope => 'APPLICATION',
        p_help_text                => q'~Enter the page or application item used as the source for this parameter value.
You can type in the name or pick from the list of available items.~' );
    --
    l_property_id := 1010;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_PLSQL_EXPRESSION',
        p_prompt             => 'PL/SQL Expression',
        p_property_type      => 'PLSQL EXPRESSION VARCHAR2',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter a PL/SQL expression that produces a value used as the source for this parameter value.~' );
    --
    l_property_id := 1011;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_PLSQL_FUNCTION_BODY',
        p_prompt             => 'PL/SQL Function Body',
        p_property_type      => 'PLSQL FUNCTION BODY VARCHAR2',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 4000,
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter a PL/SQL function body that returns a value used as the source for this parameter value.~' );
    --
    l_property_id := 1012;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_PREFERENCE',
        p_prompt             => 'Preference',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the User Preference to be used as the source for this parameter value.~' );
    --
    l_property_id := 1013;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'OPERATION',
        p_prompt             => 'Operation',
        p_property_type      => 'TEXT',
        p_db_column          => 'OPERATION',
        p_display_length     => 80,
        p_max_length         => 255,
        p_display_group_name => 'IDENTIFICATION',
        p_help_text          => q'~~' );
    --
    l_property_id := 1014;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'PLSQL_PROCESS_LOCATION',
        p_prompt             => 'Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOCATION',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the location where the process is executed.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Local Database',
        p_return_value  => 'LOCAL',
        p_help_text     => q'~PL/SQL code is executed in the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Remote Database',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~PL/SQL code is executed in a remote database, where the connection is defined using REST Enabled SQL. ~' );
    --
    l_property_id := 1015;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'VALUE_COLLECTION',
        p_prompt             => 'Name',
        p_property_type      => 'TEXT',
        p_db_column          => 'VALUE',
        p_display_length     => 80,
        p_max_length         => 255,
        p_text_case          => 'UPPER',
        p_display_group_name => 'VALUE',
        p_help_text          => q'~Enter the Collection name. The source for this parameter value will be based on the value of the CLOB column from the collection's first row.~' );
    --
    l_property_id := 1016;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'FIXED_REPORT_HEIGHT',
        p_prompt             => 'Fixed Report Height',
        p_property_type      => 'INTEGER',
        p_db_column          => 'FIXED_HEADER_MAX_HEIGHT',
        p_display_length     => 5,
        p_min_value          => 1,
        p_unit               => c_unit_pixels,
        p_display_group_name => 'HEADING',
        p_help_text          => q'~Enter the fixed height for the report in pixels.~' );
    --
    --  Gantt Chart Column Mappings
    --
    l_property_id := 1017;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_ROW_ID',
        p_prompt             => 'Row ID',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER',
        p_db_column          => 'GANTT_ROW_ID',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the row ID on the gantt chart.~' );
    --
    l_property_id := 1018;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_ROW_NAME',
        p_prompt             => 'Row Name',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'GANTT_ROW_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the row name on the gantt chart.~' );
    --
    l_property_id := 1019;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_TASK_ID',
        p_prompt             => 'Task ID',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER',
        p_db_column          => 'GANTT_TASK_ID',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task ID on the gantt chart.~' );
    --
    l_property_id := 1020;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_TASK_NAME',
        p_prompt             => 'Task Name',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2',
        p_db_column          => 'GANTT_TASK_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task name on the gantt chart.~' ); 
    --
    l_property_id := 1021;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_TASK_START_DATE',
        p_prompt             => 'Task Start Date',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_TASK_START_DATE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task start date on the Gantt chart.~' );
    --
    l_property_id := 1022;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_TASK_END_DATE',
        p_prompt             => 'Task End Date',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_TASK_END_DATE',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task end date on the Gantt chart.~' );
    --
   /* l_property_id := 1023;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JET_GANTT_TASK_CSS_STYLE',
        p_prompt                => 'Task CSS Styling',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GANTT_TASK_CSS_STYLE',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~<p>Enter a CSS style string defining the style of the tasks on this gantt chart.</p>~' ); */
    --
    l_property_id := 1024;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JET_GANTT_TASK_CSS_CLASS',
        p_prompt                => 'Task CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GANTT_TASK_CSS_CLASS',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~<p>Enter CSS classes to be applied to task bars on the Gantt chart. You may add multiple classes by separating them with spaces. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
    l_property_id := 1025;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JET_GANTT_PROGRESS_CSS_CLASS',
        p_prompt                => 'Progress CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GANTT_PROGRESS_CSS_CLASS',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~<p>Enter CSS classes to be applied to progress bars on the Gantt chart. You may add multiple classes by separating them with spaces. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );
    --
/*    l_property_id := 1024;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_PREDECESSOR_TASK_ID',
        p_prompt             => 'Predecessor Task ID',
        p_property_type      => 'HIDDEN',
        --p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER',
        p_db_column          => 'GANTT_PREDECESSOR_TASK_ID',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the predecessor task ID on the Gantt chart.~' ); */
    --
/*    l_property_id := 1025;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_SUCCESSOR_TASK_ID',
        p_prompt             => 'Successor Task ID',
        p_property_type      => 'HIDDEN',
        --p_property_type      => 'COLUMN',
        p_column_data_types  => 'VARCHAR2:NUMBER',
        p_db_column          => 'GANTT_SUCCESSOR_TASK_ID',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the successor task ID on the Gantt chart.~' );   */ 
    --
    l_property_id := 1026;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_BASELINE_START_COLUMN',
        p_prompt             => 'Baseline Start Date',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_BASELINE_START_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the baseline start date on the Gantt chart. A baseline start date is the task's original planned start date.~' );
    --
    l_property_id := 1027;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_BASELINE_END_COLUMN',
        p_prompt             => 'Baseline End Date',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_BASELINE_END_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the baseline end date on the Gantt chart. A baseline end date is the task's original planned end date.~' );    
    --
    l_property_id := 1028;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_PROGRESS_COLUMN',
        p_prompt             => 'Progress',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER',
        p_db_column          => 'GANTT_PROGRESS_COLUMN',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the task progress on the Gantt chart. The value of the progress must be between 0 and 1.  If the value is invalid, no progress will be shown.~' );
    --  
    l_property_id := 1029;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_START_SOURCE',
        p_prompt             => 'Viewport Start Date Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_VIEWPORT_START_SOURCE',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source to be used for defining the start date of the Gantt chart's viewport. A viewport is a date range, which when defined can control the initial zooming of a chart when rendered. The chart will be zoomed in to the specified date range.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>Start Date Column</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>Start Date Item</em> selected.~' );
    --  
    l_property_id := 1030;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_START_COLUMN',
        p_prompt             => 'Start Date Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_VIEWPORT_START_COLUMN',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_help_text          => q'~Select the column name to be used for defining the viewport start date of the Gantt chart.~' );
    --
    l_property_id := 1031;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_TASK_LABEL_POSITION',
        p_prompt             => 'Task Label Position',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'TASK_LABEL_POSITION',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the position of the task labels on the Gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Start',
        p_return_value  => 'start',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the start of the task bar on the gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'End',
        p_return_value  => 'end',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the end of the task bar on the gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inner Center',
        p_return_value  => 'innerCenter',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the inner center of the task bar on the gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inner Start',
        p_return_value  => 'innerStart',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the inner start of the task bar on the gantt chart.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Inner End',
        p_return_value  => 'innerEnd',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~The task label is rendered at the inner end of the task bar on the gantt chart.~' );
    --
    --  End of Gantt Chart Column Mappings
    --
    --
    l_property_id := 1032;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'CHART_SOURCE_LOCATION',
        p_prompt             => 'Location',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'LOCATION',
        p_display_group_name => 'SOURCE',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the location of the data.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Local Database',
        p_return_value  => 'LOCAL',
        p_help_text     => q'~Data is sourced from the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Remote Database',
        p_return_value  => 'REMOTE',
        p_help_text     => q'~Data is sourced from a remote database, where the connection is defined using REST Enabled SQL. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Web Source',
        p_return_value  => 'WEB_SOURCE',
        p_help_text     => q'~Data is sourced from a RESTful web service defined using Web Source Modules.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Region Source',
        p_return_value  => 'REGION_SOURCE',
        p_help_text     => q'~Data is sourced from the location specified in the region source definition.~' );
    --
    l_property_id := 1033;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'ITEMS_VALUE_COLUMN_NAME',
        p_prompt             => 'Value',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'NUMBER:DATE', -- $$$
        p_db_column          => 'ITEMS_VALUE_COLUMN_NAME',
        p_display_group_name => 'COLUMN_MAPPING',
        p_help_text          => q'~Select the column name to be used for defining the value on this chart. For a Box Plot chart, this column will be used for defining the minimum, quartiles, median, and maximum values of the numerical data set.~' );
    --
    l_property_id := 1034;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'SOURCE_POST_PROCESSING',
        p_prompt             => 'Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'SOURCE_POST_PROCESSING',
        p_display_group_name => 'LOCAL_POST_PROCESSING',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select how to post process the retrieved web source data in the local database.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Where/Order By Clause',
        p_return_value  => 'WHERE_ORDER_BY_CLAUSE',
        p_help_text     => q'~Enter the where and/or order by clause to restrict and order the data retrieved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'SQL Query',
        p_return_value  => 'SQL',
        p_help_text     => q'~Enter a SQL Query to transform the data retrieved.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'PL/SQL Function Body returning SQL Query',
        p_return_value  => 'FUNC_BODY_RETURNING_SQL',
        p_help_text     => q'~Enter a PL/SQL function body, where the SQL query returned transforms the data retrieved.~' );
    --
    l_property_id := 1035;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_PROC_WHERE',
        p_prompt             => 'Where Clause',
        p_property_type      => 'WHERE CLAUSE',
        p_db_column          => 'QUERY_WHERE',
        p_display_length     => 40,
        p_max_length         => 4000,
        p_display_group_name => 'LOCAL_POST_PROCESSING',
        p_examples           => q'~
<dl><dt>Only include those employees which have a manager or have a job of salesman.</dt>
<dd><pre>
( MGR is not null or JOB = 'SALESMAN' )
</pre></dd>
</dl>~',
        p_help_text          => q'~Enter a valid SQL where condition, used to limit the records retrieved.~' );
    --
    l_property_id := 1036;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'POST_PROC_ORDER_BY',
        p_prompt             => 'Order By',
        p_property_type      => 'ORDER BY CLAUSE',
        p_db_column          => 'QUERY_ORDER_BY',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'LOCAL_POST_PROCESSING',
        p_examples           => q'~
<dl><dt>To show the newest hires first and those which have not been hired yet last. If the date is equal, sort them by department number.</dt>
<dd><pre>
HIREDATE DESC NULLS LAST, DEPTNO
</pre></dd>
</dl>~',
        p_help_text          => q'~<p>Enter one or more comma separated column names, including directives, to define the order in which records are retrieved.</p>
        <p>Directives include:
          <ul>
            <li>ASC - Return column in ascending order</li>
            <li>DESC - Return column in descending order</li>
            <li>NULLS FIRST - Return column with no value before those with values</li>
            <li>NULLS LAST - Return column with values before those with no value</li>
          </ul>
        </p>~' );
    --
    l_property_id := 1037;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_START_ITEM',
        p_prompt             => 'Start Date Item',
        p_property_type      => 'ITEM',
        p_display_length     => 80,
        p_max_length         => 255,
        p_db_column          => 'GANTT_VIEWPORT_START_ITEM',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_help_text          => q'~Select the page or application item to be used for defining the viewport start date of the Gantt chart.~' );     
    --
    l_property_id := 1038;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_END_SOURCE',
        p_prompt             => 'End Date Source Type',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'GANTT_VIEWPORT_END_SOURCE',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Select the source to be used for defining the end date of the Gantt chart's viewport. A viewport is a date range, which when defined can control the initial zooming of a chart when rendered. The chart will be zoomed in to the specified date range.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Database Column',
        p_return_value  => 'DB_COLUMN',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the column value entered in <em>End Date Column</em>.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Item',
        p_return_value  => 'ITEM',
        p_is_quick_pick => 'Y',
        p_help_text     => q'~Set to the value held in session state for the <em>End Date Item</em> selected.~' );
    --
    l_property_id := 1039;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_END_COLUMN',
        p_prompt             => 'End Date Column',
        p_property_type      => 'COLUMN',
        p_column_data_types  => 'DATE:TIMESTAMP:TIMESTAMP_TZ:TIMESTAMP_LTZ',
        p_db_column          => 'GANTT_VIEWPORT_END_COLUMN',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_help_text          => q'~Select the column name to be used for defining the viewport end date of the Gantt chart.~' );
    --
    l_property_id := 1040;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_GANTT_VIEWPORT_END_ITEM',
        p_prompt             => 'End Date Item',
        p_property_type      => 'ITEM',
        p_display_length     => 80,
        p_max_length         => 255,
        p_db_column          => 'GANTT_VIEWPORT_END_ITEM',
        p_display_group_name => 'GANTT_VIEWPORT',
        p_help_text          => q'~Select the page or application item to be used for defining the viewport end date of the Gantt chart.~' );
    --
    l_property_id := 1041;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'POST_PROC_SQL_QUERY',
        p_prompt               => 'SQL Query',
        p_property_type        => 'SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'LOCAL_POST_PROCESSING',
        p_examples             => q'~
<dl><dt>Select the EMPNO, ENAME and SAL columns and filter out all rows with a SAL less then 3000.</dt>
<dd><pre>
select EMPNO, ENAME, SAL
  from #APEX$SOURCE_DATA#
 where SAL < 3000
</pre></dd>
</dl>~',
        p_help_text            => q'~Enter a SQL Query to transform the data retrieved from the Web Source. Select from the pseudo-table #APEX$SOURCE_DATA# and specify columns available in the data profile. Subquery factoring using the SQL WITH clause is not supported here.~' );
    --
    l_property_id := 1042;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'POST_PROC_PLSQL_FUNCTION_BODY',
        p_prompt               => 'PL/SQL Function Body returning SQL Query',
        p_property_type        => 'PLSQL FUNCTION BODY SQL',
        p_db_column            => 'PLUG_SOURCE',
        p_display_length       => 80,
        p_max_length           => 32767,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'LOCAL_POST_PROCESSING',
        p_examples             => q'~
<dl><dt>Select the EMPNO, ENAME and SAL columns and filter out all rows with a SAL less then 3000.</dt>
<dd><pre>
begin
    return 'select EMPNO, ENAME, SAL from #APEX$SOURCE_DATA where SAL < 3000';
end;
</pre></dd>
</dl>~',
        p_help_text            => q'~Enter a PL/SQL function body, where the SQL query returned transforms the data retrieved from the Web Source. The SQL query returned by the PL/SQL function body must select from the #APEX$SOURCE_DATA# pseudo-table and read columns available in the data profile. Subquery factoring using the SQL WITH clause is not supported here. ~' );
    --
    l_property_id := 1043;
    store_property (
        p_id                   => l_property_id,
        p_name                 => 'EXTERNAL_FILTER_EXPR',
        p_prompt               => 'External Filter',
        p_property_type        => 'TEXT EDITOR',
        p_db_column            => 'EXTERNAL_FILTER_EXPR',
        p_display_length       => 80,
        p_max_length           => 4000,
        p_sql_min_column_count => 1,
        p_display_group_name   => 'SOURCE',
        p_examples             => q'~
<dl><dt>For an ORDS REST Service, filter out all records with the "sal" attribute less than 3000.</dt>
<dd><pre>
{"sal": {"$lt": 3000}}
</pre></dd>
</dl>~',
        p_help_text            => q'~Provide a filter expression to be passed to the external REST service. The expression will be passed to the remote server as-is. The syntax depends on the type of the Web Source Module. For instance, Oracle REST Data Services (ORDS) expects JSON syntax.~' );
    --
    l_property_id := 1044;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'EXTERNAL_ORDER_BY_EXPR',
        p_prompt             => 'External Order By',
        p_property_type      => 'TEXT EDITOR',
        p_db_column          => 'EXTERNAL_ORDER_BY_EXPR',
        p_display_length     => 40,
        p_max_length         => 255,
        p_display_group_name => 'SOURCE',
        p_examples             => q'~
<dl><dt>For an ORDS REST Service, order by the "job" attribute ascending, then by "ename", descending.</dt>
<dd><pre>
{"job": "asc", "ename": "desc"}
</pre></dd>
</dl>~',
        p_help_text            => q'~Provide an order by expression to be passed to the external REST service. The expression will be passed to the remote server as-is. The syntax depends on the type of the Web Source Module. For instance, Oracle REST Data Services (ORDS) expects JSON syntax.~' );        
    --
    l_property_id := 1045;
    store_property (
        p_id                    => l_property_id,
        p_name                  => 'JET_GANTT_BASELINE_CSS_CLASS',
        p_prompt                => 'Baseline CSS Classes',
        p_property_type         => 'COMBOBOX',
        p_multi_value_delimiter => ' ',
        p_db_column             => 'GANTT_BASELINE_CSS_CLASS',
        p_display_length        => 80,
        p_max_length            => 255,
        p_display_group_name    => 'APPEARANCE',
        p_help_text             => q'~<p>Enter CSS classes to be applied to baseline bars on the Gantt chart. You may add multiple classes by separating them with spaces. You can utilize <code>&COLUMN_VALUE.</code> substitutions.</p>~' );    
    --
    l_property_id := 1046;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_LABEL_DISPLAY_AS',
        p_prompt             => 'Display As',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'ITEMS_LABEL_DISPLAY_AS',
        p_display_group_name => 'LABEL',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify how the labels should be displayed on the slices of the pie chart. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label',
        p_return_value  => 'LABEL',
        p_help_text     => q'~<p>The labels will display on the slices of the chart, based on the selected Label column mapping. For example, <strong>Bugs</strong>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percentage',
        p_return_value  => 'PERCENT',
        p_help_text     => q'~<p>The labels will display as values between 0% and 100%, based on the selected Value column mapping. The value is a percentage of the total values represented on the chart. For example, <strong>15%</strong>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Value',
        p_return_value  => 'VALUE',
        p_help_text     => q'~<p>The labels will display as numeric values, based on the selected Value column mapping.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Label - Percentage ( Value )',
        p_return_value  => 'ALL',
        p_help_text     => q'~<p>The labels will display the label, value and percentage information in the following format: label - percentage ( value ). For example, <strong>Bugs - 15% ( 18 )</strong>.</p>~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Percentage ( Value )',
        p_return_value  => 'COMBO',
        p_help_text     => q'~<p>The labels will display as numeric values, based on the selected Value column mapping. For example, <strong>15% ( 18 )</strong>.</p>~' );
    --
    l_property_id := 1047;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'STRETCH_COLUMN',
        p_prompt             => 'Stretch',
        p_property_type      => 'SELECT LIST',
        p_db_column          => 'STRETCH',
        p_display_group_name => 'LAYOUT',
        p_lov_type           => 'STATIC',
        p_help_text          => q'~Specify if the column should stretch if there is sufficient screen real estate. ~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Never',
        p_return_value  => 'N',
        p_help_text     => q'~The column will not stretch and always just use the width specified. This is useful for columns with short content like Yes/No or Numbers.~' );
    --
    store_property_lov_values (
        p_property_id   => l_property_id,
        p_display_value => 'Always',
        p_return_value  => 'A',
        p_help_text     => q'~The column will always stretch, irrespective of the <strong>Stretch</strong> Report Setting set by the End User.~' );
    --
    --
    l_property_id := 1048;
    store_property (
        p_id                 => l_property_id,
        p_name               => 'JET_FILL_GAPS',
        p_prompt             => 'Fill Gaps in Chart Data',
        p_property_type      => 'YES NO',
        p_db_column          => 'FILL_MULTI_SERIES_GAPS',
        p_display_group_name => 'MULTI_SERIES',
        p_help_text          => q'~Specify whether gaps in your multi-series chart data should be automatically filled.  This setting does not apply to single series charts.  When set to Yes, data densification logic introduced in Oracle Application Express 5.1.3 will be applied to the chart data.  When set to No, gaps in data will not be filled and may result in inaccurate chart rendering. The default is Yes.  ~' );       
    --    
    --
    --****************
    -- END PROPERTIES
    --****************
    --
    -- Note: The following statements should be at the end of the store_property calls
    --
    store_map_level_properties (
        p_start_property_id => 4800 );
    --
    store_val_type_properties (
        p_start_property_id => 4960,
        p_name_prefix       => null );
    --
    store_val_type_properties (
        p_start_property_id => 4980,
        p_name_prefix       => 'REGION' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5000,
        p_name_prefix        => 'CACHE',
        p_help_text_type     => q'~Specify a condition. If the condition returns <strong>TRUE</strong>, the page displays from cache. If the condition returns <strong>FALSE</strong>, the page renders dynamically and is not retrieved from cache.~',
        p_db_column_type     => 'CACHE_WHEN_CONDITION_TYPE',
        p_db_column_expr1    => 'CACHE_WHEN_CONDITION_E1',
        p_db_column_expr2    => 'CACHE_WHEN_CONDITION_E2',
        p_display_group_name => 'SERVER_CACHE' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5050,
        p_name_prefix        => 'READ_ONLY',
        p_help_text_type     => q'~<p>Select a condition type that must be met in order for this page to render page items as read only. Not selecting a condition causes the page items to render normally.
The read only condition is evaluated after executing the processes with a processing point of <em>Before Header</em>.</p>
<p>Note: If you want some page items (for example a search field) or all page items of a specific region to always render as enterable page items independent of how this condition evaluates, then set the read only condition of those regions/page items to <strong>Never</strong> to overwrite the parent setting.</p>~',
        p_db_column_type     => 'READ_ONLY_WHEN_TYPE',
        p_db_column_expr1    => 'READ_ONLY_WHEN',
        p_db_column_expr2    => 'READ_ONLY_WHEN2',
        p_display_group_name => 'READ_ONLY' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5100,
        p_name_prefix        => null,
        p_help_text_type     => q'~Select a condition type that must be met in order for this component to be rendered or processed.~',
        p_db_column_type     => 'CONDITION_TYPE',
        p_db_column_expr1    => 'CONDITION_EXPRESSION1',
        p_db_column_expr2    => 'CONDITION_EXPRESSION2',
        p_display_group_name => 'SERVER_SIDE_CONDITION' );
    --
    store_cond_type_properties (
        p_start_property_id  => 5150,
        p_name_prefix        => 'LINK',
        p_prompt_type        => 'Condition Type',
        p_help_text_type     => q'~Select a condition type that must be met in order for this link to be rendered.~',
        p_db_column_type     => 'DETAIL_LINK_CONDITION_TYPE',
        p_db_column_expr1    => 'DETAIL_LINK_COND',
        p_db_column_expr2    => 'DETAIL_LINK_COND2',
        p_display_group_name => 'LINK' );



    --
    ------------------------------------------------------------------------
    -- Component Properties
    ------------------------------------------------------------------------
    --
    -- Component Properties for BUILD_OPTION
    --
    l_component_type_id := c_comp_type_build_option;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'PATCH_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name for this build option. Build options are predefined settings that determine whether or not components within an application are enabled.~' );
/*
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUILD_OPTION_STATUS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'EXCLUDE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DEFAULT_ON_EXPORT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'PATCH_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    --
    --
    -- Component Properties for AUTHORIZATION
    --
    l_component_type_id := c_comp_type_authorization;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a unique name that identifies this authorization scheme.~' );
    --
/* $$$ how do we include subscriptions???
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REFERENCE_MASTER_AUTHORIZATION_SCHEME_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
*/
/*
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTHORIZATION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EVALUATION_POINT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'BY_USER_BY_PAGE_VIEW' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ERROR_MESSAGE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Enter the error text that displays when the user fails the security check. Security checks are defined by the authorization scheme.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    --
    -- Component Properties for PAGE
    --
    l_component_type_id := c_comp_type_page;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_GLOBAL_PAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGE_NAVIGATION_TYPE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'L' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of the current page. This name is used in numerous &PRODUCT_NAME. pages and reports, along with the page number and title.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PAGE_ALIAS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TITLE',
        p_db_column                   => 'STEP_TITLE',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_help_text                   => q'~Enter a title to display in the title bar of the browser window. The &PRODUCT_NAME. engine uses the title you specify here in place of the <code>#TITLE#</code> substitution string used in the page template. This title is inserted between the HTML tags <code>&lt;TITLE&gt;</code> and <code>&lt;/TITLE&gt;</code>.~' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'PAGE_GROUP',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'USER_INTERFACE',
        p_db_column           => null,
        p_is_required         => true,
        p_is_common           => false,
        p_is_read_only        => true,
        p_reference_on_delete => 'WEAK_CASCADE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_MODE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'NORMAL',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_null_text                   => 'Theme Default',
        p_parent_comp_prop_name       => 'PAGE_MODE',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NORMAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'PAGE_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'PAGE_TEMPLATE',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NORMAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_null_text                   => 'Theme Default',
        p_parent_comp_prop_name       => 'PAGE_MODE',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS2',
        p_db_column                   => 'PAGE_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'DIALOG_TEMPLATE',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'PAGE_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text                => '$$$ we should only show this property if the template supports the #PAGE_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_WIDTH',
        p_db_column                   => 'DIALOG_WIDTH',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_HEIGHT',
        p_db_column                   => 'DIALOG_HEIGHT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_MAX_WIDTH',
        p_db_column                   => 'DIALOG_MAX_WIDTH',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_ATTRIBUTES',
        p_db_column                   => 'DIALOG_ATTRIBUTES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_CSS_CLASSES',
        p_db_column                   => 'DIALOG_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DIALOG_CHAINED',
        p_db_column                   => 'DIALOG_CHAINED',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'PAGE_MODE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'MODAL,NON_MODAL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'OVERWRITE_NAVIGATION_LIST',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'PAGE_NAVIGATION_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'L' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_LIST',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Do not show Navigation Menu List',
        p_depending_on_comp_prop_name => 'OVERWRITE_NAVIGATION_LIST',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_LIST_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT_NAV_LIST_POSITION#',
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAVIGATION_LIST_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT_NAV_LIST_TEMPLATE#',
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAV_LIST_TEMPLATE_OPTIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'NAVIGATION_LIST_TEMPLATE',
        p_depending_on_comp_prop_name => 'NAVIGATION_LIST',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STANDARD_TAB_SET',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'PAGE_NAVIGATION_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'T' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CURSOR_FOCUS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'AUTO_FIRST_ITEM',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_WARN_ON_UNSAVED_CHANGES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_TRANSITION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Theme Default',
        p_null_help_text              => 'Uses the setting defined within the theme defaults.',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POPUP_TRANSITION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Theme Default',
        p_null_help_text              => 'Uses the setting defined within the theme defaults.',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MEDIA_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_FUNCTION_AND_GLOBAL_VARIABLE_DECLARATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_EXECUTE_WHEN_PAGE_LOADS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INCLUDE_STANDARD_JAVASCRIPT_AND_CSS',
        p_db_column                   => null,
        p_view_column                 => 'INCLUDE_APEX_CSS_JS_YN',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSS_FILE_URLS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INLINE_CSS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HTML_HEADER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_HTML_BODY_ATTRIBUTE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HEADER_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BODY_HEADER',
        p_db_column                   => null,
        p_view_column                 => 'BODY_HEADER',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FOOTER_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'READ_ONLY',
        p_help_text_type              => null,
        p_db_column_type              => null,
        p_view_column_type            => 'READ_ONLY_CONDITION_TYPE',
        p_db_column_expr1             => null,
        p_db_column_expr2             => null,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHORIZATION_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_help_text                   => q'~<p>Select an authorization scheme applied to the page. Authorization schemes are defined at the application-level and can be applied to many elements within the application.</p>
<p>An authorization scheme is evaluated either once for each application session (at session creation), or once for each page view. If the selected authorization scheme evaluates to <strong>TRUE</strong>, then the page displays and is subject to other defined conditions. If it evaluates to <strong>FALSE</strong>, then the page does not display and an error message displays.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_AUTHENTICATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REJOIN_EXISTING_SESSIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_null_help_text              => 'Inherits the setting defined against the application.',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEEP_LINKING',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_null_help_text              => 'Uses the setting defined in the application security attributes.',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_ACCESS_PROTECTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORM_AUTO_COMPLETE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'ON',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BROWSER_CACHE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Application Default',
        p_null_help_text              => 'Uses the setting defined in the application security attributes.',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_DUPLICATE_PAGE_SUBMISSIONS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'RELOAD_ON_SUBMIT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'S',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ON_DUPLICATE_PAGE_SUBMISSIONS_GO_TO_THIS_URL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ALLOW_DUPLICATE_PAGE_SUBMISSIONS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_MODE',
        p_db_column                   => 'CACHE_MODE',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'NOCACHE',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_TIMEOUT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '21600',
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'CACHE',
        p_view_column_type            => 'CACHE_CONDITION_TYPE',
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE',
        p_help_text_type              => null,
        p_db_column_type              => null,
        p_db_column_expr1             => null,
        p_db_column_expr2             => null );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUILD_OPTION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INLINE_ERROR_NOTIFICATION_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ERROR_HANDLING_FUNCTION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HELP_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IS_GLOBAL_PAGE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'PAGE_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    -- Component Properties for PAGE_GROUP
    --
    l_component_type_id := c_comp_type_page_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'GROUP_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of this page group.~' );
/*
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DESCRIPTION',
        p_db_column         => 'GROUP_DESC',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter a description for this page group.~' );
*/
    --
    --
    -- Component Properties for PAGE_COMPUTATION
    --
    l_component_type_id           := c_comp_type_page_computation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    store_computation_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for APPLICATION_COMPUTATION
    --
    l_component_type_id           := c_comp_type_app_computation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    store_computation_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for DYNAMIC_ACTION_EVENT
    --
    l_component_type_id := c_comp_type_da_event;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_check_uniqueness            => 'PAGE',
        p_supports_substitution       => false,
        p_default_value               => '#PLEASE_CHANGE#',
        p_help_text                   => q'~Enter the name of the dynamic action.~' );
    --
    store_component_prop (
    	p_component_type_id  		  => l_component_type_id,
        p_property_name               => 'IG_REGION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXECUTION_SEQUENCE',
        p_db_column                   => 'EVENT_SEQUENCE',
        p_is_required                 => true,
        p_is_common                   => true );
    --
    store_component_prop (
        p_component_type_id 		  => l_component_type_id,
        p_property_name     		  => 'EVENT',
        p_db_column         		  => null,
        p_is_required       		  => true,
        p_is_common         		  => true,
        p_default_value     		  => 'change' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOM_EVENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'EVENT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'custom' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_TYPE',
        p_db_column                   => null,
        p_view_column                 => 'WHEN_SELECTION_TYPE_CODE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'EVENT',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'apexbeforepagesubmit,unload,resize,ready,orientationchange' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_REGION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'REGION,COLUMN',
        p_comment_text                => q'~$$$ data model currently uses a SET NULL constraint, I think we should change that to a CASCADE as well~' );
    --
    store_component_prop (
    	p_component_type_id  		  => l_component_type_id,
    	p_property_name  			  => 'WHEN_COLUMNS',
    	p_db_column  				  => null,
    	p_is_required  				  => true,
    	p_is_common  				  => true,
        p_parent_comp_prop_name       => 'WHEN_REGION',
    	p_reference_on_delete  		  => 'WEAK_CASCADE',
    	p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_BUTTON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_ITEMS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_DOM_OBJECT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DOM_OBJECT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_JQUERY_SELECTOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JQUERY_SELECTOR' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_JAVASCRIPT_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'WHEN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JAVASCRIPT_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JS_CONDITION',
        p_db_column                     => null,
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'IG_REGION',
        p_depending_on_condition_type   => 'NULL' );
    --
    store_component_prop (
    	p_component_type_id 		    => l_component_type_id,
        p_property_name                 => 'JS_CONDITION_ITEM',
        p_db_column                     => null,
        p_is_required                   => true,
        p_is_common                     => true,
        p_depending_on_comp_prop_name => 'JS_CONDITION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'EQUALS,NOT_EQUALS,GREATER_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN,LESS_THAN_OR_EQUAL,NULL,NOT_NULL,IN_LIST,NOT_IN_LIST' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_COND_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JS_CONDITION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'EQUALS,NOT_EQUALS,GREATER_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN,LESS_THAN_OR_EQUAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_COND_LIST',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JS_CONDITION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IN_LIST,NOT_IN_LIST' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_COND_JAVASCRIPT_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JS_CONDITION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JAVASCRIPT_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JS_CONDITION_WHEN_IG',
        p_db_column                     => null,
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'IG_REGION',
        p_depending_on_condition_type   => 'NOT_NULL' );
    --
    store_component_prop (
    	p_component_type_id 		    => l_component_type_id,
        p_property_name                 => 'JS_CONDITION_ELEMENT_TYPE',
        p_db_column                     => null,
        p_is_required                   => true,
        p_is_common                     => true,
        p_default_value  				=> 'COLUMN',
        p_depending_on_comp_prop_name => 'JS_CONDITION_WHEN_IG',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'EQUALS,NOT_EQUALS,GREATER_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN,LESS_THAN_OR_EQUAL,NULL,NOT_NULL,IN_LIST,NOT_IN_LIST' );
    --
    store_component_prop (
    	p_component_type_id 		    => l_component_type_id,
        p_property_name                 => 'JS_CONDITION_ITEM_WHEN_IG',
        p_db_column                     => null,
        p_is_required                   => true,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JS_CONDITION_ELEMENT_TYPE',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'ITEM' );
    --
    store_component_prop (
    	p_component_type_id 		    => l_component_type_id,
        p_property_name                 => 'JS_CONDITION_COLUMN_WHEN_IG',
        p_db_column                     => null,
        p_is_required                   => true,
        p_is_common                     => true,
        p_parent_comp_prop_name         => 'IG_REGION',
        p_reference_on_delete           => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name   => 'JS_CONDITION_ELEMENT_TYPE',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_COND_VALUE_WHEN_IG',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JS_CONDITION_WHEN_IG',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'EQUALS,NOT_EQUALS,GREATER_THAN,GREATER_THAN_OR_EQUAL,LESS_THAN,LESS_THAN_OR_EQUAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_COND_LIST_WHEN_IG',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JS_CONDITION_WHEN_IG',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IN_LIST,NOT_IN_LIST' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JS_COND_JS_EXPRESSION_WHEN_IG',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JS_CONDITION_WHEN_IG',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JAVASCRIPT_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EVENT_SCOPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'bind' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'STATIC_CONTAINER_JQUERY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'EVENT_SCOPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'live' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => 'Select a condition type to be met in order for this dynamic action to be active.',
        p_db_column_type    => 'DISPLAY_WHEN_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'DISPLAY_WHEN_COND',
        p_db_column_expr2   => 'DISPLAY_WHEN_COND2' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'DA_EVENT_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    -- Component Properties for DYNAMIC_ACTION_ACTION
    --
    l_component_type_id := c_comp_type_da_action;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DA_ACTION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_SHOW' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IG_REGION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'AFFECTED_TYPE',
        p_db_column             => null,
        p_view_column           => 'AFFECTED_ELEMENTS_TYPE_CODE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'ITEM,BUTTON,REGION,JQUERY_SELECTOR,JAVASCRIPT_EXPRESSION,TRIGGERING_ELEMENT,EVENT_SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_REGION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION',
        p_comment_text                => q'~$$$ data model currently uses a SET NULL constraint, I think we should change that to a CASCADE as well~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_prop_name       => 'IG_REGION',
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_BUTTON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BUTTON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_ITEMS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_DOM_OBJECT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DOM_OBJECT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_JQUERY_SELECTOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JQUERY_SELECTOR' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AFFECTED_JAVASCRIPT_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'AFFECTED_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'JAVASCRIPT_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'ACTION_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'DA_EVENT',
        p_db_column           => null,
        p_is_required         => true,
        p_is_common           => false,
        p_reference_on_delete => 'DB_CASCADE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FIRE_WHEN_EVENT_RESULT_IS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'TRUE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIRE_ON_PAGE_LOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        -- used to trigger a dependency check when plug-in is changed. This is necessary to set the default value specified in standard attributes
        p_depending_on_comp_prop_name => 'DA_ACTION_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STOP_EXECUTION_ON_ERROR',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'STOP_EXECUTION_ON_ERROR' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'WAIT_FOR_RESULT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'WAIT_FOR_RESULT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_INIT_JAVASCRIPT_CODE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null,
        p_plugin_std_attributes => 'INIT_JAVASCRIPT_CODE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'DA_ACTION_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for PAGE_ITEM
    --
    l_component_type_id := c_comp_type_page_item;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ITEM_NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => 'P#PAGE_ID#_NEW' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ITEM_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_TEXT_FIELD' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LABEL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_default_value         => '#PLEASE_CHANGE#',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LABEL_ALIGNMENT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'RIGHT-CENTER',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIELD_TABLE_CELL_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'VISIBLE',
        p_depending_on_comp_prop_name => 'LABEL_ALIGNMENT',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'ABOVE' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'ITEM_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'REGION',
        p_db_column           => 'ITEM_PLUG_ID',
        p_is_required         => true,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_CASCADE',
        p_help_text           => q'~Select the region in which the item displays. All items should be specified in a region.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_FIELD_ALIGNMENT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'LEFT-CENTER',
        p_plugin_std_attributes => 'ELEMENT' );
    --
    store_grid_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_new_grid_db_column    => 'NEW_GRID',
        p_new_row_db_column     => 'BEGIN_ON_NEW_LINE',
        p_column_db_column      => 'GRID_COLUMN',
        p_new_column_db_column  => 'BEGIN_ON_NEW_FIELD',
        p_column_span_db_column => 'COLSPAN',
        p_row_span_db_column    => 'ROWSPAN',
        p_column_attr_db_column => 'CATTRIBUTES_ELEMENT',
        p_has_label_column_span => true,
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FIELD_TEMPLATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_reference_on_delete   => 'WEAK_NULL',
        p_default_value         => '#DEFAULT_FIELD_TEMPLATE#',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'ITEM_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_plugin_std_attributes       => 'VISIBLE',
        p_parent_comp_prop_name       => 'FIELD_TEMPLATE',
        p_depending_on_comp_prop_name => 'FIELD_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'ITEM_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'VISIBLE',
        p_depending_on_comp_prop_name => 'FIELD_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL',
        p_help_text                   => q'~<p>Enter classes to add to this item. You may add multiple classes by separating them with spaces.<p/>
        <p>This property can be used to make style modifications to the item, beyond template options, or to provide a simpler way of selecting this item via JavaScript.</p>
        <p>Note: To apply CSS classes to the HTML form element tag, please see the CSS Classes property under the Advanced group.</p>~', 
        p_comment_text                => '$$$ we should only show this property if the template supports the #ITEM_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_CSS_CLASSES',
        p_db_column                   => 'ITEM_ICON_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'ICON',
        p_help_text                   => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a target="_blank" href="http://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>
        <p>Note: This icon will be displayed inside of the item, not as part of the label.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        -- This property is used if the plug-in std attribute FORMAT_MASK_DATE or FORMAT_MASK_NUMBER are not checked
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'PLUGIN' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FORMAT_MASK_DATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'FORMAT_MASK_DATE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FORMAT_MASK_NUMBER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'FORMAT_MASK_NUMBER' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_WIDTH',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_default_value         => '30',
        p_plugin_std_attributes => 'WIDTH' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_HEIGHT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_default_value         => '1',
        p_plugin_std_attributes => 'HEIGHT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_VALUE_PLACEHOLDER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'PLACEHOLDER' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'VALUE_REQUIRED',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'SESSION_STATE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_MAX_CHARACTERS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'WIDTH' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LOV_TYPE',
        p_db_column             => null,
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAMED_LOV',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SHARED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_SQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_STATIC_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'STATIC:Display1;Return1,Display2;Return2',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_FUNC_BODY_RETURNING_SQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL_FUNCTION_BODY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_EXTRA_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_plugin_std_attributes       => 'LOV',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_NULL_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_plugin_std_attributes       => 'LOV_DISPLAY_NULL',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NULL_DISPLAY_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NULL_RETURN_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CASCADING_LOV_PARENT_ITEMS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'CASCADING_LOV',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_PAGE_ITEMS_TO_SUBMIT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CASCADING_LOV_PARENT_ITEMS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OPTIMIZE_REFRESH',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CASCADING_LOV_PARENT_ITEMS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ADVANCED_CSS_CLASSES',
        p_db_column             => 'TAG_CSS_CLASSES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT',
        p_help_text             => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CUSTOM_ATTRIBUTES',
        p_db_column             => 'TAG_ATTRIBUTES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT',
        p_help_text             => q'~Enter additional attributes to be included in the form element HTML tag. The <code>size</code> and <code>id</code> HTML attributes are generated and therefore should not be supplied. For the <code>class</code> HTML attribute it is better to use the dedicated <em>CSS Classes</em> attribute instead.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_OPTION_HTML_ATTRIBUTES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT_OPTION' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_PRE_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_POST_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ITEM_WARN_ON_UNSAVED_CHANGES',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_null_text             => 'Page Default',
        p_null_help_text        => q'~Include item in the unsaved changes check, if the check is enabled at page level.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SOURCE_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'DB_COLUMN',
        p_plugin_std_attributes => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_STATIC_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_COLON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'QUERY_COLON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_PLSQL_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_PLSQL_FUNCTION_BODY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION_BODY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_DB_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DB_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_PREFERENCE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PREFERENCE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SOURCE_USED',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'NO',
        p_plugin_std_attributes => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'POST_CALCULATION_COMPUTATION',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'MAINTAIN_SESSION_STATE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DEFAULT_VALUE_TYPE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_STATIC_TEXT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC_TEXT_WITH_SUBSTITUTIONS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_PLSQL_FUNC_BODY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL_FUNCTION_BODY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_PLSQL_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DEFAULT_VALUE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SHOW_QUICK_PICKS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'QUICKPICK' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LINK_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_01',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_01',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_02',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_02',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_03',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_03',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_04',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_04',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_05',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_05',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_06',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_06',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_07',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_07',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_08',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_08',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_09',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_09',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_LABEL_10',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'QUICK_PICK_VALUE_10',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_QUICK_PICKS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'DISPLAY_WHEN_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'DISPLAY_WHEN',
        p_db_column_expr2   => 'DISPLAY_WHEN2' );
    --
    store_condition_type_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_name_prefix           => 'READ_ONLY',
        p_help_text_type        => q'~<p>Select a condition type that must be met in order for this component to render as read-only.
Not selecting a condition causes the item to render normally.
A read-only item is rendered with the same settings as a Display Only item.</p>
<p>Note: Set the condition type to <strong>Never</strong> to always render the item as an enterable field.
This setting overwrites any read-only condition setting on the region or page level.</p>~',
        p_db_column_type        => null,
        p_view_column_type      => 'READ_ONLY_CONDITION_TYPE',
        p_db_column_expr1       => null,
        p_db_column_expr2       => null,
        p_is_common             => false,
        p_plugin_std_attributes => 'READONLY' );
    --
    /* Items have additional "HTML Attributes" property rendered when read-only.
          Not worth rolling into store_condition_type_comp_prop, so just adding here. */
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'READ_ONLY_HTML_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'READ_ONLY_CONDITION_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SESSION_STATE_PROTECTION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ENCRYPT_SESSION_STATE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'ENCRYPT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'ESCAPE_OUTPUT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'RESTRICTED_CHARACTERS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_null_text         => 'All characters can be saved.' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'INLINE_HELP_TEXT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HELP_TEXT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~Enter help text for this item. The help text may be used to provide field level context sensitive help.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_INIT_JAVASCRIPT_CODE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null,
        p_plugin_std_attributes => 'INIT_JAVASCRIPT_CODE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'ITEM_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for BUTTON
    --
    l_component_type_id := c_comp_type_button;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUTTON_NAME',
        p_db_column         => 'BUTTON_NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PAGE',
        p_default_value     => '#PLEASE_CHANGE#',
        p_help_text         => q'~Enter the name used to reference the button being clicked. When this page is submitted, the value of REQUEST is set to this button name.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUTTON_LABEL',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'BUTTON_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'REGION',
        p_db_column           => 'BUTTON_PLUG_ID',
        p_is_required         => true,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_CASCADE',
        p_help_text           => q'~Select the region in which the button displays. All buttons should be in a region.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_POSITION',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'BELOW_BOX',
        p_parent_comp_prop_name => 'REGION' );
    --
    store_grid_comp_prop (
        p_component_type_id     => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HORIZONTAL_ALIGNMENT',
        p_db_column                   => 'BUTTON_ALIGNMENT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'RIGHT',
        p_depending_on_comp_prop_name => 'BUTTON_POSITION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'TOP,TOP_AND_BOTTOM,ABOVE_BOX,BELOW_BOX,BOTTOM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ELEMENT_FIELD_ALIGNMENT',
        p_db_column                   => 'BUTTON_ALIGNMENT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'LEFT-CENTER',
        p_depending_on_comp_prop_name => 'BUTTON_POSITION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BODY' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUTTON_TEMPLATE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#DEFAULT_BUTTON_TEMPLATE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUTTON_IS_HOT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'TEMPLATE_OPTIONS',
        p_db_column             => 'BUTTON_TEMPLATE_OPTIONS',
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name => 'BUTTON_TEMPLATE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APPEARANCE_CSS_CLASSES',
        p_db_column         => 'BUTTON_CSS_CLASSES',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text      => '$$$ we should only show this property if the template supports the #BUTTON_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ICON_CSS_CLASSES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_comment_text      => '$$$ we should only show this property if the template supports the #ICON_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUTTON_ACTION',
        p_db_column         => null,
        p_view_column       => 'BUTTON_ACTION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'SUBMIT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_TARGET',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BUTTON_ACTION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL',
        p_parent_comp_prop_name       => 'BUTTON_ACTION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_EXECUTE_VALIDATIONS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'BUTTON_ACTION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'SUBMIT,REDIRECT_URL,DEFINED_BY_DA' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_WARN_ON_UNSAVED_CHANGES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'I',
        p_null_text                   => 'Page Default',
        p_null_help_text              => q'~Check for unsaved changes when the button is clicked, if the check is enabled at page level.~',
        p_depending_on_comp_prop_name => 'BUTTON_ACTION',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'DEFINED_BY_DA' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BUTTON_DATABASE_ACTION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'STATIC_ID',
        p_db_column         => 'BUTTON_STATIC_ID',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter the static ID for the button. If defined, the static ID is used as the ID for the button. The static ID can be useful when developing custom JavaScript behavior for the button. If the static ID is not defined, the button generates an internal ID.</p>
<p>Note: The template must include the <code>#BUTTON_ID#</code> substitution string, in order for the button to utilize the static ID entered.</p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CUSTOM_ATTRIBUTES',
        p_db_column         => 'BUTTON_CATTRIBUTES',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter HTML text to include for this button:
<ul>
  <li>For buttons of type <strong>HTML Button</strong>, this text is added to the HTML element definition.</li>
  <li>For buttons based on templates, your template must include the <code>#BUTTON_ATTRIBUTES#</code> substitution string.</li>
</ul>
<p>You can use this attribute to control tab stops</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_ELEMENT_PRE_TEXT',
        p_view_column           => 'PRE_ELEMENT_TEXT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_ELEMENT_POST_TEXT',
        p_view_column           => 'POST_ELEMENT_TEXT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'BUTTON_REQUEST_SOURCE_TYPE',
        p_view_column           => 'REQUEST_SOURCE_TYPE',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUTTON_REQUEST_SOURCE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => true,
        p_depending_on_comp_prop_name => 'BUTTON_REQUEST_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'BUTTON_CONDITION_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'BUTTON_CONDITION',
        p_db_column_expr2   => 'BUTTON_CONDITION2' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'BUTTON_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for REGION
    --
    l_component_type_id := c_comp_type_region;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'TITLE',
        p_db_column         => 'PLUG_NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#',
        p_help_text         => q'~Enter a region title. The region title only displays when it is defined in the region template.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REGION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_STATIC' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_SQL',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_SQL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLSQL_CODE',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_PLSQL',
        p_help_text             => q'~Enter the PL/SQL code to generate the HTML output.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_FUNCTION_RETURNING_SQL',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_PLSQL_FUNCTION' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_HTML_CODE',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_HTML' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'REGION_PLAIN',
        p_db_column             => 'PLUG_SOURCE',
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'SOURCE_PLAIN' );
    --
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'SOURCE_LOCATION',
        p_db_column             => null,
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => false,
        p_default_value         => 'LOCAL',
        p_plugin_std_attributes => 'SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_REMOTE_DATABASE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'TABLE',
        p_depending_on_comp_prop_name => 'SOURCE_LOCATION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'LOCAL,REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_OWNER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_TABLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE',
        p_parent_comp_prop_name       => 'SOURCE_QUERY_OWNER' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INCLUDE_ROWID_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_WHERE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE',
        p_parent_comp_prop_name       => 'SOURCE_QUERY_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_ORDER_BY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE',  -- $$$ should also be depending on a standard plug-in attribute
        p_parent_comp_prop_name       => 'SOURCE_QUERY_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_SQL_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_PLSQL_FUNCTION_BODY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNC_BODY_RETURNING_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_WEB_SRC_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'WEB_SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_LIST',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REGION_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_LIST' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_BREADCRUMB',
        p_db_column                   => 'MENU_ID',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'REGION_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_BREADCRUMB' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_PAGE_ITEMS_TO_SUBMIT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
/* $$$ has to be investigated, doesn't work in wwv_flow_property_dev.clear_property_values the reason might be that SOURCE_LOCATION has a higher property id and
       that's why the order in which the properties are processed causes the issue

        p_depending_on_comp_prop_name => 'SOURCE_LOCATION',
        p_depending_on_has_to_exist   => false,
        p_depending_on_condition_type => 'NOT_NULL',
*/
        p_plugin_std_attributes       => 'AJAX_ITEMS_TO_SUBMIT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXTERNAL_FILTER_EXPR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'SOURCE_WEB_SRC_QUERY',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXTERNAL_ORDER_BY_EXPR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'SOURCE_WEB_SRC_QUERY',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OPTIMIZER_HINT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'HAS_GENERIC_COLUMNS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'DERIVED_REPORT_COLUMNS',
        p_depending_on_comp_prop_name  => 'REGION_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'NATIVE_SQL_REPORT',
        p_depending_on_comp_prop_name2 => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'FUNC_BODY_RETURNING_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GENERIC_COLUMN_COUNT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'HAS_GENERIC_COLUMNS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'GENERIC_REPORT_COLUMNS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_POST_PROCESSING',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'SOURCE_WEB_SRC_QUERY',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_PROC_WHERE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_POST_PROCESSING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'WHERE_ORDER_BY_CLAUSE',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_PROC_ORDER_BY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_POST_PROCESSING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'WHERE_ORDER_BY_CLAUSE',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_PROC_SQL_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_POST_PROCESSING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_PROC_PLSQL_FUNCTION_BODY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_POST_PROCESSING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNC_BODY_RETURNING_SQL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REMOTE_SQL_CACHING',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Disabled',
        p_null_help_text              => q'~Result is not cached. Data is fetched from the remote database for each request.~',
        p_depending_on_comp_prop_name => 'SOURCE_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REMOTE_SQL_INVALIDATE_WHEN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'REMOTE_SQL_CACHING',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'PLUG_DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'PARENT_REGION',
        p_db_column           => 'PARENT_PLUG_ID',
        p_is_required         => false,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_CASCADE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REGION_POSITION',
        p_db_column                   => 'PLUG_DISPLAY_POINT',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'BODY',
        p_depending_on_comp_prop_name => 'PARENT_REGION',
        p_depending_on_condition_type => 'NULL' );
    --
    store_grid_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_new_grid_db_column    => 'PLUG_NEW_GRID',
        p_new_row_db_column     => 'PLUG_NEW_GRID_ROW',
        p_column_db_column      => 'PLUG_DISPLAY_COLUMN',
        p_new_column_db_column  => 'PLUG_NEW_GRID_COLUMN',
        p_column_span_db_column => 'PLUG_GRID_COLUMN_SPAN',
        p_row_span_db_column    => null,
        p_column_css_db_column  => 'PLUG_GRID_COLUMN_CSS_CLASSES',
        p_column_attr_db_column => 'PLUG_COLUMN_WIDTH' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REGION_TEMPLATE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_default_value     => '#DEFAULT_REGION_TEMPLATE#' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'REGION_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'REGION_TEMPLATE',
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'REGION_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_parent_comp_prop_name       => 'REGION_TEMPLATE',
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~',
        p_comment_text                => '$$$ we should only show this property if the template supports the #REGION_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_CSS_CLASSES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_parent_comp_prop_name       => 'REGION_TEMPLATE',
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL',
        p_comment_text                => '$$$ we should only show this property if the template supports the #ICON_CSS_CLASSES# placeholder' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ITEM_DISPLAY_POSITION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'ABOVE' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'MASTER_REGION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'REGION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_IG' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'STATIC_ID',
        p_db_column         => 'REGION_NAME',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~<p>Enter the static ID for this region. If defined, this is used as the ID for the region, using the substitution string <code>#REGION_STATIC_ID#</code>, which can be useful if developing custom JavaScript behavior for the region. If this is not defined, the region generates an internal ID.</p>
<p>Note: The template must include the <code>#REGION_STATIC_ID#</code> substitution string, in order for the region to utilize the static ID entered.</p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CUSTOM_ATTRIBUTES',
        p_db_column         => 'REGION_ATTRIBUTES_SUBSTITUTION',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter the value substituted into region attributes. Region templates that contain the substitution string <code>#REGION_ATTRIBUTES#</code> are substituted with this value.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REGION_IMAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IMAGE_TAG_ATTRIBUTES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REGION_DISPLAY_SELECTOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'REGION_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXCLUDE_TITLE_FROM_TRANSLATION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SCHEMA_OVERRIDE_ITEM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'REGION_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_SQL_REPORT,NATIVE_IR' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HEADER_TEXT',
        p_db_column         => 'PLUG_HEADER',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter HTML text displayed at the top of the region, before the <code>#BODY#</code> content.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FOOTER_TEXT',
        p_db_column         => 'PLUG_FOOTER',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~<p>Enter a region footer that displays directly after the body content, after <code>#BODY#</code> in the region template.
You may use shortcuts, as well as the substitution string <code>#TIMING#</code>, to display the time consumed to render the region.</p>
<p>For report regions you can use the following pagination substitution strings:</p>
<dl>
  <dt><code>#ROWS_FETCHED#</code></dt>
    <dd>Shows the number of rows fetched by the reporting engine (the page size). Use these substitution strings to display customized messages to the user.</dd>
  <dt><code>#TOTAL_ROWS#</code></dt>
    <dd>Displays the total number of rows that satisfy a SQL query used for a report. For example, Z in rows X - Y of Z</dd>
  <dt><code>#FIRST_ROW_FETCHED#</code></dt>
    <dd>The X in rows X - Y of Z</dd>
  <dt><code>#LAST_ROW_FETCHED#</code></dt>
    <dd>The Y in rows X - Y of Z</dd>
</dl>~' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'PLUG_DISPLAY_CONDITION_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'PLUG_DISPLAY_WHEN_CONDITION',
        p_db_column_expr2   => 'PLUG_DISPLAY_WHEN_COND2' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => 'READ_ONLY',
        p_help_text_type    => '<p>Select a condition type that must be met in order for this region to render page items as read-only.
Not selecting a condition causes the page items to render normally.</p>
<p>Note: If you want a page item in this region (for example a search field) to always render as an enterable page item, independent of how this condition evaluates, then you should set the read only condition of that page item to "Never" to overwrite the region setting.</p>',
        p_db_column_type    => 'PLUG_READ_ONLY_WHEN_TYPE',
        p_view_column_type  => 'READ_ONLY_CONDITION_TYPE',
        p_db_column_expr1   => 'PLUG_READ_ONLY_WHEN',
        p_db_column_expr2   => 'PLUG_READ_ONLY_WHEN2',
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'PLUG_REQUIRED_ROLE',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'ESCAPE_OUTPUT' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CACHE_MODE',
        p_db_column         => 'PLUG_CACHING',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'NOCACHE' );
/* $$$ add this condition as soon as we have a view for wwv_flow_plugs where we can set a default -> CACHE_MODE has a NN constraint        ,
        p_depending_on_comp_prop_name => 'REGION_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'NATIVE_IR,NATIVE_DISPLAY_SELECTOR' );
*/
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_TIMEOUT',
        p_db_column                   => 'PLUG_CACHING_MAX_AGE_IN_SEC',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '21600',
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CACHE_DEPENDS_ON_ITEMS',
        p_db_column                   => 'PLUG_CACHE_DEPENDS_ON_ITEMS',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'CACHE',
        p_help_text_type              => 'Select a condition type that must be met for the region to be cached.',
        p_db_column_type              => 'PLUG_CACHE_WHEN',
        p_view_column_type            => 'CACHE_WHEN',
        p_db_column_expr1             => 'PLUG_CACHE_EXPRESSION1',
        p_db_column_expr2             => 'PLUG_CACHE_EXPRESSION2',
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CACHE_MODE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NOCACHE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CUSTOMIZABLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '0' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOMIZED_OPTION_NAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CUSTOMIZABLE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => '1,2' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'PLUG_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for PAGE_PROCESS
    --
    l_component_type_id := c_comp_type_page_process;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'PROCESS_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'PAGE',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of the page process for easy identification by developers.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGE_PROCESS_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_PLSQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLSQL_PROCESS_LOCATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'LOCAL',
        p_depending_on_comp_prop_name => 'PAGE_PROCESS_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_PLSQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_REMOTE_DATABASE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PLSQL_PROCESS_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLSQL_CODE',
        p_db_column                   => 'PROCESS_SQL_CLOB',
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'DEPENDS',
        p_depending_on_comp_prop_name => 'PAGE_PROCESS_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_PLSQL',
        p_help_text                   => q'~Enter the PL/SQL code to be executed.~' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'PROCESS_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PROCESS_POINT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'AFTER_SUBMIT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PROCESS_REGION',
        p_db_column             => null,
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_reference_on_delete   => 'WEAK_CASCADE',
        p_plugin_std_attributes => 'REGION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'RUN_PROCESS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SUCCESS_MESSAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~<p>Enter the success message for this process.
If the process runs and does not generate an error, then this process success message displays in the notification section of the resulting page displayed.
If you are branching to another page via a URL redirect, you may need to check the <em>preserve success message</em> attribute.</p>',
<p>For multi row processes, the following substitution string can be used to get the number of records processed:</p>
<ul>
  <li>Insert: <code>#MRI_COUNT#</code></li>
  <li>Update: <code>#MRU_COUNT#</code></li>
  <li>Delete: <code>#MRD_COUNT#</code></li>
</ul>
<p>For the Send E-Mail process type the substitution string <code>#TO#</code> can be used to get the addressees of the e-mail.</p>
<p>Plug-ins can have other substitution strings as well. See Plug-in documentation for details.</p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ERROR_MESSAGE',
        p_db_column         => 'PROCESS_ERROR_MESSAGE',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~<p>Enter the error message for this process.
This message displays if an unhandled exception is raised. After any error processing stops, a rollback is issued and an error message displays.</p>
<p>Note: the SQL error message (sqlerrm) displays by default if <strong>On Error Page</strong> is defined as the error display location, there is no need to add <code>#SQLERRM#</code> to your error text.</p>
<p>Error messages can include the following substitution strings:</p>
<dl>
  <dt><code>#SQLERRM_TEXT#</code></dt>
  <dd>Text of error message without the error number.</dd>
  <dt><code>#SQLERRM#</code></dt>
  <dd>Complete error message.</dd>
</dl>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PROCESS_ERROR_DISPLAY_LOCATION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'INLINE_IN_NOTIFICATION' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'WHEN_BUTTON_PRESSED',
        p_db_column           => 'PROCESS_WHEN_BUTTON_ID',
        p_is_required         => false,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXECUTION_SCOPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'PROCESS_REGION',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_condition_type_comp_prop (
        p_component_type_id   => l_component_type_id,
        p_name_prefix         => null,
        p_help_text_type      => null,
        p_reference_scope     => 'DEPENDS',
        p_db_column_type      => 'PROCESS_WHEN_TYPE',
        p_view_column_type    => 'CONDITION_TYPE',
        p_db_column_expr1     => 'PROCESS_WHEN',
        p_db_column_expr2     => 'PROCESS_WHEN2' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'EXECUTE_CONDITION',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'PROCESS_REGION',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'CONDITION_TYPE',
        p_depending_on_condition_type2 => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'PROCESS_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for AUTHENTICATION
    --
    l_component_type_id := c_comp_type_authentication;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name used by application developers to reference this authentication scheme.~' );
/*
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTHENTICATION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SUBSCRIBED_FROM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Select an application with an authentication scheme you want this scheme to subscribe to.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PLSQL_CODE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~<p>Enter a PL/SQL anonymous block of code that contains functions and procedures for verifying if the session is valid, pre- and post-authentication and (optionally) other authentication entry points.</p>
<p>For performance reasons, you can store this code in a PL/SQL package in the database.</p>~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'VERIFY_FUNCTION_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'INVALID_SESSION_URL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'INVALID_SESSION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PRE_AUTHENTICATION_PROCEDURE_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'POST_AUTHENTICATION_PROCEDURE_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HELP_TEXT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~Enter the text displayed in a help popup window that is available on the login page.
The help text should offer guidance and links to resources that assist users of the &PRODUCT_NAME. built-in login page,with information specific to the type of authentication your application is using (Open Door, &PRODUCT_NAME. account, or LDAP).~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'POST_LOGOUT_URL',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COOKIE_NAME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COOKIE_PATH',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COOKIE_DOMAIN',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SECURE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'RAS_MODE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '0' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'RAS_DYNAMIC_ROLES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'RAS_NAMESPACES',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    --
    -- Component Properties for BRANCH
    --
    l_component_type_id := c_comp_type_branch;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'BRANCH_NAME',
        p_is_required           => false,
        p_is_common             => true,
        p_supports_substitution => false,
        p_help_text             => q'~Enter the name of the branch for easy identification by developers.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'BRANCH_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BRANCH_POINT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'AFTER_PROCESSING' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BRANCH_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TARGET',
        p_db_column                   => 'BRANCH_REDIRECT_URL',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SAVE_STATE_BEFORE_BRANCH',
        p_db_column                   => null,
        p_view_column                 => 'SAVE_STATE_BEFORE_BRANCH',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REDIRECT_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_PAGE_NUMBER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BRANCH_TO_STEP,BRANCH_TO_PAGE_ACCEPT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_ACCEPT_REQUEST',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'BRANCH_TO_PAGE_ACCEPT' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BRANCH_TO_PAGE_IDENT_BY_ITEM,BRANCH_TO_URL_IDENT_BY_ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_PLSQL_FUNCTION_BODY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BRANCH_TO_FUNCTION_RETURNING_PAGE,BRANCH_TO_FUNCTION_RETURNING_URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BRANCH_PLSQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'BRANCH_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'WHEN_BUTTON_PRESSED',
        p_db_column           => 'BRANCH_WHEN_BUTTON_ID',
        p_is_required         => false,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'BRANCH_CONDITION_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'BRANCH_CONDITION',
        p_db_column_expr2   => 'BRANCH_CONDITION_TEXT' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'BRANCH_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for VALIDATION
    --
    l_component_type_id := c_comp_type_validation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'VALIDATION_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'PAGE',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name for the validation. This name should be descriptive so that developers can easily identify conditions being checked.~',
        p_comment_text          => q'~$$$ validation page does not have that constraint, should we add it?~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'VALIDATION_SEQUENCE',
        p_is_required       => true,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'VALIDATION_REGION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_CASCADE' );
    --
    store_val_type_comp_props (
        p_name_prefix => null );
    --
    store_val_type_comp_props (
        p_name_prefix => 'REGION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ALWAYS_EXECUTE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ERROR_MESSAGE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'VALIDATION_TYPE',
        p_depending_on_has_to_exist    => false,
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'FUNC_BODY_RETURNING_ERR_TEXT',
        p_depending_on_comp_prop_name2 => 'REGION_VALIDATION_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'FUNC_BODY_RETURNING_ERR_TEXT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ERROR_MESSAGE_DISPLAY_LOCATION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'INLINE_WITH_FIELD_AND_NOTIFICATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ASSOCIATED_ITEM',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_on_delete         => 'WEAK_CASCADE',
        p_depending_on_comp_prop_name => 'VALIDATION_REGION',
        p_depending_on_condition_type => 'NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ASSOCIATED_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'VALIDATION_REGION',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'VALIDATION_REGION' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'WHEN_BUTTON_PRESSED',
        p_db_column           => 'WHEN_BUTTON_PRESSED',
        p_is_required         => false,
        p_is_common           => true,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXECUTION_SCOPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'VALIDATION_REGION',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_condition_type_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_name_prefix           => null, -- $$$ should validations/processes have their own set of condition types, so that we are able to use "Item / Column ..." in the LOV text?
        p_help_text_type        => null,
        p_reference_scope       => 'DEPENDS',
        -- $$$ should we set that dependency to automatically clear the property if "Validation Region" gets changed?
        -- p_parent_comp_prop_name => 'VALIDATION_REGION',
        p_db_column_type        => 'VALIDATION_CONDITION_TYPE',
        p_view_column_type      => 'CONDITION_TYPE',
        p_db_column_expr1       => 'VALIDATION_CONDITION',
        p_db_column_expr2       => 'VALIDATION_CONDITION2' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'EXECUTE_CONDITION',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'VALIDATION_REGION',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'CONDITION_TYPE',
        p_depending_on_condition_type2 => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'VALIDATION_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for THEME
    --
    l_component_type_id := c_comp_type_theme;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'THEME_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a short descriptive name for this theme.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    --
    -- Component Properties for PAGE_TEMPLATE
    --
    l_component_type_id := c_comp_type_page_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a descriptive name for this specific page template.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    -- Component Properties for FIELD_TEMPLATE
    --
    l_component_type_id := c_comp_type_field_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'TEMPLATE_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name for this item template.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    -- Component Properties for BUTTON_TEMPLATE
    --
    l_component_type_id := c_comp_type_button_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'TEMPLATE_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name for this button template.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    -- Component Properties for REGION_TEMPLATE
    --
    l_component_type_id := c_comp_type_region_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'PAGE_PLUG_TEMPLATE_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a descriptive name for this region template.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    -- Component Properties for LIST_TEMPLATE
    --
    l_component_type_id := c_comp_type_list_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'LIST_TEMPLATE_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name for this list template.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    -- Component Properties for BREADCRUMB_TEMPLATE
    --
    l_component_type_id := c_comp_type_bc_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name for this breadcrumb template.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    -- Component Properties for CALENDAR_TEMPLATE
    --
    l_component_type_id := c_comp_type_calendar_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name for this calendar template.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    -- Component Properties for REPORT_TEMPLATE
    --
    l_component_type_id := c_comp_type_report_template;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'ROW_TEMPLATE_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a descriptive name for this specific report template.~' );
/*
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    --
    -- Component Properties for USER_INTERFACE
    --
    l_component_type_id := c_comp_type_user_interface;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'DISPLAY_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter a name for this user interface. The name displays in wizards, such as the Create Theme Wizard.~' );
/*
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'USER_INTERFACE_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQ',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Enter the display sequence for this user interface.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTO_DETECT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DEFAULT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'THEME',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'GLOBAL_PAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAVIGATION_LIST',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HOME_URL',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOGIN_URL',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
*/
    --
    --
    -- Component Properties for IR_ATTRIBUTES
    --
    l_component_type_id := c_comp_type_ir_attributes;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_LINK_COLUMN',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNIQUELY_IDENTIFY_ROWS_BY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'ROWID',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNIQUE_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'UNIQUELY_IDENTIFY_ROWS_BY',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COLUMN',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
/* $$$ not used by current IR edit page
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNIQUE_COLUMN_2',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'UNIQUE_COLUMN',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNIQUE_COLUMN_3',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'UNIQUE_COLUMN_2',
        p_depending_on_condition_type => 'NOT_NULL' );
*/
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'DETAIL_LINK',
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ICON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '<img src="#IMAGE_PREFIX#app_ui/img/icons/apex-edit-pencil.png" class="apex-edit-pencil" alt="">',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ATTRIBUTES',
        p_db_column                   => 'DETAIL_LINK_ATTR',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_AUTHORIZATION_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,C' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => 'LINK',
        p_help_text_type              => null,
        p_db_column_type              => null,
        p_view_column_type            => 'DETAIL_LINK_CONDITION_TYPE',
        p_db_column_expr1             => null,
        p_db_column_expr2             => null,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_EXCLUDE_NULL_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_HIDE_EXTRA_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IR_LINK_COLUMN',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_NULL_VALUES_AS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => '-' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_PAGINATION_TYPE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'ROWS_X_TO_Y',
        p_null_text         => 'None' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGINATION_DISPLAY_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'BOTTOM_RIGHT',
        p_depending_on_comp_prop_name => 'IR_PAGINATION_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_comment_text      => q'~$$$ default value "No data found." -> Engine should use that as default if nothing is defined. $$$ BTW, doesn't the region have a "No Data Found" column as well?~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_MORE_DATA_FOUND_MESSAGE',
        p_db_column         => 'MAX_ROW_COUNT_MESSAGE',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter the text message that displays when more rows are returned from the query than the maximum row count entered.~',
        p_comment_text      => q'~$$$ default value "This query returns more than...", but I think that we should always set it to NULL and the Engine should automatically use that text if nothing is defined~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'INCLUDE_SEARCH_BAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_SEARCH_TEXTBOX',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_FINDER_DROP_DOWN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_SEARCH_TEXTBOX',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_REPORTS_SELECT_LIST',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'TABS',
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_DISPLAY_ROW_COUNT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SEARCH_BUTTON_LABEL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAXIMUM_ROWS_PER_PAGE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_ACTIONS_MENU',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'INCLUDE_SEARCH_BAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_FILTER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_SELECT_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_ROWS_PER_PAGE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_SORT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_CONTROL_BREAK',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_HIGHLIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_COMPUTATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_AGGREGATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_CHART',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_GROUP_BY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_PIVOT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_FLASHBACK',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_SAVE_REPORTS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_SAVE_PUBLIC_REPORT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'ALLOW_USERS_TO_SAVE_REPORTS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SAVE_PUBLIC_REPORT_AUTHORIZATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ALLOW_USERS_TO_SAVE_PUBLIC_REPORT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_RESET',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_HELP',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_NOTIFY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_DOWNLOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'SHOW_ACTIONS_MENU',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_FORMATS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'CSV:HTML:EMAIL:XLS:PDF:RTF',
        p_depending_on_comp_prop_name => 'SHOW_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSV_SEPARATOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CSV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSV_ENCLOSED_BY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CSV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_FILENAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SHOW_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FIXED_HEADER',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'PAGE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIXED_HEADER_MAX_HEIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FIXED_HEADER',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ICON_VIEW_ENABLED',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'USE_CUSTOM_ICON_VIEW',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'ICON_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMNS_PER_ROW',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '6',
        p_depending_on_comp_prop_name => 'ICON_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_LINK_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_IMAGE_SOURCE_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_LABEL_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N',
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_IMAGE_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_HTML_ALT_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_HTML_TITLE_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_CUSTOM_LINK',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DETAIL_VIEW_ENABLED',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_BEFORE_ROWS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_FOR_EACH_ROW',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_AFTER_ROWS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REPORT_ALIAS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_comment_text      => q'~$$$ property has to be checked for uniqueness~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAXIMUM_ROW_COUNT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => '1000000' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REPORT_ID_ITEM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EMAIL_FROM_ADDRESS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DESCRIPTION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => 'Enter a description for this Interactive Report.' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );
    --
    --
    -- Component Properties for IR_COLUMN_GROUP
    --
    l_component_type_id := c_comp_type_ir_column_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'PARENT',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of the column group.  This name displays as a region header in the detailed view.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~Enter the display sequence for this column group. The sequence determines the order in which the column groups display in the detail view.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DESCRIPTION',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter a description for the column group. This description never displays to end users.~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );
    --
    --
    -- Component Properties for IR_COLUMN
    --
    l_component_type_id := c_comp_type_ir_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_NAME',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true,
        p_check_uniqueness  => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TZ_DEPENDENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'COLUMN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DATE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_COLUMN_DISPLAY_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'PLAIN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAMED_LOV',
        p_db_column                   => 'RPT_NAMED_LOV',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_HEADING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HEADING_ALIGNMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'CENTER',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SYNC_FORM_LABEL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SINGLE_ROW_VIEW_LABEL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SYNC_FORM_LABEL',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_ORDER',
        p_is_required       => true,
        p_is_common         => true,
        p_comment_text      => q'~$$$ that is currently not exposed on the old pages, but I think we have to do that to make it accessible. The current code also tries to have a order without gaps, is that necessar?~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_ALIGNMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'LEFT',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_GROUP',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'PLAIN,LINK,STRIP_HTML' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PCT_GRAPH_BACKGROUD_COLOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PCT_GRAPH' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PCT_GRAPH_FOREGROUND_COLOR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PCT_GRAPH' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PCT_GRAPH_BAR_WIDTH',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PCT_GRAPH' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_TABLE_OWNER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IMAGE,DOWNLOAD',
        p_comment_text                => q'~$$$ Note: A owner column is not yet supported by the format mask~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_TABLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IMAGE,DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE_OWNER' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_CONTENT_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IMAGE,DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_PK_COLUMN1',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IMAGE,DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_PK_COLUMN2',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IMAGE,DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_MIME_TYPE_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IMAGE,DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_FILENAME_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IMAGE,DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_LAST_UPDATED_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'IMAGE,DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BLOB_CHARSET_COLUMN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'COLUMN_LINK',
        p_is_required                 => false,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'LINK,PCT_GRAPH,PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TEXT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '##CURRENT_COLUMN_NAME##',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HTML_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'PLAIN,PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'D',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'HIDDEN_COLUMN,PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_NAMED_LOV',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_FILTER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => '1,2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_LOV_SQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_FILTER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'S,C' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'REPORT_FILTER_DATE_RANGES',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'ALL',
        p_depending_on_comp_prop_name  => 'COLUMN_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DATE',
        p_depending_on_comp_prop_name2 => 'IR_COLUMN_FILTER_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'D' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLAIN_LOV_IR_COLUMN_FILTER_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '1',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLAIN_LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PLAIN_LOV_IR_COLUMN_FILTER_LOV_SQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'PLAIN_LOV_IR_COLUMN_FILTER_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'S,C' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'STATIC_ID',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_help_text                   => q'~Enter the static ID for the column. If defined, the static ID is used as the ID for the corresponding table header (TH) cell, and as the HEADERS value for corresponding table data (TD) cells. The static ID can be useful when developing custom JavaScript behavior, or custom style for the column. If the static ID is not defined, the table generates an internal ID for these attribute values.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_HIDE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_SORT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_FILTER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_HIGHLIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_CONTROL_BREAK',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_AGGREGATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_COMPUTE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_CHART',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_GROUP_BY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_PIVOT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_TEXT',
        p_db_column                   => 'BLOB_DOWNLOAD_TEXT',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DOWNLOAD',
        p_parent_comp_prop_name       => 'BLOB_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CONTENT_DISPOSITION',
        p_db_column                   => 'BLOB_CONTENT_DISPOSITION',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'attachment',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DOWNLOAD' );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'DISPLAY_CONDITION_TYPE',
        p_view_column_type  => 'DISPLAY_CONDITION_TYPE',
        p_db_column_expr1   => 'DISPLAY_CONDITION',
        p_db_column_expr2   => 'DISPLAY_CONDITION2' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'PLAIN,LINK' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HELP_TEXT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'IR_COLUMN_DISPLAY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'HIDDEN_COLUMN' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'COLUMN_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );
    --
    --
    --
    -- Component Properties for IR_SAVED_REPORT
    --
    l_component_type_id := c_comp_type_ir_saved_report;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_SAVED_VISIBILITY',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_is_read_only          => true,
        p_check_uniqueness      => 'PARENT',
        p_supports_substitution => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IR_SAVED_REPORT_ALIAS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PAGE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LINK_EXAMPLE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );
    --
    --
    -- Component Properties for IG_ATTRIBUTES
    --
    l_component_type_id := c_comp_type_ig_attributes;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_EDITABLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
     store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EDIT_OPERATIONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'i:u:d',
        p_depending_on_comp_prop_name => 'IS_EDITABLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'EDIT_ROW_OPERATIONS_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'u,d',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LOST_UPDATE_CHECK_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'VALUES',
        p_depending_on_comp_prop_name  => 'IS_EDITABLE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ROW_VERSION_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'LOST_UPDATE_CHECK_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'COLUMN',
        p_parent_comp_type_id          => c_comp_type_region,
        p_parent_comp_prop_name        => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ADD_ROW_IF_EMPTY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'i' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SUBMIT_CHECKED_ROWS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'IS_EDITABLE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ADD_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'i' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'UPDATE_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'u' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DELETE_AUTHORIZATION_SCHEME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'EDIT_OPERATIONS',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'd' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LAZY_LOADING',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'REQUIRES_FILTER',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAXIMUM_ROW_COUNT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'REQUIRES_FILTER',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_NULL_VALUES_AS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => '-' );
    --
    /* as requested by John
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FIXED_ROW_HEIGHT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'IS_EDITABLE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N' );
        */
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IG_PAGINATION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'SCROLL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_TOTAL_ROW_COUNT',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_MORE_DATA_FOUND_MESSAGE',
        p_db_column         => 'MAX_ROW_COUNT_MESSAGE',
        p_is_required       => false,
        p_is_common         => false,
        p_depending_on_comp_prop_name => 'MAXIMUM_ROW_COUNT',
        p_depending_on_condition_type => 'NOT_NULL',
        p_help_text         => q'~Enter the text message that displays when the <strong>Maximum Rows to Process</strong> limit is exceeded.
The default message instructs end users to add additional filters to limit the number of records to be processed.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_TOOLBAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TOOLBAR_BUTTONS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'RESET:SAVE',
        p_depending_on_comp_prop_name => 'SHOW_TOOLBAR',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ADD_BUTTON_LABEL',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SHOW_TOOLBAR',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'EDIT_OPERATIONS',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'i' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_SAVE_PUBLIC_REPORT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PUBLIC_REPORT_AUTH_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ENABLE_SAVE_PUBLIC_REPORT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_SUBSCRIPTIONS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_DOWNLOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_DOWNLOAD_FORMATS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => 'CSV:HTML', /* CSV:HTML:XLS:PDF:RTF', */
        p_depending_on_comp_prop_name => 'ENABLE_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ENABLE_MAIL_DOWNLOAD',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'ENABLE_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSV_SEPARATOR',
        p_db_column                   => 'CSV_SEPARATOR',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IG_DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CSV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CSV_ENCLOSED_BY',
        p_db_column                   => 'CSV_ENCLOSED_BY',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IG_DOWNLOAD_FORMATS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CSV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DOWNLOAD_FILENAME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ENABLE_DOWNLOAD',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'FIXED_HEADER',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'PAGE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FIXED_REPORT_HEIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FIXED_HEADER',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REGION' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ICON_VIEW_ENABLED',
        p_db_column         => 'SHOW_ICON_VIEW',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N',
        p_help_text         => q'~Specify whether the Icon View is enabled. Selecting <strong>Yes</strong> adds a View Icons icon to the Search bar for interactive reports, or to the interactive grid View button, enabling users to access this view.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'USE_CUSTOM_ICON_VIEW',
        p_db_column                   => 'ICON_VIEW_USE_CUSTOM',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'ICON_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_CUSTOM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_ICON_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'CSS_CLASSES',
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_VIEW_ICON_BLOB_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'ICON_VIEW_ICON_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'BLOB' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_VIEW_ICON_URL_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'ICON_VIEW_ICON_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'URL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_VIEW_ICON_CSS_COLUMN',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'ICON_VIEW_ICON_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'CSS_CLASSES' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_ICON_ATTRIBUTES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ICON_VIEW_ICON_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'BLOB,URL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_ICON_VIEW_LINK_TARGET',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'ICON_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ICON_VIEW_LINK_ATTRIBUTES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'IG_ICON_VIEW_LINK_TARGET',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_VIEW_LABEL_REGION_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_ICON_VIEW',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DETAIL_VIEW_ENABLED',
        p_db_column         => 'SHOW_DETAIL_VIEW',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N',
        p_help_text         => q'~Specify whether the Detail View is enabled. Selecting <strong>Yes</strong> adds a View Details icon to the Search bar for interactive reports, or to the interactive grid View button, enabling users to access this view.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_BEFORE_ROWS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_FOR_EACH_ROW',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_examples                    => q'~<pre>
&lt;tr&gt;&lt;td align="right"&gt;&ENAME_LABEL.:&lt;/td&gt;&lt;td&gt;&ENAME.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td align="right"&gt;&JOB_LABEL.:&lt;/td&gt;&lt;td&gt;&JOB.&lt;/td&gt;&lt;/tr&gt;
</pre>~',
        p_help_text                   => q'~<p>Enter the body for report rows in the Detail View.</p>
<p>The following substitution strings are available:
<ul>
<li><code>&COLUMN_NAME.</code> - substitution strings for column labels and names.</li>
<li><code>&APEX$ROW_ID.</code> - the record identifier for the row.</li>
<li><code>&APEX$ROW_INDEX.</code> - the record display sequence number.</li>
</ul>
</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DETAIL_VIEW_AFTER_ROWS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DETAIL_VIEW_ENABLED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ORACLE_TEXT_INDEX_COLUMN',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_parent_comp_type_id   => c_comp_type_region,
        p_parent_comp_prop_name => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EMAIL_FROM_ADDRESS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'JAVASCRIPT_CODE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_examples          => q'~<pre>
function( options ) {
    options.toolbar = false;
    return options;
}
</pre>~',
        p_help_text         => q'~Enter a JavaScript function that takes a configuration object for the Interactive Grid, modifies the object, and returns it. This allows advanced customization of the Interactive Grid appearance, features, and behavior including toolbar, menus, and actions.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HELP_TEXT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text          => q'~<p>Use this attribute to enter help text for the interactive grid. The entered help text will display along with the default help content under Actions Menu help.</p>~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for IG_COLUMN_GROUP
    --
    l_component_type_id := c_comp_type_ig_column_group;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id      => l_component_type_id,
        p_property_name          => 'COLUMN_HEADING',
        p_db_column              => 'HEADING',
        p_is_required            => true,
        p_is_common              => true,
        p_check_uniqueness       => 'PARENT',
        p_supports_substitution  => true,
        p_default_value          => '#PLEASE_CHANGE#',
        p_help_text              => q'~Enter the group heading text.~',
        p_comment_text           => q'~$$$what does group heading do? should this use NAME property?~' );

    --
    store_component_prop (
        p_component_type_id      => l_component_type_id,
        p_property_name          => 'ALTERNATIVE_LABEL',
        p_db_column              => 'LABEL',
        p_is_required            => false,
        p_is_common              => true,
        p_supports_substitution  => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for IG_COLUMN
    --
    l_component_type_id := c_comp_type_ig_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_NAME',
        p_db_column         => 'NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_check_uniqueness  => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ITEM_TYPE',
        p_db_column         => 'ITEM_TYPE',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'NATIVE_TEXT_FIELD',
        p_help_text         => q'~<p>Select how this column is rendered. The following column types are supported:</p>
#NATIVE_PLUGINS#
<p>Depending on your application configuration, you may also have additional column type plug-ins available here.
These display as <em>&lt;My Plug-in&gt; [Plug-in]</em>.
The following plug-ins are installed in this application's shared components:</p>
#CUSTOM_PLUGINS#~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COLUMN_HEADING',
        p_db_column             => 'HEADING',
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HEADING_ALIGNMENT',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'LEFT',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ALTERNATIVE_LABEL',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false,
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true,
        p_help_text         => q'~<p>Enter the display sequence for this column. The sequence setting determines where this column is displayed in relation to other columns within the region.</p>
<p>Note: If two columns, within the same region, have the same sequence value then they may be displayed in a different order when the application is exported and imported into another environment, such as a test or production environment.
To ensure consistency, Oracle recommends you specify unique sequence numbers for every item, or at least for those within the same region.</p>~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COLUMN_ALIGNMENT',
        p_db_column             => 'VALUE_ALIGNMENT',
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'LEFT',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'IG_COLUMN_GROUP',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_reference_on_delete   => 'DB_NULL',
        p_plugin_std_attributes => 'VISIBLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_USE_GROUP_FOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'BOTH',
        p_depending_on_comp_prop_name => 'IG_COLUMN_GROUP',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'STRETCH_COLUMN',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_reference_on_delete   => 'DB_NULL',
        p_plugin_std_attributes => 'VISIBLE',
        p_null_text             => 'Use Report Setting',
        p_null_help_text        => q'~The column will use the <strong>Stretch</strong> Report Setting set by the End User to define if the column should stretch or not.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'APPEARANCE_CSS_CLASSES',
        p_db_column             => 'VALUE_CSS_CLASSES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'VISIBLE',
        p_help_text             => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ICON_CSS_CLASSES',
        p_db_column                   => 'ITEM_ICON_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'ICON',
        p_help_text                   => q'~<p>Enter the classes for the icon you want to add to the component. You may add multiple classes by separating them with spaces.</p>
        <p>If your theme uses Font APEX then review the <a target="_blank" href="http://apex.oracle.com/ut">Universal Theme Sample Application</a> to view available icons and modifiers.</p>
        <p>Note: This icon will be displayed inside of the item, not as part of the label.</p>~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        -- This property is used if the plug-in std attribute FORMAT_MASK_DATE or FORMAT_MASK_NUMBER are not checked
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'PLUGIN' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FORMAT_MASK_DATE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'FORMAT_MASK_DATE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'FORMAT_MASK_NUMBER',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'FORMAT_MASK_NUMBER' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_WIDTH',
        p_db_column             => 'ITEM_WIDTH',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'WIDTH' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_HEIGHT',
        p_db_column             => 'ITEM_HEIGHT',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'HEIGHT' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_VALUE_PLACEHOLDER',
        p_db_column             => 'ITEM_PLACEHOLDER',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'PLACEHOLDER' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'VALUE_REQUIRED',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'SESSION_STATE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ELEMENT_MAX_CHARACTERS',
        p_db_column             => 'MAX_LENGTH',
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'WIDTH' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LOV_TYPE',
        p_db_column             => null,
        p_is_required           => null, -- defined by plug-in standard attributes
        p_is_common             => true,
        p_plugin_std_attributes => 'LOV' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NAMED_LOV',
        p_db_column                   => 'LOV_ID',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SHARED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_SQL',
        p_db_column                   => 'LOV_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_STATIC_VALUES',
        p_db_column                   => 'LOV_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'STATIC:Display1;Return1,Display2;Return2',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_FUNC_BODY_RETURNING_SQL',
        p_db_column                   => 'LOV_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL_FUNCTION_BODY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_EXTRA_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_plugin_std_attributes       => 'LOV',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_NULL_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_plugin_std_attributes       => 'LOV_DISPLAY_NULL',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NULL_DISPLAY_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NULL_RETURN_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DISPLAY_NULL_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CASCADING_LOV_PARENT_COLUMNS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'CASCADING_LOV',
        p_depending_on_comp_prop_name => 'LOV_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LOV_PAGE_ITEMS_TO_SUBMIT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'CASCADING_LOV_PARENT_COLUMNS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OPTIMIZE_REFRESH',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CASCADING_LOV_PARENT_COLUMNS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'LINK_TARGET',
        p_is_required                 => false,
        p_is_common                   => true,
        p_plugin_std_attributes       => 'LINK',
        p_reference_scope             => 'ROW' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINK_TEXT',
        p_db_column                    => 'LINK_TEXT',
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value               => '&#CURRENT_COLUMN_NAME#.',
        p_reference_scope              => 'ROW',
        p_depending_on_comp_prop_name  => 'LINK_TARGET',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'ITEM_TYPE',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'NATIVE_HTML_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_ATTRIBUTES',
        p_db_column                   => 'LINK_ATTRIBUTES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_COLUMN_SOURCE_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'DB_COLUMN',
        p_plugin_std_attributes       => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_DB_COLUMN',
        p_db_column                   => 'SOURCE_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DB_COLUMN' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_SQL_EXPRESSION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DATA_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NONE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'IS_QUERY_ONLY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DB_COLUMN',
        p_depending_on_comp_prop_name2 => 'DATA_TYPE',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'ROWID' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IS_PRIMARY_KEY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'DB_COLUMN' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MASTER_COLUMN',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_reference_on_delete          => 'WEAK_NULL',
        p_depending_on_comp_prop_name  => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DB_COLUMN',
        p_depending_on_comp_prop_name2 => 'DATA_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'VARCHAR2,NUMBER,DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DEFAULT_TYPE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'IS_QUERY_ONLY',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'MASTER_COLUMN',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NULL',
        p_plugin_std_attributes        => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_STATIC_TEXT',
        p_db_column                   => 'DEFAULT_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_ITEM',
        p_db_column                   => 'DEFAULT_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SQL_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SQL_QUERY_COLON',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY_COLON' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_PLSQL_EXPRESSION',
        p_db_column                   => 'DEFAULT_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL_EXPRESSION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_PLSQL_FUNC_BODY',
        p_db_column                   => 'DEFAULT_EXPRESSION',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL_FUNCTION_BODY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFAULT_VALUE_SEQUENCE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'DEFAULT_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SEQUENCE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'DUPLICATE_VALUE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'IS_QUERY_ONLY',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'N',
        p_depending_on_comp_prop_name2 => 'MASTER_COLUMN',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NULL',
        p_plugin_std_attributes        => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ENABLE_FILTER',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'NONE',
        p_depending_on_comp_prop_name2 => 'CASCADING_LOV_PARENT_COLUMNS',
        p_depending_on_condition_type2 => 'NULL',
        p_depending_on_has_to_exist2   => false,
        p_plugin_std_attributes        => 'FILTER' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_DATA_TYPE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false, /* property is hidden */
        p_default_value                => 'VARCHAR2',
        p_depending_on_comp_prop_name  => 'ENABLE_FILTER',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
/* pwolf: pushed to 5.2
   note: modify trigger wwv_flow_region_columns_t1 and remove the default value
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_IS_REQUIRED',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'ENABLE_FILTER',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y' );
    --
*/
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_OPERATORS',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_default_value                => 'C:S:CASE_INSENSITIVE:REGEXP',
        p_depending_on_comp_prop_name  => 'FILTER_DATA_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'VARCHAR2,CLOB' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_TEXT_CASE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'MIXED',
        p_depending_on_comp_prop_name  => 'FILTER_DATA_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'VARCHAR2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FILTER_LOV_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'DISTINCT',
        p_depending_on_comp_prop_name => 'ENABLE_FILTER',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'REPORT_FILTER_DATE_RANGES',
        p_db_column                    => 'FILTER_DATE_RANGES',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'ALL',
        p_depending_on_comp_prop_name  => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'DISTINCT',
        p_depending_on_comp_prop_name2 => 'FILTER_DATA_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_LOV_SQL',
        p_db_column                   => 'FILTER_LOV_QUERY',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IR_COLUMN_FILTER_NAMED_LOV',
        p_db_column                   => 'FILTER_LOV_ID',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SHARED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_COLUMN_FILTER_STATIC_VALUES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'IG_COLUMN_FILTER_FUNC_BODY_RETURNING_SQL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'PLSQL_FUNCTION_BODY' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'FILTER_EXACT_MATCH',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'FILTER_LOV_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'NONE',
        p_depending_on_comp_prop_name2 => 'FILTER_DATA_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'VARCHAR2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INCLUDE_IN_EXPORT_PRINT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NONE',
        p_plugin_std_attributes       => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ENABLE_SORT_GROUP',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => 'NONE',
        p_depending_on_comp_prop_name2 => 'CASCADING_LOV_PARENT_COLUMNS',
        p_depending_on_condition_type2 => 'NULL',
        p_depending_on_has_to_exist2   => false,
        p_plugin_std_attributes        => 'SOURCE' );
    --
/* pawolf: pushed to APEX 5.2
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ALLOW_USERS_TO_PIVOT',
        p_db_column                   => 'ENABLE_PIVOT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'IG_COLUMN_SOURCE_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NONE',
        p_plugin_std_attributes       => 'SOURCE' );
*/
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'STATIC_ID',
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_ROW_SELECTOR',
        p_help_text                   => q'~Enter the static ID for the column. The static ID can be useful when developing custom JavaScript behavior, or custom style for the column item. If the static ID is not defined, an internal ID is used for the column item ID.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ADVANCED_CSS_CLASSES',
        p_db_column             => 'ITEM_CSS_CLASSES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT',
        p_help_text             => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CUSTOM_ATTRIBUTES',
        p_db_column             => 'ITEM_ATTRIBUTES',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'ELEMENT',
        p_help_text             => q'~Enter additional attributes to be included in the form element HTML tag. The <code>size</code> and <code>id</code> HTML attributes are generated and therefore should not be supplied. For the <code>class</code> HTML attribute it is better to use the dedicated <em>CSS Classes</em> attribute instead.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'USE_AS_ROW_HEADER',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'N',
        p_plugin_std_attributes => 'SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JAVASCRIPT_CODE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'ITEM_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'NATIVE_ROW_SELECTOR',
        p_examples                    => q'~<pre>
function( options ) {
    options.features = options.features || {};
    options.features.sort = false;
    return options;
}
</pre>~',
        p_help_text                   => q'~Enter a JavaScript function that takes a configuration object for the column, modifies the object, and returns it. This allows advanced customization of the column appearance, features, and behavior.~' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => null,
        p_help_text_type              => null,
        p_db_column_type              => 'DISPLAY_CONDITION_TYPE',
        p_view_column_type            => 'CONDITION_TYPE',
        p_db_column_expr1             => 'DISPLAY_CONDITION',
        p_db_column_expr2             => 'DISPLAY_CONDITION2' );
    --
    store_condition_type_comp_prop (
        p_component_type_id     => l_component_type_id,
        p_name_prefix           => 'READ_ONLY',
        p_help_text_type        => q'~<p>Select a condition type that must be met in order for this component to render as read-only.
Not selecting a condition causes the item to render normally.
A read-only item is rendered with the same settings as a Display Only item.</p>
<p>Note: Set the condition type to <strong>Never</strong> to always render the item as an enterable field.
This setting overwrites any read-only condition setting on the region or page level.</p>~',
        p_db_column_type        => 'READONLY_CONDITION_TYPE',
        p_view_column_type      => 'READ_ONLY_CONDITION_TYPE',
        p_db_column_expr1       => 'READONLY_CONDITION',
        p_db_column_expr2       => 'READONLY_CONDITION2',
        p_is_common             => false,
        p_reference_scope       => 'DEPENDS',
        p_plugin_std_attributes => 'READONLY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXECUTE_READONLY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'READ_ONLY_CONDITION_TYPE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SECURITY_SCHEME',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'ESCAPE_OUTPUT' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
/* pawolf: pushed to APEX 5.2
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'RESTRICTED_CHARACTERS',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'SOURCE',
        p_null_text             => 'All characters can be saved.' );
*/
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HELP_TEXT',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_plugin_std_attributes => 'VISIBLE',
        p_help_text             => q'~Enter help text for this column.~' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_INIT_JAVASCRIPT_CODE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null,
        p_plugin_std_attributes => 'INIT_JAVASCRIPT_CODE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'COLUMN_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    --
    -- Component Properties for Page Process Web Service In Parameters
    --
    l_component_type_id           := c_comp_type_page_proc_ws_p_i;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_ID',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'NAME',
        p_db_column           => 'PARAMETER_NAME',
        p_is_required         => true,
        p_is_common           => true,
        p_is_read_only        => true,
        p_reference_on_delete => 'WEAK_CASCADE' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGE_PROC_WS_PARM_SOURCE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_FUNCTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    --
    -- Component Properties for Page Process Web Service Out Parameters
    --
    l_component_type_id           := c_comp_type_page_proc_ws_p_o;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_ID',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'PARAMETER_NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_ITEMS',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    --
    -- Component Properties for Page Process Web Service Basic Authentication Parameters
    --
    l_component_type_id           := c_comp_type_page_proc_ws_p_a;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_ID',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'PARAMETER_NAME',
        p_is_required       => false,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PAGE_PROC_WS_PARM_SOURCE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_VALUE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'PAGE_PROC_WS_PARM_FUNCTION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'PAGE_PROC_WS_PARM_SOURCE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );


    --
    --
    -- Component Properties for Region Web Source Parameters
    --
    l_component_type_id           := c_comp_type_region_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_web_src_param;

    --
    -- Component Properties for MAP_CHART
    --
    l_component_type_id := c_comp_type_map_chart;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    -- Map
    store_map_level_comp_props;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAP_CHART_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'MAP' );
    --
    -- Title
    -- $$$ same as for chart except: default_value and help_text (just component type)
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_TITLE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#',
        p_help_text         => q'~Enter a title to display at the top of this map.~' );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'CHART_TITLE_FONT',
        p_default_font_size           => 14,
        p_depending_on_comp_prop_name => 'CHART_TITLE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAP_GRID_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'X' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAP_PROJECTION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Orthographic' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_ANIMATION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Appear',
        p_help_text         => q'~The chart displays without any animations.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MARKER',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Circle',
        p_help_text         => q'~The marker is a circle on the chart.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ZOOM_PANEL',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAVIGATION_PANEL',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_WIDTH',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~Enter a fixed width for your map region in pixels. Alternatively, to support the automatic resizing of the map width, leave this item empty. The width is then automatically set to 100% of the map region.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_HEIGHT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~Enter a fixed height for your map region in pixels. Alternatively, to support the automatic resizing of the map height, leave this item empty. The height is then based upon the height of the browser.~' );
    --
    -- Margin
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_MARGIN_TOP',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter a value for the size of the blank space displayed above the map.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_MARGIN_BOTTOM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter a value for the size of the blank space displayed below the map.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_MARGIN_LEFT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter a value for the size of the blank space displayed on the left side of the map.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_MARGIN_RIGHT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter a value for the size of the blank space displayed on the right side of the map.~' );
    --
    -- Background Color
    store_bg_color_comp_props();
    --
    -- Defined Map Region Color
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DEFINED_MAP_COLOR_SCHEME',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '7' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAP_COLOR_LEVEL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'S',
        p_depending_on_comp_prop_name => 'DEFINED_MAP_COLOR_SCHEME',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => '7' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DEFINED_MAP_CUSTOM_COLORS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'DEFINED_MAP_COLOR_SCHEME',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => '0' );
    --
    -- Undefined Map Region Color
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'UNDEFINED_MAP_SET_COLORS',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNDEFINED_MAP_COLOR_SCHEME',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '1',
        p_depending_on_comp_prop_name => 'UNDEFINED_MAP_SET_COLORS',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'UNDEFINED_MAP_CUSTOM_COLORS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'UNDEFINED_MAP_COLOR_SCHEME',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => '0' );
    --
    -- Map Grid Region Color
    store_bg_color_comp_props (
        p_name_prefix   => 'GRID' );
    --
    -- Value
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_VALUE',
        p_db_column                   => 'SHOW_LABEL',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_help_text                   => 'Specify whether to display values on the map. Values are derived from your chart query and display on the map data point.' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_DISPLAY_MODE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'RegionBounds',
        p_depending_on_comp_prop_name => 'SHOW_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'VALUES_FONT',
        p_depending_on_comp_prop_name => 'SHOW_VALUE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    -- Tooltip
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SHOW_TOOLTIP',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'TOOLTIP_FONT',
        p_depending_on_comp_prop_name => 'SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    -- Legend
    store_legend_comp_props();
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LEGEND_ITEM_SOURCE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Series',
        p_depending_on_comp_prop_name => 'SHOW_LEGEND',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'N' );
    --
    -- Automatic Refresh
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTOMATIC_REFRESH',
        p_db_column         => 'ASYNC_UPDATE',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTOMATIC_REFRESH_INTERVAL',
        p_db_column                   => 'ASYNC_TIME',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '10',
        p_depending_on_comp_prop_name => 'AUTOMATIC_REFRESH',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    -- Custom XML
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'USE_CUSTOM_XML',
        p_db_column         => 'USE_CHART_XML',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOM_XML',
        p_db_column                   => 'CHART_XML',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_XML',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for MAP_CHART_SERIES
    --
    l_component_type_id           := c_comp_type_map_chart_series;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'SERIES_NAME',
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAP_SERIES_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Map' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'SERIES_SEQ',
        p_is_required       => true,
        p_is_common         => false );
    --
    store_comp_props_series_source (
        p_prefix             => 'MAP' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SOURCE_PAGE_ITEMS_TO_SUBMIT',
        p_db_column         => 'SERIES_AJAX_ITEMS_TO_SUBMIT',
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~Enter a comma separated list of page items on the current page to be set into session state when the map data gets read with a separate request.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SERIES_LINK_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'ACTION_LINK',
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'SERIES_LINK_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAXIMUM_ROW_COUNT',
        p_db_column         => 'SERIES_QUERY_ROW_COUNT_MAX',
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column         => 'SERIES_QUERY_NO_DATA_FOUND',
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => null );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'DISPLAY_WHEN_COND_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'DISPLAY_WHEN_CONDITION',
        p_db_column_expr2   => 'DISPLAY_WHEN_CONDITION2' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SERIES_REQUIRED_ROLE',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for REMOTE_DATABASE
    --
    l_component_type_id           := c_comp_type_remote_database;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB_SRC_MODULE
    --
    l_component_type_id           := c_comp_type_web_src_module;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB_SRC_MOD_PARAM
    --
    l_component_type_id           := c_comp_type_web_src_mod_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_STATIC',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_REQUIRED',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DIRECTION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_VALUE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    --
    -- Component Properties for WEB_SRC_OPERATION
    --
    l_component_type_id           := c_comp_type_web_src_operation;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'OPERATION',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DATABASE_OPERATION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    --
    -- Component Properties for WEB_SRC_OPER_PARAM
    --
    l_component_type_id           := c_comp_type_web_src_oper_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_STATIC',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_REQUIRED',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DIRECTION',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'IN' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'PARAMETER_VALUE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    --
    -- Component Properties for WEB_SRC_QUERY
    --
    l_component_type_id           := c_comp_type_web_src_query;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB_SRC_PARAM
    --
    l_component_type_id           := c_comp_type_web_src_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for BREADCRUMB
    --
    l_component_type_id           := c_comp_type_breadcrumb;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for LIST
    --
    l_component_type_id           := c_comp_type_list;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for APP_ITEM
    --
    l_component_type_id := c_comp_type_app_item;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ITEM_NAME',
        p_db_column             => 'NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => 'G_NEW' );
/*
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'APP_ITEM_SCOPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'APP' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SESSION_STATE_PROTECTION',
        p_db_column         => 'PROTECTION_LEVEL',
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => 'I' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COMMENTS',
        p_db_column         => 'ITEM_COMMENT',
        p_is_required       => false,
        p_is_common         => false );
*/
    --
    --
    -- Component Properties for APP_PROCESS
    --
    l_component_type_id := c_comp_type_app_process;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NAME',
        p_db_column             => 'PROCESS_NAME',
        p_is_required           => true,
        p_is_common             => true,
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#',
        p_help_text             => q'~Enter the name of the application process for easy identification by developers.~' );
    --
    --
    -- Component Properties for LOV
    --
    l_component_type_id := c_comp_type_lov;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'LOV_NAME',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_check_uniqueness      => 'APPLICATION',
        p_supports_substitution => false,
        p_default_value         => '#PLEASE_CHANGE#' );
/*
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LOV_SQL',
        p_db_column         => 'LOV_QUERY',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COMMENTS',
        p_db_column         => 'LOV_COMMENT',
        p_is_required       => false,
        p_is_common         => false );
*/
    --
    --
    -- Component Properties for WEB SERVICE REFERENCE
    --
    l_component_type_id           := c_comp_type_ws_ref;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REFERENCE OPERATION
    --
    l_component_type_id           := c_comp_type_ws_ref_operations;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'FULL_NAME',
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REF OPERATION IN PARAMETER
    --
    l_component_type_id           := c_comp_type_ws_ref_oper_p_i;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REF OPERATION OUT PARAMETER
    --
    l_component_type_id           := c_comp_type_ws_ref_oper_p_o;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REF OPERATION AUTH PARAMETER
    --
    l_component_type_id           := c_comp_type_ws_ref_oper_p_a;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for WEB SERVICE REF OPERATION HEADER PARAMETER
    --
    l_component_type_id           := c_comp_type_ws_ref_oper_p_h;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for DATA LOAD TABLE
    --
    l_component_type_id           := c_comp_type_data_load_table;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => null,
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    --
    -- Component Properties for STANDARD TAB SET
    --
    l_component_type_id           := c_comp_type_tab_set;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'D',
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true );
    --
    --
    -- Component Properties for REPORT LAYOUT
    --
    l_component_type_id           := c_comp_type_report_layout;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'REPORT_LAYOUT_NAME',
        p_check_uniqueness  => 'APPLICATION',
        p_is_required       => true,
        p_is_common         => true );
    --
    --
    -- Component Properties for CLASSIC_REPORT
    --
    l_component_type_id           := c_comp_type_classic_report;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_report_attributes;

    --
    --
    -- Component Properties for CLASSIC_REPORT_COLUMN
    --
    l_component_type_id           := c_comp_type_classic_rpt_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_report_columns (
        p_type_property_name => 'CLASSIC_REPORT_COLUMN_TYPE' );

    --
    --
    -- Component Properties for TABULAR_FORM
    --
    l_component_type_id           := c_comp_type_tab_form;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_report_attributes;
    --
    --
    -- Component Properties for TAB_FORM_COLUMN
    --
    l_component_type_id           := c_comp_type_tab_form_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_report_columns (
        p_type_property_name => 'TAB_FORM_COLUMN_TYPE' );



    --
    -- Component Properties for CHART
    --
    l_component_type_id           := c_comp_type_chart;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'COLUMN' );
    --
    -- Title
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_TITLE',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'CHART_TITLE_FONT',
        p_default_font_size           => 14,
        p_depending_on_comp_prop_name => 'CHART_TITLE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    -- Appearance
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CHART_RENDERING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'SVG_ONLY',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => '3D_MODE_HTML',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name  => 'CHART_RENDERING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'SVG_ONLY',
        p_depending_on_comp_prop_name2 => 'CHART_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => c_col_bar_stacked || ',' || c_pie );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => '3D_MODE_FLASH',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'CHART_RENDERING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'FLASH_PREFERRED',
        p_depending_on_comp_prop_name2 => 'CHART_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => c_col_bar_stacked_range || ',' || c_pie );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CHART_GRID_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'X',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SHOW_SCROLLBARS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'H',
        p_depending_on_comp_prop_name  => 'CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_col_bar_line_candle_scatter,
        p_depending_on_comp_prop_name2 => 'CHART_RENDERING',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'FLASH_PREFERRED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SERIES_STYLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Default',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_stacked_line || ',' || c_candlestick );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CHART_ANIMATION',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'Appear',
        p_depending_on_comp_prop_name  => 'CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_col_bar_line_candle_scatter,
        p_depending_on_comp_prop_name2 => 'CHART_RENDERING',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'FLASH_PREFERRED' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MARKER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Default',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_dial || ',' || c_gantt,
        p_comment_text                => '$$$ condition for P754_SHOW_MARKER also checks wwv_flow_flash_chart5_series where series_type in (Line,Marker)' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_SHOW_NAVIGATION_BAR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_DATE_FORMAT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    -- Layout
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_WIDTH',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_HEIGHT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    -- Margin
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_MARGIN_TOP',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_MARGIN_BOTTOM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_MARGIN_LEFT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CHART_MARGIN_RIGHT',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    -- Series Color
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLOR_SCHEME',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '6' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CHART_COLOR_LEVEL',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'S',
        p_depending_on_comp_prop_name  => 'COLOR_SCHEME',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => '7',
        p_depending_on_comp_prop_name2 => 'CHART_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HATCH_PATTERN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_stacked_range || ',' || c_pie_doughnut || ',' || c_candlestick );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOM_COLORS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COLOR_SCHEME',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => '0' );
    --
    -- Background Color
    --
    store_bg_color_comp_props();
    --
    --
    -- X Axis
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'X_AXIS_TITLE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'X_AXIS_TITLE_FONT',
        p_depending_on_comp_prop_name => 'X_AXIS_TITLE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'X_AXIS_DECIMAL_PLACES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_bar || ',' || c_stacked_bar || ',' || c_range_bar );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'X_AXIS_PREFIX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'X_AXIS_POSTFIX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'X_AXIS_LABEL_ROTATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'X_AXIS_LABEL_FONT',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'X_AXIS_INVERTED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'X_AXIS_MAJOR_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'CHART_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'X,B' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'X_AXIS_MINOR_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'CHART_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'X,B' );
    --
    -- Y Axis
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_TITLE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'Y_AXIS_TITLE_FONT',
        p_depending_on_comp_prop_name => 'Y_AXIS_TITLE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_DECIMAL_PLACES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_column || ',' || c_stacked_column || ',' || c_range_column || ',' || c_line || ',' || c_candlestick || ',' || c_scatter_marker );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_PREFIX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_POSTFIX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_LABEL_ROTATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'Y_AXIS_LABEL_FONT',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_INVERTED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_OVERLAY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter,
        p_comment_text                => '$$$ should be hidden if Y_AXIS_OVERLAY_SORTED = Yes' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'Y_AXIS_OVERLAY_SORTED',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N',
        p_depending_on_comp_prop_name  => 'CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_col_bar_line_candle_scatter,
        p_depending_on_comp_prop_name2 => 'CHART_RENDERING',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'FLASH_PREFERRED',
        p_comment_text                => '$$$ should be hidden if Y_AXIS_OVERLAY = Yes' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_MIN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_MAX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_MULTIPLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXTRA_Y_AXIS_MIN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'Y_AXIS_MULTIPLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXTRA_Y_AXIS_MAX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'Y_AXIS_MULTIPLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_MAJOR_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'CHART_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,B' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'Y_AXIS_MINOR_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'CHART_GRID_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'Y,B' );
    --
    -- Gauge
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GAUGE_POINTER',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'needle',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GAUGE_FRAME_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'Auto',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GAUGE_START_ANGLE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '90',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GAUGE_SWEEP_ANGLE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '180',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GAUGE_MAJOR_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '100',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GAUGE_MINOR_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '10',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    -- Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GROUP_BY_SERIES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_MAJOR_TICKS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_MINOR_TICKS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_TICK_LABELS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SCALE_INVERTED',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SMART_AXIS_CALCULATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_stk_range_line || ',' || c_candlestick );
    --
    -- Datagrid
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_SHOW_DATAGRID',
        p_db_column                   => null,
        p_is_required                 => true,
        p_default_value               => 'Y',
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_INCLUDE_ON_DATAGRID',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'I:N:S:E',
        p_depending_on_comp_prop_name => 'GANTT_SHOW_DATAGRID',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    -- Timeline
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_TIMELINE_HEIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '30',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_ITEM_HEIGHT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '15',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_ITEM_PADDING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '5',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_START_DATE_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_START_DATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'GANTT_START_DATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_START_DATE_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'GANTT_START_DATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_END_DATE_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_END_DATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'GANTT_END_DATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GANTT_END_DATE_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'GANTT_END_DATE_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    -- Actual Task State
    store_gantt_marker_comp_props (
        p_marker_group            => 'GANTT_ACTUAL',
        p_depending_on_expression => c_gantt );
    --
    -- Task Progress
    store_gantt_marker_comp_props (
        p_marker_group            => 'GANTT_PROGRESS',
        p_depending_on_expression => 'PROJECT_GANTT' );
    --
    -- Planned Task State
    store_gantt_marker_comp_props (
        p_marker_group            => 'GANTT_BASELINE',
        p_depending_on_expression => 'PROJECT_GANTT' );
    --
    -- Label
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_LABEL',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter || ',' || c_pie_doughnut );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CHART_LABEL_POSITION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Outside',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_pie_doughnut );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'GAUGE_LABEL_ALIGNMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Inside',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LABEL_ROTATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'LABELS_FONT',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial );
    --
    -- Value
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_VALUE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_scatter || ',' || c_pie_doughnut || ',' || c_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_PREFIX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial_pie_doughnut );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_POSTFIX',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_dial_pie_doughnut );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_DECIMAL_PLACES',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_pie_doughnut );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUES_ROTATION',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_scatter || ',' || c_pie_doughnut );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'VALUES_FONT',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_scatter || ',' || c_dial_pie_doughnut );
    --
    -- Tooltip
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SHOW_TOOLTIP',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_line_candle_scatter || ',' || c_pie_doughnut || ',' || c_gantt );
    --
    store_chart_font_comp_props (
        p_font_group                  => 'TOOLTIP_FONT',
        p_depending_on_comp_prop_name => 'SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    -- Legend
    store_legend_comp_props (
        p_show_legend_dep_on_cp_name    => 'CHART_TYPE',
        p_show_legend_dep_on_cond_type  => 'IN_LIST',
        p_show_legend_dep_on_expr       => c_col_bar_line_scatter || ',' || c_pie_doughnut );
    --
    -- Automatic Refresh
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'AUTOMATIC_REFRESH',
        p_db_column         => 'ASYNC_UPDATE',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTOMATIC_REFRESH_INTERVAL',
        p_db_column                   => 'ASYNC_TIME',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '10',
        p_depending_on_comp_prop_name => 'AUTOMATIC_REFRESH',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    -- Custom XML
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'USE_CUSTOM_XML',
        p_db_column         => 'USE_CHART_XML',
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOM_XML',
        p_db_column                   => 'CHART_XML',
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'USE_CUSTOM_XML',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for CHART_SERIES
    --
    l_component_type_id           := c_comp_type_chart_series;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'SERIES_NAME',
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SERIES_CHART_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SCATTER_MARKER_SERIES_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Marker',
        p_depending_on_comp_prop_name => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_scatter_marker );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SERIES_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Bar',
        p_depending_on_comp_prop_name => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_col_bar_stacked_line );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'SERIES_SEQ',
        p_is_required       => true,
        p_is_common         => false );
    --
    store_comp_props_series_source (
        p_prefix             => 'PROJECT_GANTT',
        p_series_chart_types => c_project_gantt );
    --
    store_comp_props_series_source (
        p_prefix             => 'RESOURCE_GANTT',
        p_series_chart_types => c_resource_gantt );
    --
    store_comp_props_series_source (
        p_prefix             => 'PIE_DOUGHNUT',
        p_series_chart_types => c_pie_doughnut );
    --
    store_comp_props_series_source (
        p_prefix             => 'DIAL',
        p_series_chart_types => c_dial );
    --
    store_comp_props_series_source (
        p_prefix             => 'RANGE',
        p_series_chart_types => c_range );
    --
    store_comp_props_series_source (
        p_prefix             => 'SCATTER',
        p_series_chart_types => c_scatter_marker );
    --
    store_comp_props_series_source (
        p_prefix             => 'CANDLESTICK',
        p_series_chart_types => c_candlestick );
    --
    store_comp_props_series_source (
        p_prefix             => 'LINE_COL_BAR_STK',
        p_series_chart_types => c_col_bar_stacked_line );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SOURCE_PAGE_ITEMS_TO_SUBMIT',
        p_db_column         => 'SERIES_AJAX_ITEMS_TO_SUBMIT',
        p_is_required       => false,
        p_is_common         => true,
        p_help_text         => q'~Enter a comma separated list of page items on the current page to be set into session state when the chart data gets read with a separate request.~' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SERIES_LINK_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'N' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'ACTION_LINK',
        p_is_required                 => true,
        p_is_common                   => false,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'SERIES_LINK_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'MAXIMUM_ROW_COUNT',
        p_db_column         => 'SERIES_QUERY_ROW_COUNT_MAX',
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column         => 'SERIES_QUERY_NO_DATA_FOUND',
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => null );
    --
    store_condition_type_comp_prop (
        p_component_type_id => l_component_type_id,
        p_name_prefix       => null,
        p_help_text_type    => null,
        p_db_column_type    => 'DISPLAY_WHEN_COND_TYPE',
        p_view_column_type  => 'CONDITION_TYPE',
        p_db_column_expr1   => 'DISPLAY_WHEN_CONDITION',
        p_db_column_expr2   => 'DISPLAY_WHEN_CONDITION2' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'AUTHORIZATION_SCHEME',
        p_db_column           => 'SERIES_REQUIRED_ROLE',
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );

    --
    -- Component Properties for JET CHART
    --
    l_component_type_id           := c_comp_type_jet_chart;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    -- Chart
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_CHART_TYPE',
        p_db_column                   => 'CHART_TYPE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'bar' );
    --
    -- Title
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CHART_TITLE',
        p_db_column                   => 'TITLE',
        p_is_required                 => false,
        p_is_common                   => true );
    --
    -- Appearance
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'ORIENTATION',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'vertical',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_area || ',' || c_jet_bar || ',' || c_jet_combo || ',' || c_jet_funnel || ',' || c_jet_line || ',' || c_jet_line_with_area || ',' || c_jet_box_plot);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STACK',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'off',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_stack || ',' || c_jet_polar || ',' || c_jet_radar);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_CONNECT_NULLS',
        p_db_column                    => 'CONNECT_NULLS',
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_line_charts );
    --
   /* store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SPARK_CHART',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_spark ); */
    --
    -- Layout
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CHART_MAX_WIDTH',
        p_db_column                    => 'WIDTH',
        p_is_required                  => false,
        p_is_common                    => true );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CHART_HEIGHT',
        p_db_column                    => 'HEIGHT',
        p_is_required                  => false,
        p_is_common                    => true );
    --
    -- Dial Chart
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_DIAL_INDICATOR',
        p_db_column                   => 'DIAL_INDICATOR',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'needleAlta',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_DIAL_BACKGROUND',
        p_db_column                   => 'DIAL_BACKGROUND',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'circleAlta',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_dial );
    --
    -- Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_DATA_CURSOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_jet_polar ||',' || c_jet_dial ||',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_DATA_CURSOR_BEHAVIOR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'JET_DATA_CURSOR',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'auto,on',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_polar ||',' || c_jet_dial ||',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_HOVER_BEHAVIOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'none',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_FILL_GAPS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_no_sorting );    
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_SORT_ORDER',
        p_db_column                     => null,
        p_is_required                   => true,
        p_is_common                     => false,
        p_default_value                 => 'label-asc',
        p_depending_on_comp_prop_name   => 'JET_FILL_GAPS',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y');        
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_TIME_AXIS_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null, -- $$$ auto as default doesn't work also it's documented in the JET docu. But this will cause "Invalid data"
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_time_axis_type );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_ZOOM_AND_SCROLL',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'off',
        p_help_text                    => q'~<p>Specify the zoom and scroll behavior of the chart. <strong>Live</strong> behavior means that the chart will be updated continuously as it is being manipulated,
        while <strong>Delayed</strong> means that the update will wait until the zoom/scroll action is done. While <strong>Live</strong> zoom and scroll provides the best end user experience, no guarantees are made
        about the rendering performance or usability for large data sets or slow client environments. If performance is an issue, <strong>Delayed</strong> zoom and scroll should be used instead.</p>~',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_jet_dial||','||c_jet_pie||','||c_jet_donut ||','||c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_ZOOM_DIRECTION',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bubble||','||c_jet_scatter,
        p_depending_on_comp_prop_name2 => 'JET_ZOOM_AND_SCROLL',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'off' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_INITIAL_ZOOMING',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'none',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bar||','||c_jet_line||','||c_jet_area||','||c_jet_line_with_area||','||c_jet_combo||','||c_jet_stock,
        p_depending_on_comp_prop_name2 => 'JET_ZOOM_AND_SCROLL',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'off' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_HORIZONTAL_GRID',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'visible',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_VERTICAL_GRID',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'visible',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ROW_AXIS',
        p_db_column                   => 'ROW_AXIS_RENDERED',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'on',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_AXIS_POSITION',
        p_db_column                   => 'GANTT_AXIS_POSITION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'top',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'PIE_OTHER_THRESHOLD',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => '0',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_pie_donut );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'PIE_SELECTION_EFFECT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'highlight',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_pie_donut );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'STOCK_RENDER_AS',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'candlestick',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_stock );
    --
    -- Overview Settings
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'OVERVIEW_RENDERED',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'on',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_overview,
        p_depending_on_comp_prop_name2 => 'JET_ZOOM_AND_SCROLL',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'off' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'OVERVIEW_HEIGHT',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_supports_substitution        => false,
        p_depending_on_comp_prop_name  => 'OVERVIEW_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on' );
    --
    -- Value Settings
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_MIN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_pie_donut );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_TEXT_TYPE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'number',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_FORMAT_TYPE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_no_axes,
        p_help_text                    => q'~<p>Specify the type of formatting to be applied to the value on the chart.
        The format types <strong>Decimal</strong>,<strong>Percent</strong> or <strong>Currency</strong> only apply to numeric values.
        The <strong>Date</strong>,<strong>Time</strong> and <strong>DateTime</strong> format types will only apply to values of that data type on the chart.~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_DECIMAL_PLACES',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_no_axes,
        p_depending_on_comp_prop_name2 => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'decimal,currency,percent',
        p_help_text                    => q'~Specify the number of decimal places to be applied to the numeric value on the chart.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_CURRENCY',
        p_db_column                   => null,
        p_is_required                  => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression      => c_jet_no_axes,
        p_depending_on_comp_prop_name2 => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'currency');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_NUMERIC_PATTERN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_no_axes,
        p_depending_on_comp_prop_name2 => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'decimal,currency,percent',
        p_help_text                    => q'~Specify the numeric pattern to be applied to the numeric value on the chart.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_FORMAT_SCALING',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => c_jet_no_axes );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ANIMATION_ON_DISPLAY',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ANIMATION_ON_DATA_CHANGE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto' );
    --
    -- Tooltip Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_TOOLTIP',
        p_db_column                   => 'TOOLTIP_RENDERED',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_CHART_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => c_jet_dial );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SHOW_SERIES_NAME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_dial || ',' || c_jet_stock || ',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'SHOW_GROUP_NAME',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_dial || ',' || c_jet_stock ||',' || c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_pie ||','|| c_jet_donut ||','|| c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_VALUE',
        p_db_column                   => 'SHOW_VALUE',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SHOW_LABEL',
        p_db_column                    => 'SHOW_LABEL',
        p_is_required                  => false,
        p_is_common                    => true,
        p_default_value                => 'Y',
        p_depending_on_comp_prop_name  => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_dial || ',' || c_jet_stock ||',' || c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_pie ||','|| c_jet_donut||','||c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOM_TOOLTIP',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'JET_SHOW_TOOLTIP',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'C' );
    --
    -- Legend Settings
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LEGEND_RENDERED',
        p_db_column                    => 'LEGEND_RENDERED',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'on',
        p_depending_on_comp_prop_name  => 'JET_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_dial || ',' || c_jet_stock || ',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LEGEND_TITLE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'LEGEND_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LEGEND_POSITION',
        p_db_column                    => 'LEGEND_POSITION',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'LEGEND_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on',
        p_depending_on_comp_prop_name2 => 'JET_CHART_TYPE',
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => c_jet_funnel ||','|| c_jet_pyramid ||','|| c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HIDE_AND_SHOW_BEHAVIOR',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'none',
        p_depending_on_comp_prop_name => 'LEGEND_RENDERED',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'on' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REFRESH_INTERVAL',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_help_text                   => q'~Enter a text message to display if the chart query does not return any rows. When left empty, Oracle JET will automatically use the default message "No data to display".~' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JAVASCRIPT_CODE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_examples          => q'~<pre>
function( options ){
    // Setup a callback function which gets called when data is retrieved, it allows to manipulate the series
    options.dataFilter = function( data ) {
        data.series[ 0 ].color = "#00FF00";
        return data;
    };
    // Set chart initialization options
    options.type = "line";
    return options;
}</pre>~',
        p_help_text                    => q'~<p>Enter JavaScript code to customise the chart.</p>~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id,
        p_db_column_prefix  => null );

    --
    --
    -- Component Properties for JET_CHART_SERIES
    --
    l_component_type_id           := c_comp_type_jet_chart_series;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    -- Identification Group Settings
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'NAME',
        p_db_column         => 'NAME',
        p_check_uniqueness  => 'PARENT',
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => '#PLEASE_CHANGE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'SERIES_CHART_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_COMBO',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'bar',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_combo );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_RANGE',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'barRange',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_range );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_POLAR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'bar',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_polar );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_RADAR',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'area',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_radar );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_TYPE_BOX_PLOT',
        p_db_column                    => null,
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'boxPlot',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'EXECUTION_SEQUENCE',
        p_db_column         => 'SEQ',
        p_is_required       => true,
        p_is_common         => false );
    --
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'CHART_SOURCE_LOCATION',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'LOCAL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_REMOTE_DATABASE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_SOURCE_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_TYPE',
        p_db_column                   => 'DATA_SOURCE_TYPE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'TABLE',
        p_depending_on_comp_prop_name => 'CHART_SOURCE_LOCATION',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'LOCAL,REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_OWNER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_TABLE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE',
        p_parent_comp_prop_name       => 'SOURCE_QUERY_OWNER' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'INCLUDE_ROWID_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_WHERE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE',
        p_parent_comp_prop_name       => 'SOURCE_QUERY_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_ORDER_BY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'TABLE',
        p_parent_comp_prop_name       => 'SOURCE_QUERY_TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_SQL_QUERY',
        p_db_column                   => 'DATA_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_QUERY_PLSQL_FUNCTION_BODY',
        p_db_column                   => 'DATA_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNC_BODY_RETURNING_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_WEB_SRC_QUERY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_SOURCE_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'WEB_SOURCE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_PAGE_ITEMS_TO_SUBMIT',
        p_db_column                   => 'AJAX_ITEMS_TO_SUBMIT',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'CHART_SOURCE_LOCATION',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'REGION_SOURCE',
        p_help_text                   => q'~Enter a comma separated list of page items on the current page to be set into session state when the chart data gets read with a separate request.~' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXTERNAL_FILTER_EXPR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'SOURCE_WEB_SRC_QUERY',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'EXTERNAL_ORDER_BY_EXPR',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'SOURCE_WEB_SRC_QUERY',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'OPTIMIZER_HINT',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_supports_substitution       => false,
        p_depending_on_comp_prop_name => 'SOURCE_QUERY_TYPE',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'TABLE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SOURCE_POST_PROCESSING',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => null,
        p_depending_on_comp_prop_name => 'SOURCE_WEB_SRC_QUERY',
        p_depending_on_condition_type => 'NOT_NULL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_PROC_WHERE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_POST_PROCESSING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'WHERE_ORDER_BY_CLAUSE',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_PROC_ORDER_BY',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'SOURCE_POST_PROCESSING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'WHERE_ORDER_BY_CLAUSE',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_PROC_SQL_QUERY',
        p_db_column                   => 'DATA_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_POST_PROCESSING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'SQL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'POST_PROC_PLSQL_FUNCTION_BODY',
        p_db_column                   => 'DATA_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SOURCE_POST_PROCESSING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNC_BODY_RETURNING_SQL',
        p_parent_comp_prop_name       => 'SOURCE_WEB_SRC_QUERY' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REMOTE_SQL_CACHING',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_null_text                   => 'Disabled',
        p_null_help_text              => 'Data is not cached and requested each time.',
        p_depending_on_comp_prop_name => 'CHART_SOURCE_LOCATION',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'REMOTE' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'REMOTE_SQL_INVALIDATE_WHEN',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'REMOTE_SQL_CACHING',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_START_DATE_SOURCE',
        p_db_column                   => 'GANTT_START_DATE_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
       -- p_default_value               => 'DB_COLUMN',
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_START_DATE_COLUMN',
        p_db_column                     => 'GANTT_START_DATE_COLUMN',
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_parent_comp_prop_name         => 'CHART_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2  => 'JET_GANTT_START_DATE_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'DB_COLUMN');
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_START_DATE_ITEM',
        p_db_column                     => 'GANTT_START_DATE_ITEM',
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'JET_GANTT_START_DATE_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_END_DATE_SOURCE',
        p_db_column                   => 'GANTT_END_DATE_SOURCE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_END_DATE_COLUMN',
        p_db_column                     => 'GANTT_END_DATE_COLUMN',
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_parent_comp_prop_name         => 'CHART_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2  => 'JET_GANTT_END_DATE_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'DB_COLUMN');    
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_END_DATE_ITEM',
        p_db_column                     => 'GANTT_END_DATE_ITEM',
        p_is_required                   => false,
        p_is_common                     => true,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'JET_GANTT_END_DATE_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SERIES_NAME_COLUMN_NAME',
        p_db_column                   => 'SERIES_NAME_COLUMN_NAME',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => c_jet_dial || ',' || c_jet_stock || ',' || c_jet_gantt,
        p_parent_comp_prop_name       => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_LABEL_COLUMN_NAME',
        p_db_column                    => 'ITEMS_LABEL_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_dial || ',' || c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'AGGREGATE_FUNCTION',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => true,
        p_null_text                    => 'No Aggregation',
        p_null_help_text               => 'Returns the value column.',
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_value_column,
        p_depending_on_comp_prop_name2 => 'SOURCE_QUERY_TYPE',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'NOT_IN_LIST',
        p_depending_on_expression2     => 'SQL,FUNC_BODY_RETURNING_SQL' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_VALUE_COLUMN_NAME',
        p_db_column                    => 'ITEMS_VALUE_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_value_column,
        p_depending_on_comp_prop_name2 => 'AGGREGATE_FUNCTION',
        p_depending_on_has_to_exist2   => false,
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => '$NULL$,SUM,AVG,MEDIAN,MIN,MAX,COUNT_DISTINCT,APPROX_COUNT_DISTINCT',
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_OPEN_COLUMN_NAME',
        p_db_column                    => 'ITEMS_OPEN_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_stock,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_LOW_COLUMN_NAME',
        p_db_column                    => 'ITEMS_LOW_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'barRange,areaRange,stock',
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_HIGH_COLUMN_NAME',
        p_db_column                    => 'ITEMS_HIGH_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'barRange,areaRange,stock',
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_BOX_LOW_COLUMN_NAME',
        p_db_column                    => 'ITEMS_LOW_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_BOX_HIGH_COLUMN_NAME',
        p_db_column                    => 'ITEMS_HIGH_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );

    --    
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_CLOSE_COLUMN_NAME',
        p_db_column                    => 'ITEMS_CLOSE_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_stock,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_VOLUME_COLUMN_NAME',
        p_db_column                    => 'ITEMS_VOLUME_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_stock,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_X_COLUMN_NAME',
        p_db_column                    => 'ITEMS_X_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bubble ||','|| c_jet_scatter,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_Y_COLUMN_NAME',
        p_db_column                    => 'ITEMS_Y_COLUMN_NAME',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bubble ||','|| c_jet_scatter,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_Z_COLUMN_NAME',
        p_db_column                    => 'ITEMS_Z_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_bar||','||c_jet_bubble||',barRange,boxPlot',
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_TARGET_VALUE',
        p_db_column                    => 'ITEMS_TARGET_VALUE',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_funnel,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_MIN_VALUE',
        p_db_column                    => 'ITEMS_MIN_VALUE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_MAX_VALUE',
        p_db_column                    => 'ITEMS_MAX_VALUE',
        p_is_required                  => true,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_dial,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --    
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_SHORT_DESC_COLUMN_NAME',
        p_db_column                    => 'ITEMS_SHORT_DESC_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION',
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_dial || ',' || c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'GROUP_NAME_COLUMN_NAME',
        p_db_column                    => 'GROUP_NAME_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_group_column,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'GROUP_SHORT_DESC_COLUMN_NAME',
        p_db_column                    => 'GROUP_SHORT_DESC_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_group_column,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'CUSTOM_COLUMN_NAME',
        p_db_column                    => 'CUSTOM_COLUMN_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION',
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => c_jet_gantt);
    --
    --  Gantt Chart Column Mappings
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_ROW_ID',
        p_db_column                    => 'GANTT_ROW_ID',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_ROW_NAME',
        p_db_column                    => 'GANTT_ROW_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_ID',
        p_db_column                    => 'GANTT_TASK_ID',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_NAME',
        p_db_column                    => 'GANTT_TASK_NAME',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_START_DATE',
        p_db_column                    => 'GANTT_TASK_START_DATE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_END_DATE',
        p_db_column                    => 'GANTT_TASK_END_DATE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );   
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_PROGRESS_COLUMN',
        p_db_column                    => 'GANTT_PROGRESS_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );

    --
/*    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_PREDECESSOR_TASK_ID',
        p_db_column                    => 'GANTT_PREDECESSOR_TASK_ID',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' ); */
    --
/*    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_SUCCESSOR_TASK_ID',
        p_db_column                    => 'GANTT_SUCCESSOR_TASK_ID',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' ); */
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_BASELINE_START_COLUMN',
        p_db_column                    => 'GANTT_BASELINE_START_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_BASELINE_END_COLUMN',
        p_db_column                    => 'GANTT_BASELINE_END_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_VIEWPORT_START_SOURCE',
        p_db_column                   => 'GANTT_VIEWPORT_START_SOURCE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_VIEWPORT_START_COLUMN',
        p_db_column                    => 'GANTT_VIEWPORT_START_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2 => 'JET_GANTT_VIEWPORT_START_SOURCE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'DB_COLUMN');
     --   
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_VIEWPORT_START_ITEM',
        p_db_column                     => 'GANTT_VIEWPORT_START_ITEM',
        p_is_required                   => false,
        p_is_common                     => false,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'JET_GANTT_VIEWPORT_START_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'ITEM' );  
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_VIEWPORT_END_SOURCE',
        p_db_column                   => 'GANTT_VIEWPORT_END_SOURCE',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_VIEWPORT_END_COLUMN',
        p_db_column                    => 'GANTT_VIEWPORT_END_COLUMN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt,
        p_parent_comp_prop_name        => 'CHART_SOURCE_LOCATION',
        p_depending_on_comp_prop_name2 => 'JET_GANTT_VIEWPORT_END_SOURCE',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'DB_COLUMN');
     --   
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_GANTT_VIEWPORT_END_ITEM',
        p_db_column                     => 'GANTT_VIEWPORT_END_ITEM',
        p_is_required                   => false,
        p_is_common                     => false,
        p_depending_on_comp_prop_name   => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'JET_GANTT_VIEWPORT_END_SOURCE',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'ITEM' );
    --
   /* store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_GANTT_TASK_CSS_STYLE',
        p_db_column                    => 'GANTT_TASK_CSS_STYLE',
        p_is_required                  => false,
        p_is_common                    => false,
        p_examples                     => q'~<pre>
font-size:14px;color:red;</pre>~',
        p_depending_on_comp_prop_name  => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_gantt ); */
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_TASK_CSS_CLASS',
        p_db_column                   => 'GANTT_TASK_CSS_CLASS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_PROGRESS_CSS_CLASS',
        p_db_column                   => 'GANTT_PROGRESS_CSS_CLASS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );  
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_GANTT_BASELINE_CSS_CLASS',
        p_db_column                   => 'GANTT_BASELINE_CSS_CLASS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt );
    --    
    -- Link Settings - not supported by JET Dial Gauge chart
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINK_TARGET_TYPE',
        p_db_column                    => null,
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_dial || ',' || c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LINK_TARGET',
        p_db_column                   => 'LINK_TARGET',
        p_is_required                 => true,
        p_is_common                   => true,
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'LINK_TARGET_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'REDIRECT_PAGE,REDIRECT_APP,REDIRECT_URL' );
    --
    -- Appearance Settings
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_COLOR',
        p_db_column                    => 'COLOR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_IN_LIST',
        p_depending_on_expression      => c_jet_dial ||','|| c_jet_gantt );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_Q2_COLOR',
        p_db_column                    => 'Q2_COLOR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'JET_SERIES_Q3_COLOR',
        p_db_column                    => 'Q3_COLOR',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => c_jet_box_plot );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINE_STYLE',
        p_db_column                    => 'LINE_STYLE',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'solid',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_line_style_charts );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINE_WIDTH',
        p_db_column                    => 'LINE_WIDTH',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_line_style_charts );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'LINE_TYPE',
        p_db_column                    => 'LINE_TYPE',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_line_charts );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MARKER_RENDERED',
        p_db_column                    => 'MARKER_RENDERED',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_marker_charts );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MARKER_SHAPE',
        p_db_column                    => 'MARKER_SHAPE',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_marker_charts,
        p_depending_on_comp_prop_name2 => 'MARKER_RENDERED',
        p_depending_on_condition_type2 => 'NOT_EQUALS',
        p_depending_on_expression2     => 'off' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ASSIGNED_TO_Y2',
        p_db_column                    => 'ASSIGNED_TO_Y2',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'off',
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => c_jet_stack || ',' || c_jet_box_plot );
    -- Item Labels
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_LABEL_RENDERED',
        p_db_column                    => 'ITEMS_LABEL_RENDERED',
        p_is_required                  => true,
        p_is_common                    => false,
        p_default_value                => 'N' );
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'ITEMS_LABEL_POSITION',
        p_db_column                     => 'ITEMS_LABEL_POSITION',
        p_is_required                   => true,
        p_is_common                     => false,
        p_default_value                 => 'auto',
        p_depending_on_comp_prop_name   => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y',
        p_help_text                     => q'~<p>For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively. The <strong>Outside Slice</strong> value only applies to pie charts.
        The <strong>Above Marker</strong>, <strong>Below Marker</strong>, <strong>Before Marker</strong>, and <strong>After Marker</strong> values only apply to line, area, scatter, and bubble series. The <strong>Inside Bar Edge</strong> and <strong>Outside Bar Edge</strong> values
        only apply to non-polar bar series. Stacked bars do not support <strong>Outside Bar Edge</strong>. The chart does not currently adjust layout to fit labels within the plot area or deal with any overlaps between labels.</p>~',
        p_depending_on_comp_prop_name2  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type2  => 'NOT_IN_LIST',
        p_depending_on_expression2      => c_jet_dial ||',' || c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id             => l_component_type_id,
        p_property_name                 => 'JET_LABEL_DISPLAY_AS',
        p_db_column                     => 'ITEMS_LABEL_DISPLAY_AS',
        p_is_required                   => true,
        p_is_common                     => false,
        p_default_value                 => 'PERCENT',
        p_depending_on_comp_prop_name   => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type   => 'EQUALS',
        p_depending_on_expression       => 'Y',
        p_depending_on_comp_prop_name2  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type2  => 'IN_LIST',
        p_depending_on_expression2      => c_jet_pie_donut);
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'ITEMS_LABEL_CSS_CLASSES',
        p_db_column                    => 'ITEMS_LABEL_CSS_CLASSES',
        p_is_required                  => false,
        p_is_common                    => false,
        p_examples                     => q'~<pre>
font-size:14px;color:white;</pre>~',
        p_depending_on_comp_prop_name  => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'Y',
        p_depending_on_comp_prop_name2  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type2  => 'NOT_IN_LIST',
        p_depending_on_expression2      => c_jet_dial ||',' || c_jet_gantt);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_TASK_LABEL_POSITION',
        p_db_column                   => 'TASK_LABEL_POSITION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'end',
        p_depending_on_comp_prop_name => 'JET_SERIES_TYPE_COLUMN_MAPPING',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => c_jet_gantt,
        p_depending_on_comp_prop_name2  => 'ITEMS_LABEL_RENDERED',
        p_depending_on_condition_type2  => 'EQUALS',
        p_depending_on_expression2      => 'Y');
    
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'MAXIMUM_ROW_COUNT',
        p_db_column                    => 'MAX_ROW_COUNT',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'SERIES_CHART_TYPE',
        p_depending_on_condition_type  => 'NOT_EQUALS',
        p_depending_on_expression      => c_jet_dial);
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'STATIC_ID',
        p_db_column         => 'STATIC_ID',
        p_is_required       => false,
        p_is_common         => false,
        p_help_text         => q'~Enter the static ID for the chart series. The static ID can be useful when developing custom JavaScript behavior for the chart series.~' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => null,
        p_help_text_type              => null,
        p_db_column_type              => 'DISPLAY_WHEN_COND_TYPE',
        p_view_column_type            => 'CONDITION_TYPE',
        p_db_column_expr1             => 'DISPLAY_WHEN_CONDITION',
        p_db_column_expr2             => 'DISPLAY_WHEN_CONDITION2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHORIZATION_SCHEME',
        p_db_column                   => 'SECURITY_SCHEME',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BUILD_OPTION',
        p_db_column                   => 'REQUIRED_PATCH',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );

    --
    --
    -- Component Properties for JET_CHART_AXES
    -- NOTE: the Axes tree should only be visible when chart supports axes
    l_component_type_id           := c_comp_type_jet_chart_axes;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    -- Identification Group Settings
    store_component_prop (
        p_component_type_id          => l_component_type_id,
        p_property_name              => 'NAME',
        p_db_column                  => 'AXIS',
        p_check_uniqueness           => 'PARENT',
        p_is_required                => true,
        p_is_common                  => true,
        p_is_read_only               => true);
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_AXIS_SCALE',
        p_db_column                   => 'AXIS_SCALE',
        p_is_required                 => true,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_SECONDS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_MINUTES',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_HOURS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_DAYS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_WEEKS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_MONTHS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_QUARTERS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'Y',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_ZOOM_ORDER_YEARS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'major,minor');
    --
    store_component_prop (
        p_component_type_id          => l_component_type_id,
        p_property_name              => 'TITLE',
        p_db_column                  => 'TITLE',
        p_is_required                => false,
        p_is_common                  => true,
        p_help_text                  => q'~Enter a title for the axis. This title describes the information being represented on the axis of your chart.~');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'JET_SHOW_AXIS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'on',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    -- Value Group Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AXIS_MIN',
        p_db_column                   => 'MIN',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id          => l_component_type_id,
        p_property_name              => 'AXIS_MAX',
        p_db_column                  => 'MAX',
        p_is_required                => false,
        p_is_common                  => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    -- Settings Group Settings
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_FORMAT_TYPE',
        p_db_column                   => 'FORMAT_TYPE',
        p_is_required                 => false,
        p_is_common                   => true );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_DECIMAL_PLACES',
        p_db_column                    => 'DECIMAL_PLACES',
        p_is_required                  => false,
        p_is_common                    => true,
        p_depending_on_comp_prop_name  => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type  => 'IN_LIST',
        p_depending_on_expression      => 'decimal,currency,percent',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_CURRENCY',
        p_db_column                    => 'CURRENCY',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'currency',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'VALUE_NUMERIC_PATTERN',
        p_db_column                    => 'NUMERIC_PATTERN',
        p_is_required                  => false,
        p_is_common                    => false,
        p_depending_on_comp_prop_name  => 'VALUE_FORMAT_TYPE',
        p_depending_on_condition_type  => 'NOT_NULL',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'IN_LIST',
        p_depending_on_expression2     => 'x,y,y2,major,minor');
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_FORMAT_SCALING',
        p_db_column                   => 'FORMAT_SCALING',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'VALUE_BASELINE_SCALING',
        p_db_column                   => 'BASELINE_SCALING',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'zero',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AXIS_SCALING',
        p_db_column                   => 'SCALING',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'linear',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AXIS_STEP',
        p_db_column                   => 'STEP',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AXIS_POSITION',
        p_db_column                   => 'POSITION',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'NOT_IN_LIST',
        p_depending_on_expression     => 'x,major,minor' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MAJOR_TICK_RENDERED',
        p_db_column                   => 'MAJOR_TICK_RENDERED',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'on',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MIN_STEP',
        p_db_column                   => 'MIN_STEP',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MINOR_TICK_RENDERED',
        p_db_column                   => 'MINOR_TICK_RENDERED',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'off',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'MINOR_STEP',
        p_db_column                   => 'MINOR_STEP',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TICK_LABEL_RENDERED',
        p_db_column                   => 'TICK_LABEL_RENDERED',
        p_is_required                 => false,
        p_is_common                   => true,
        p_default_value               => 'on',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'x,y,y2' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TICK_LABEL_ROTATION',
        p_db_column                    => 'TICK_LABEL_ROTATION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'auto',
        p_depending_on_comp_prop_name  => 'TICK_LABEL_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'x' );
    --
    store_component_prop (
        p_component_type_id            => l_component_type_id,
        p_property_name                => 'TICK_LABEL_POSITION',
        p_db_column                    => 'TICK_LABEL_POSITION',
        p_is_required                  => true,
        p_is_common                    => true,
        p_default_value                => 'outside',
        p_depending_on_comp_prop_name  => 'TICK_LABEL_RENDERED',
        p_depending_on_condition_type  => 'EQUALS',
        p_depending_on_expression      => 'on',
        p_depending_on_comp_prop_name2 => 'NAME',
        p_depending_on_condition_type2 => 'EQUALS',
        p_depending_on_expression2     => 'x' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SPLIT_DUAL_Y',
        p_db_column                   => 'SPLIT_DUAL_Y',
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'auto',
        p_depending_on_comp_prop_name => 'NAME',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'y2' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'SPLITTER_POSITION',
        p_db_column                   => 'SPLITTER_POSITION',
        p_is_required                 => false,
        p_is_common                   => true,
        p_depending_on_comp_prop_name => 'SPLIT_DUAL_Y',
        p_depending_on_condition_type => 'NOT_EQUALS',
        p_depending_on_expression     => 'off' );
    --
    store_component_prop (
        p_component_type_id          => l_component_type_id,
        p_property_name              => 'STATIC_ID',
        p_db_column                  => null,
        p_is_required                => false,
        p_is_common                  => false,
        p_help_text                  => q'~Enter the static ID for the chart axis. The static ID can be useful when developing custom JavaScript behavior for the chart axis.~' );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for JET Chart Series Web Source Parameters
    --
    l_component_type_id           := c_comp_type_jet_chart_ws_param;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_comp_props_web_src_param;

    --
    --
    -- Component Properties for CLASSIC_CALENDAR
    --
    l_component_type_id           := c_comp_type_classic_calendar;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    -- Entry
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'DATE_COLUMN',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => true,
        p_parent_comp_type_id   => c_comp_type_region,
        p_parent_comp_prop_name => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_DISPLAY_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'COL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DISPLAY_COLUMN',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_parent_comp_type_id         => c_comp_type_region,
        p_parent_comp_prop_name       => 'REGION_SQL',
        p_depending_on_comp_prop_name => 'CALENDAR_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'COL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CALENDAR_CUSTOM_FORMAT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'CALENDAR_DISPLAY_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CUS' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PRIMARY_KEY_COLUMN',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => true,
        p_parent_comp_type_id   => c_comp_type_region,
        p_parent_comp_prop_name => 'REGION_SQL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DATE_FORMAT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => 'N',
        p_depending_on_comp_prop_name => 'CALENDAR_DISPLAY_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'COL,CUS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TIME_FORMAT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '24HOUR',
        p_depending_on_comp_prop_name => 'DATE_FORMAT',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    -- Link
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'OPEN_LINK_IN',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'W' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'ENTRY_LINK_TARGET',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DAY_LINK_TARGET',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    -- Appearance
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_TEMPLATE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '#DEFAULT_CALENDAR_TEMPLATE#' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'BEGIN_AT_START_OF_INTERVAL',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'Y' );
    --
    -- Monthly Calendar
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'START_OF_WEEK_FOR_MONTHLY_CALENDAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '19721105' );
    --
    -- Weekly Calendar
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'START_DAY_FOR_WEEKLY_CALENDAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '19721105' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'END_DAY_FOR_WEEKLY_CALENDAR',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => '19721111' );
    --
    -- Daily and Weekly Calendar
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'START_TIME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => '8' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'END_TIME',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_default_value     => '18' );
    --
    -- List View Calendar
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'LIST_VIEW_DAYS_DISPLAY',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false,
        p_default_value     => 'MONTH' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LIST_VIEW_CUSTOM_DAYS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => '30',
        p_depending_on_comp_prop_name => 'LIST_VIEW_DAYS_DISPLAY',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'CUSTOM' );
    --
    -- Colors
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DATA_BACKGROUND_COLOR',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DATA_TEXT_COLOR',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false );
    --
    -- Drag and Drop
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DRAG_DROP_PROCESS',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => false,
        p_comment_text      => '$$$ we should only show Ajax processes of the current page' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'DRAG_AND_DROP_AUTHORIZATION_SCHEME',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'DRAG_DROP_PROCESS',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    -- Calendar State
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_TYPE_ITEM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_DATE_ITEM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'CALENDAR_END_DATE_ITEM',
        p_db_column         => null,
        p_is_required       => false,
        p_is_common         => true );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for IR_PRINT_ATTR
    --
    l_component_type_id           := c_comp_type_ir_print;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_print_comp_props (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for IG_PRINT_ATTR
    --
    l_component_type_id           := c_comp_type_ig_print;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_print_comp_props (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for CLASSIC_REPORT_PRINT_ATTR
    --
    l_component_type_id           := c_comp_type_classic_rpt_print;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_print_comp_props (
        p_component_type_id => l_component_type_id );
    --
    --
    -- Component Properties for TAB_FORM_PRINT_ATTR
    --
    l_component_type_id           := c_comp_type_tab_form_print;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_print_comp_props (
        p_component_type_id => l_component_type_id );
    --
    --
    --
    -- Component Properties for REGION_PLUGIN_ATTRIBUTES
    --
    l_component_type_id := c_comp_type_region_plugin_attr;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HIDDEN_REGION_TYPE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => false ); /* property is hidden */
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'LIST_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '#DEFAULT_LIST_TEMPLATE#',
        p_depending_on_comp_prop_name => 'HIDDEN_REGION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_LIST' );
   --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS',
        p_db_column                   => 'COMPONENT_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'LIST_TEMPLATE',
        p_depending_on_comp_prop_name => 'LIST_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'BREADCRUMB_TEMPLATE',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '#DEFAULT_BREADCRUMB_TEMPLATE#',
        p_depending_on_comp_prop_name => 'HIDDEN_REGION_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NATIVE_BREADCRUMB' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'TEMPLATE_OPTIONS2',
        p_db_column                   => 'COMPONENT_TEMPLATE_OPTIONS',
        p_is_required                 => false,
        p_is_common                   => false,
        p_default_value               => '#DEFAULT##PRESET_TEMPLATE_OPTIONS#',
        p_parent_comp_prop_name       => 'BREADCRUMB_TEMPLATE',
        p_depending_on_comp_prop_name => 'BREADCRUMB_TEMPLATE',
        p_depending_on_condition_type => 'NOT_NULL' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'REGION_SUB_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'HIDDEN_REGION_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'NATIVE_BREADCRUMB,NATIVE_LIST',
        p_help_text                   => q'~Enter classes to add to this component. You may add multiple classes by separating them with spaces.~', 
        p_comment_text                => '$$$ we should only show this property if the template supports the #COMPONENT_CSS_CLASSES# placeholder' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    -- *** NOTE: If properties are added which are stored in WWV_FLOW_PAGE_PLUGS and
    --           which are also used by the classic report / tabular form componen type
    --           then you have to add a synchronization code to pe.callbacks.js!!!
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'NUMBER_OF_ROWS_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'STATIC',
        p_plugin_std_attributes => 'FETCHED_ROWS' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NUMBER_OF_ROWS',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => true,
        p_default_value               => '15',
        p_depending_on_comp_prop_name => 'NUMBER_OF_ROWS_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'STATIC' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'NUMBER_OF_ROWS_ITEM',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'NUMBER_OF_ROWS_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'ITEM' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'WHEN_NO_DATA_FOUND_MESSAGE',
        p_db_column             => 'PLUG_QUERY_NO_DATA_FOUND',
        p_is_required           => false,
        p_is_common             => false,
        p_plugin_std_attributes => 'NO_DATA_FOUND_MESSAGE' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'HEADINGS_TYPE',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'COLON_DELMITED_LIST',
        p_plugin_std_attributes => 'COLUMN_HEADING' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HEADING_TYPE_PLSQL_FUNCTION_BODY',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'HEADINGS_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'FUNCTION_BODY_RETURNING_COLON_DELIMITED_LIST' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'PLUGIN_INIT_JAVASCRIPT_CODE',
        p_db_column             => null,
        p_is_required           => false,
        p_is_common             => false,
        p_default_value         => null,
        p_plugin_std_attributes => 'INIT_JAVASCRIPT_CODE' );
    --
    --
    -- Component Properties for REGION_COLUMN
    --
    l_component_type_id := c_comp_type_region_column;
    -- Reset Component Property sequence for this component type
    g_component_property_sequence := 10;
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'HIDDEN_REGION_TYPE',
        p_db_column         => 'REGION_TYPE',
        p_is_required       => true,
        p_is_common         => false ); /* property is hidden */
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_NAME',
        p_db_column         => 'NAME',
        p_is_required       => true,
        p_is_common         => true,
        p_is_read_only      => true,
        p_check_uniqueness  => 'PARENT' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'COLUMN_TYPE',
        p_db_column         => 'DATA_TYPE',
        p_is_required       => true,
        p_is_common         => false );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'IS_VISIBLE',
        p_db_column         => null,
        p_is_required       => true,
        p_is_common         => true,
        p_default_value     => 'Y' );
    --
    store_plugin_attr_seq_offset (
        p_component_type_id => l_component_type_id );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_HEADING',
        p_db_column                   => 'HEADING',
        p_is_required                 => false,
        p_is_common                   => true,
        p_plugin_std_attributes       => 'COLUMN_HEADING',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'HEADING_ALIGNMENT',
        p_db_column                   => null,
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'CENTER',
        p_plugin_std_attributes       => 'HEADING_ALIGNMENT',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id => l_component_type_id,
        p_property_name     => 'DISPLAY_SEQUENCE',
        p_db_column         => 'DISPLAY_SEQUENCE',
        p_is_required       => true,
        p_is_common         => true );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'COLUMN_ALIGNMENT',
        p_db_column                   => 'VALUE_ALIGNMENT',
        p_is_required                 => true,
        p_is_common                   => false,
        p_default_value               => 'LEFT',
        p_plugin_std_attributes       => 'VALUE_ALIGNMENT',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK_DATE',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COLUMN_TYPE',
        p_depending_on_condition_type => 'IN_LIST',
        p_depending_on_expression     => 'DATE,TIMESTAMP,TIMESTAMP_TZ,TIMESTAMP_LTZ' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'FORMAT_MASK_NUMBER',
        p_db_column                   => null,
        p_is_required                 => false,
        p_is_common                   => false,
        p_depending_on_comp_prop_name => 'COLUMN_TYPE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'NUMBER' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'APPEARANCE_CSS_CLASSES',
        p_db_column                   => 'VALUE_CSS_CLASSES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'VALUE_CSS',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'CUSTOM_ATTRIBUTES',
        p_db_column                   => 'VALUE_ATTRIBUTES',
        p_is_required                 => false,
        p_is_common                   => false,
        p_plugin_std_attributes       => 'VALUE_ATTRIBUTE',
        p_reference_scope             => 'ROW',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_condition_type_comp_prop (
        p_component_type_id           => l_component_type_id,
        p_name_prefix                 => null,
        p_help_text_type              => null,
        p_db_column_type              => 'DISPLAY_CONDITION_TYPE',
        p_view_column_type            => 'CONDITION_TYPE',
        p_db_column_expr1             => 'DISPLAY_CONDITION',
        p_db_column_expr2             => 'DISPLAY_CONDITION2',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id           => l_component_type_id,
        p_property_name               => 'AUTHORIZATION_SCHEME',
        p_db_column                   => 'SECURITY_SCHEME',
        p_is_required                 => false,
        p_is_common                   => false,
        p_reference_on_delete         => 'WEAK_NULL',
        p_depending_on_comp_prop_name => 'IS_VISIBLE',
        p_depending_on_condition_type => 'EQUALS',
        p_depending_on_expression     => 'Y' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'ESCAPE_SPECIAL_CHARACTERS',
        p_db_column             => null,
        p_is_required           => true,
        p_is_common             => false,
        p_default_value         => 'Y',
        p_plugin_std_attributes => 'VALUE_ESCAPE_OUTPUT',
        p_comment_text          => '$$$ should be make that depending on is_visible? Might be useful for secure substitutions in other columns' );
    --
    store_component_prop (
        p_component_type_id   => l_component_type_id,
        p_property_name       => 'BUILD_OPTION',
        p_db_column           => null,
        p_is_required         => false,
        p_is_common           => false,
        p_reference_on_delete => 'WEAK_NULL' );
    --
    store_component_prop (
        p_component_type_id     => l_component_type_id,
        p_property_name         => 'COMMENTS',
        p_db_column             => 'COLUMN_COMMENT',
        p_is_required           => false,
        p_is_common             => false,
        p_supports_substitution => false );
    --
    store_audit_info_comp_prop (
        p_component_type_id => l_component_type_id );
    --
    remove_unused_messages;
    --check_configuration;
    commit;
end;
/
undef LOAD_SYSTEM_MESSAGES
set sqlprefix #
